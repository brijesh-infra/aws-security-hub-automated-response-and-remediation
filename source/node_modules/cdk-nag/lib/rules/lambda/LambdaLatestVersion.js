"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_lambda_1 = require("@aws-cdk/aws-lambda");
const nag_rules_1 = require("../../nag-rules");
/**
 * Non-container Lambda functions are configured to use the latest runtime version
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_lambda_1.CfnFunction) {
        const runtime = nag_rules_1.NagRules.resolveIfPrimitive(node, node.runtime);
        if (!runtime) {
            // Runtime is not required for container lambdas, in this case, not applicable
            return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
        }
        const exp = /^([a-z]+)(\d+(\.?\d+|\.x)?)?.*$/;
        const m = runtime.match(exp);
        if (!m) {
            throw Error(`The Lambda runtime "${runtime}" does not match the expected regular expression, therefore the rule could not be validated.`);
        }
        const runtimeFamily = m[1];
        if (runtimeFamily === 'provided') {
            return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
        }
        // We'll pull the versions which CDK knows about to ensure we don't throw complaints
        // about a runtime version which isn't available for use in the users CDK library.
        const familyVersions = aws_lambda_1.Runtime.ALL.filter((rt) => rt.toString().indexOf(runtimeFamily) === 0)
            .map((rt) => {
            let match = rt.toString().match(exp);
            return {
                value: rt.toString(),
                family: match[1],
                version: parseFloat(match[2]),
            };
        })
            .sort((a, b) => {
            if (a.version < b.version)
                return -1;
            else if (a.version > b.version)
                return 1;
            else
                return 0;
        });
        if (familyVersions.length === 0) {
            throw Error(`Unable to find families for Lambda runtime "${runtime}", therefore the rule could not be validated.`);
        }
        const latestFamilyVersion = familyVersions.pop().value;
        if (runtime !== latestFamilyVersion.toString()) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGFtYmRhTGF0ZXN0VmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydWxlcy9sYW1iZGEvTGFtYmRhTGF0ZXN0VmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7RUFHRTtBQUNGLCtCQUE2QjtBQUM3QixvREFBMkQ7QUFFM0QsK0NBQThEO0FBRTlEOzs7R0FHRztBQUNILGtCQUFlLE1BQU0sQ0FBQyxjQUFjLENBQ2xDLENBQUMsSUFBaUIsRUFBcUIsRUFBRTtJQUN2QyxJQUFJLElBQUksWUFBWSx3QkFBVyxFQUFFO1FBQy9CLE1BQU0sT0FBTyxHQUFHLG9CQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osOEVBQThFO1lBQzlFLE9BQU8sNkJBQWlCLENBQUMsY0FBYyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxHQUFHLEdBQUcsaUNBQWlDLENBQUM7UUFDOUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ04sTUFBTSxLQUFLLENBQ1QsdUJBQXVCLE9BQU8sOEZBQThGLENBQzdILENBQUM7U0FDSDtRQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLGFBQWEsS0FBSyxVQUFVLEVBQUU7WUFDaEMsT0FBTyw2QkFBaUIsQ0FBQyxjQUFjLENBQUM7U0FDekM7UUFFRCxvRkFBb0Y7UUFDcEYsa0ZBQWtGO1FBQ2xGLE1BQU0sY0FBYyxHQUFHLG9CQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FDdkMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUNuRDthQUNFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ1YsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQyxPQUFPO2dCQUNMLEtBQUssRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFFO2dCQUNwQixNQUFNLEVBQUUsS0FBTSxDQUFDLENBQUMsQ0FBQztnQkFDakIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxLQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDL0IsQ0FBQztRQUNKLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNiLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTztnQkFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUNoQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU87Z0JBQUUsT0FBTyxDQUFDLENBQUM7O2dCQUNwQyxPQUFPLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksY0FBYyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDL0IsTUFBTSxLQUFLLENBQ1QsK0NBQStDLE9BQU8sK0NBQStDLENBQ3RHLENBQUM7U0FDSDtRQUVELE1BQU0sbUJBQW1CLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRyxDQUFDLEtBQUssQ0FBQztRQUV4RCxJQUFJLE9BQU8sS0FBSyxtQkFBb0IsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUMvQyxPQUFPLDZCQUFpQixDQUFDLGFBQWEsQ0FBQztTQUN4QztRQUVELE9BQU8sNkJBQWlCLENBQUMsU0FBUyxDQUFDO0tBQ3BDO1NBQU07UUFDTCxPQUFPLDZCQUFpQixDQUFDLGNBQWMsQ0FBQztLQUN6QztBQUNILENBQUMsRUFDRCxNQUFNLEVBQ04sRUFBRSxLQUFLLEVBQUUsWUFBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ2ZuRnVuY3Rpb24sIFJ1bnRpbWUgfSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCB7IENmblJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBOYWdSdWxlQ29tcGxpYW5jZSwgTmFnUnVsZXMgfSBmcm9tICcuLi8uLi9uYWctcnVsZXMnO1xuXG4vKipcbiAqIE5vbi1jb250YWluZXIgTGFtYmRhIGZ1bmN0aW9ucyBhcmUgY29uZmlndXJlZCB0byB1c2UgdGhlIGxhdGVzdCBydW50aW1lIHZlcnNpb25cbiAqIEBwYXJhbSBub2RlIHRoZSBDZm5SZXNvdXJjZSB0byBjaGVja1xuICovXG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gIChub2RlOiBDZm5SZXNvdXJjZSk6IE5hZ1J1bGVDb21wbGlhbmNlID0+IHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIENmbkZ1bmN0aW9uKSB7XG4gICAgICBjb25zdCBydW50aW1lID0gTmFnUnVsZXMucmVzb2x2ZUlmUHJpbWl0aXZlKG5vZGUsIG5vZGUucnVudGltZSk7XG4gICAgICBpZiAoIXJ1bnRpbWUpIHtcbiAgICAgICAgLy8gUnVudGltZSBpcyBub3QgcmVxdWlyZWQgZm9yIGNvbnRhaW5lciBsYW1iZGFzLCBpbiB0aGlzIGNhc2UsIG5vdCBhcHBsaWNhYmxlXG4gICAgICAgIHJldHVybiBOYWdSdWxlQ29tcGxpYW5jZS5OT1RfQVBQTElDQUJMRTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXhwID0gL14oW2Etel0rKShcXGQrKFxcLj9cXGQrfFxcLngpPyk/LiokLztcbiAgICAgIGNvbnN0IG0gPSBydW50aW1lLm1hdGNoKGV4cCk7XG5cbiAgICAgIGlmICghbSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgVGhlIExhbWJkYSBydW50aW1lIFwiJHtydW50aW1lfVwiIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCByZWd1bGFyIGV4cHJlc3Npb24sIHRoZXJlZm9yZSB0aGUgcnVsZSBjb3VsZCBub3QgYmUgdmFsaWRhdGVkLmBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcnVudGltZUZhbWlseSA9IG1bMV07XG4gICAgICBpZiAocnVudGltZUZhbWlseSA9PT0gJ3Byb3ZpZGVkJykge1xuICAgICAgICByZXR1cm4gTmFnUnVsZUNvbXBsaWFuY2UuTk9UX0FQUExJQ0FCTEU7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlJ2xsIHB1bGwgdGhlIHZlcnNpb25zIHdoaWNoIENESyBrbm93cyBhYm91dCB0byBlbnN1cmUgd2UgZG9uJ3QgdGhyb3cgY29tcGxhaW50c1xuICAgICAgLy8gYWJvdXQgYSBydW50aW1lIHZlcnNpb24gd2hpY2ggaXNuJ3QgYXZhaWxhYmxlIGZvciB1c2UgaW4gdGhlIHVzZXJzIENESyBsaWJyYXJ5LlxuICAgICAgY29uc3QgZmFtaWx5VmVyc2lvbnMgPSBSdW50aW1lLkFMTC5maWx0ZXIoXG4gICAgICAgIChydCkgPT4gcnQudG9TdHJpbmcoKS5pbmRleE9mKHJ1bnRpbWVGYW1pbHkpID09PSAwXG4gICAgICApXG4gICAgICAgIC5tYXAoKHJ0KSA9PiB7XG4gICAgICAgICAgbGV0IG1hdGNoID0gcnQudG9TdHJpbmcoKS5tYXRjaChleHApO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcnQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGZhbWlseTogbWF0Y2ghWzFdLFxuICAgICAgICAgICAgdmVyc2lvbjogcGFyc2VGbG9hdChtYXRjaCFbMl0pLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgaWYgKGEudmVyc2lvbiA8IGIudmVyc2lvbikgcmV0dXJuIC0xO1xuICAgICAgICAgIGVsc2UgaWYgKGEudmVyc2lvbiA+IGIudmVyc2lvbikgcmV0dXJuIDE7XG4gICAgICAgICAgZWxzZSByZXR1cm4gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgIGlmIChmYW1pbHlWZXJzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYFVuYWJsZSB0byBmaW5kIGZhbWlsaWVzIGZvciBMYW1iZGEgcnVudGltZSBcIiR7cnVudGltZX1cIiwgdGhlcmVmb3JlIHRoZSBydWxlIGNvdWxkIG5vdCBiZSB2YWxpZGF0ZWQuYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsYXRlc3RGYW1pbHlWZXJzaW9uID0gZmFtaWx5VmVyc2lvbnMucG9wKCkhLnZhbHVlO1xuXG4gICAgICBpZiAocnVudGltZSAhPT0gbGF0ZXN0RmFtaWx5VmVyc2lvbiEudG9TdHJpbmcoKSkge1xuICAgICAgICByZXR1cm4gTmFnUnVsZUNvbXBsaWFuY2UuTk9OX0NPTVBMSUFOVDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE5hZ1J1bGVDb21wbGlhbmNlLkNPTVBMSUFOVDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE5hZ1J1bGVDb21wbGlhbmNlLk5PVF9BUFBMSUNBQkxFO1xuICAgIH1cbiAgfSxcbiAgJ25hbWUnLFxuICB7IHZhbHVlOiBwYXJzZShfX2ZpbGVuYW1lKS5uYW1lIH1cbik7XG4iXX0=