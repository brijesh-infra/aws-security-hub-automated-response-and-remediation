"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_cloudfront_1 = require("@aws-cdk/aws-cloudfront");
const core_1 = require("@aws-cdk/core");
const nag_rules_1 = require("../../nag-rules");
/**
 *  CloudFront distributions use a security policy with minimum TLSv1.1 or TLSv1.2 and appropriate security ciphers for HTTPS viewer connections
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_cloudfront_1.CfnDistribution) {
        const distributionConfig = core_1.Stack.of(node).resolve(node.distributionConfig);
        const viewerCertificate = core_1.Stack.of(node).resolve(distributionConfig.viewerCertificate);
        if (viewerCertificate === undefined) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        const minimumProtocolVersion = core_1.Stack.of(node).resolve(viewerCertificate.minimumProtocolVersion);
        const sslSupportMethod = core_1.Stack.of(node).resolve(viewerCertificate.sslSupportMethod);
        const cloudFrontDefaultCertificate = core_1.Stack.of(node).resolve(viewerCertificate.cloudFrontDefaultCertificate);
        const outdatedProtocols = ['SSLv3', 'TLSv1', 'TLSv1_2016'];
        if (cloudFrontDefaultCertificate === true ||
            sslSupportMethod === undefined ||
            sslSupportMethod.toLowerCase() === 'vip' ||
            minimumProtocolVersion === undefined ||
            outdatedProtocols
                .map((x) => x.toLowerCase())
                .includes(minimumProtocolVersion.toLowerCase())) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xvdWRGcm9udERpc3RyaWJ1dGlvbkh0dHBzVmlld2VyTm9PdXRkYXRlZFNTTC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydWxlcy9jbG91ZGZyb250L0Nsb3VkRnJvbnREaXN0cmlidXRpb25IdHRwc1ZpZXdlck5vT3V0ZGF0ZWRTU0wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0VBR0U7QUFDRiwrQkFBNkI7QUFDN0IsNERBQTBEO0FBQzFELHdDQUFtRDtBQUNuRCwrQ0FBb0Q7QUFFcEQ7OztHQUdHO0FBQ0gsa0JBQWUsTUFBTSxDQUFDLGNBQWMsQ0FDbEMsQ0FBQyxJQUFpQixFQUFxQixFQUFFO0lBQ3ZDLElBQUksSUFBSSxZQUFZLGdDQUFlLEVBQUU7UUFDbkMsTUFBTSxrQkFBa0IsR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FDL0MsSUFBSSxDQUFDLGtCQUFrQixDQUN4QixDQUFDO1FBQ0YsTUFBTSxpQkFBaUIsR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FDOUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQ3JDLENBQUM7UUFDRixJQUFJLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtZQUNuQyxPQUFPLDZCQUFpQixDQUFDLGFBQWEsQ0FBQztTQUN4QztRQUNELE1BQU0sc0JBQXNCLEdBQUcsWUFBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQ25ELGlCQUFpQixDQUFDLHNCQUFzQixDQUN6QyxDQUFDO1FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FDN0MsaUJBQWlCLENBQUMsZ0JBQWdCLENBQ25DLENBQUM7UUFDRixNQUFNLDRCQUE0QixHQUFHLFlBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUN6RCxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FDL0MsQ0FBQztRQUNGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzNELElBQ0UsNEJBQTRCLEtBQUssSUFBSTtZQUNyQyxnQkFBZ0IsS0FBSyxTQUFTO1lBQzlCLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUs7WUFDeEMsc0JBQXNCLEtBQUssU0FBUztZQUNwQyxpQkFBaUI7aUJBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQzNCLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUNqRDtZQUNBLE9BQU8sNkJBQWlCLENBQUMsYUFBYSxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyw2QkFBaUIsQ0FBQyxTQUFTLENBQUM7S0FDcEM7U0FBTTtRQUNMLE9BQU8sNkJBQWlCLENBQUMsY0FBYyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQyxFQUNELE1BQU0sRUFDTixFQUFFLEtBQUssRUFBRSxZQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQ2xDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5TUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDZm5EaXN0cmlidXRpb24gfSBmcm9tICdAYXdzLWNkay9hd3MtY2xvdWRmcm9udCc7XG5pbXBvcnQgeyBDZm5SZXNvdXJjZSwgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IE5hZ1J1bGVDb21wbGlhbmNlIH0gZnJvbSAnLi4vLi4vbmFnLXJ1bGVzJztcblxuLyoqXG4gKiAgQ2xvdWRGcm9udCBkaXN0cmlidXRpb25zIHVzZSBhIHNlY3VyaXR5IHBvbGljeSB3aXRoIG1pbmltdW0gVExTdjEuMSBvciBUTFN2MS4yIGFuZCBhcHByb3ByaWF0ZSBzZWN1cml0eSBjaXBoZXJzIGZvciBIVFRQUyB2aWV3ZXIgY29ubmVjdGlvbnNcbiAqIEBwYXJhbSBub2RlIHRoZSBDZm5SZXNvdXJjZSB0byBjaGVja1xuICovXG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gIChub2RlOiBDZm5SZXNvdXJjZSk6IE5hZ1J1bGVDb21wbGlhbmNlID0+IHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIENmbkRpc3RyaWJ1dGlvbikge1xuICAgICAgY29uc3QgZGlzdHJpYnV0aW9uQ29uZmlnID0gU3RhY2sub2Yobm9kZSkucmVzb2x2ZShcbiAgICAgICAgbm9kZS5kaXN0cmlidXRpb25Db25maWdcbiAgICAgICk7XG4gICAgICBjb25zdCB2aWV3ZXJDZXJ0aWZpY2F0ZSA9IFN0YWNrLm9mKG5vZGUpLnJlc29sdmUoXG4gICAgICAgIGRpc3RyaWJ1dGlvbkNvbmZpZy52aWV3ZXJDZXJ0aWZpY2F0ZVxuICAgICAgKTtcbiAgICAgIGlmICh2aWV3ZXJDZXJ0aWZpY2F0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBOYWdSdWxlQ29tcGxpYW5jZS5OT05fQ09NUExJQU5UO1xuICAgICAgfVxuICAgICAgY29uc3QgbWluaW11bVByb3RvY29sVmVyc2lvbiA9IFN0YWNrLm9mKG5vZGUpLnJlc29sdmUoXG4gICAgICAgIHZpZXdlckNlcnRpZmljYXRlLm1pbmltdW1Qcm90b2NvbFZlcnNpb25cbiAgICAgICk7XG4gICAgICBjb25zdCBzc2xTdXBwb3J0TWV0aG9kID0gU3RhY2sub2Yobm9kZSkucmVzb2x2ZShcbiAgICAgICAgdmlld2VyQ2VydGlmaWNhdGUuc3NsU3VwcG9ydE1ldGhvZFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNsb3VkRnJvbnREZWZhdWx0Q2VydGlmaWNhdGUgPSBTdGFjay5vZihub2RlKS5yZXNvbHZlKFxuICAgICAgICB2aWV3ZXJDZXJ0aWZpY2F0ZS5jbG91ZEZyb250RGVmYXVsdENlcnRpZmljYXRlXG4gICAgICApO1xuICAgICAgY29uc3Qgb3V0ZGF0ZWRQcm90b2NvbHMgPSBbJ1NTTHYzJywgJ1RMU3YxJywgJ1RMU3YxXzIwMTYnXTtcbiAgICAgIGlmIChcbiAgICAgICAgY2xvdWRGcm9udERlZmF1bHRDZXJ0aWZpY2F0ZSA9PT0gdHJ1ZSB8fFxuICAgICAgICBzc2xTdXBwb3J0TWV0aG9kID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgc3NsU3VwcG9ydE1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSAndmlwJyB8fFxuICAgICAgICBtaW5pbXVtUHJvdG9jb2xWZXJzaW9uID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgb3V0ZGF0ZWRQcm90b2NvbHNcbiAgICAgICAgICAubWFwKCh4KSA9PiB4LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgLmluY2x1ZGVzKG1pbmltdW1Qcm90b2NvbFZlcnNpb24udG9Mb3dlckNhc2UoKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gTmFnUnVsZUNvbXBsaWFuY2UuTk9OX0NPTVBMSUFOVDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBOYWdSdWxlQ29tcGxpYW5jZS5DT01QTElBTlQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOYWdSdWxlQ29tcGxpYW5jZS5OT1RfQVBQTElDQUJMRTtcbiAgICB9XG4gIH0sXG4gICduYW1lJyxcbiAgeyB2YWx1ZTogcGFyc2UoX19maWxlbmFtZSkubmFtZSB9XG4pO1xuIl19