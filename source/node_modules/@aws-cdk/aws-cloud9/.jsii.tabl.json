{
  "version": "2",
  "toolVersion": "1.63.2",
  "snippets": {
    "87bce169f758bb74f34a6c71b9ff231d4d67b24ef8280cac672a3cac2263d2ff": {
      "translations": {
        "python": {
          "source": "# create a cloud9 ec2 environment in a new VPC\nvpc = ec2.Vpc(self, \"VPC\", max_azs=3)\ncloud9.Ec2Environment(self, \"Cloud9Env\", vpc=vpc)\n\n# or create the cloud9 environment in the default VPC with specific instanceType\ndefault_vpc = ec2.Vpc.from_lookup(self, \"DefaultVPC\", is_default=True)\ncloud9.Ec2Environment(self, \"Cloud9Env2\",\n    vpc=default_vpc,\n    instance_type=ec2.InstanceType(\"t3.large\")\n)\n\n# or specify in a different subnetSelection\nc9env = cloud9.Ec2Environment(self, \"Cloud9Env3\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    )\n)\n\n# print the Cloud9 IDE URL in the output\nCfnOutput(self, \"URL\", value=c9env.ide_url)",
          "version": "2"
        },
        "csharp": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = new Vpc(this, \"VPC\", new VpcProps { MaxAzs = 3 });\nnew Ec2Environment(this, \"Cloud9Env\", new Ec2EnvironmentProps { Vpc = vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.FromLookup(this, \"DefaultVPC\", new VpcLookupOptions { IsDefault = true });\nnew Ec2Environment(this, \"Cloud9Env2\", new Ec2EnvironmentProps {\n    Vpc = defaultVpc,\n    InstanceType = new InstanceType(\"t3.large\")\n});\n\n// or specify in a different subnetSelection\nEc2Environment c9env = new Ec2Environment(this, \"Cloud9Env3\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }\n});\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, \"URL\", new CfnOutputProps { Value = c9env.IdeUrl });",
          "version": "1"
        },
        "java": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = Vpc.Builder.create(this, \"VPC\").maxAzs(3).build();\nEc2Environment.Builder.create(this, \"Cloud9Env\").vpc(vpc).build();\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.fromLookup(this, \"DefaultVPC\", VpcLookupOptions.builder().isDefault(true).build());\nEc2Environment.Builder.create(this, \"Cloud9Env2\")\n        .vpc(defaultVpc)\n        .instanceType(new InstanceType(\"t3.large\"))\n        .build();\n\n// or specify in a different subnetSelection\nEc2Environment c9env = Ec2Environment.Builder.create(this, \"Cloud9Env3\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build())\n        .build();\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nCfnOutput.Builder.create(this, \"URL\").value(c9env.getIdeUrl()).build();",
          "version": "1"
        },
        "go": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tmaxAzs: jsii.Number(3),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n})\n\n// or create the cloud9 environment in the default VPC with specific instanceType\ndefaultVpc := ec2.vpc.fromLookup(this, jsii.String(\"DefaultVPC\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env2\"), &ec2EnvironmentProps{\n\tvpc: defaultVpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n})\n\n// or specify in a different subnetSelection\nc9env := cloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env3\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tsubnetSelection: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE_WITH_NAT,\n\t},\n})\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nawscdkcore.NewCfnOutput(this, jsii.String(\"URL\"), &cfnOutputProps{\n\tvalue: c9env.ideUrl,\n})",
          "version": "1"
        },
        "$": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloud9"
        },
        "field": {
          "field": "markdown",
          "line": 42
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2Environment#ideUrl",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 32,
        "104": 6,
        "106": 1,
        "193": 7,
        "194": 10,
        "196": 1,
        "197": 6,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2
      },
      "fqnsFingerprint": "a73e82c5dd3fc3de4ba7b54f76df7d30d4a8339e73527506d1ad2c0ee1c1e5a4"
    },
    "f7f397b3938687eede143354a3ab2ed009b7c3f0e20c9cdf7bb8e47b307e8235": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n# create a new Cloud9 environment and clone the two repositories\n# vpc: ec2.Vpc\n\n\n# create a codecommit repository to clone into the cloud9 environment\nrepo_new = codecommit.Repository(self, \"RepoNew\",\n    repository_name=\"new-repo\"\n)\n\n# import an existing codecommit repository to clone into the cloud9 environment\nrepo_existing = codecommit.Repository.from_repository_name(self, \"RepoExisting\", \"existing-repo\")\ncloud9.Ec2Environment(self, \"C9Env\",\n    vpc=vpc,\n    cloned_repositories=[\n        cloud9.CloneRepository.from_code_commit(repo_new, \"/src/new-repo\"),\n        cloud9.CloneRepository.from_code_commit(repo_existing, \"/src/existing-repo\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n// create a new Cloud9 environment and clone the two repositories\nVpc vpc;\n\n\n// create a codecommit repository to clone into the cloud9 environment\nRepository repoNew = new Repository(this, \"RepoNew\", new RepositoryProps {\n    RepositoryName = \"new-repo\"\n});\n\n// import an existing codecommit repository to clone into the cloud9 environment\nIRepository repoExisting = Repository.FromRepositoryName(this, \"RepoExisting\", \"existing-repo\");\nnew Ec2Environment(this, \"C9Env\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    ClonedRepositories = new [] { CloneRepository.FromCodeCommit(repoNew, \"/src/new-repo\"), CloneRepository.FromCodeCommit(repoExisting, \"/src/existing-repo\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n// create a new Cloud9 environment and clone the two repositories\nVpc vpc;\n\n\n// create a codecommit repository to clone into the cloud9 environment\nRepository repoNew = Repository.Builder.create(this, \"RepoNew\")\n        .repositoryName(\"new-repo\")\n        .build();\n\n// import an existing codecommit repository to clone into the cloud9 environment\nIRepository repoExisting = Repository.fromRepositoryName(this, \"RepoExisting\", \"existing-repo\");\nEc2Environment.Builder.create(this, \"C9Env\")\n        .vpc(vpc)\n        .clonedRepositories(List.of(CloneRepository.fromCodeCommit(repoNew, \"/src/new-repo\"), CloneRepository.fromCodeCommit(repoExisting, \"/src/existing-repo\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codecommit \"github.com/aws-samples/dummy/awscdkawscodecommit\"\n\n// create a new Cloud9 environment and clone the two repositories\nvar vpc vpc\n\n\n// create a codecommit repository to clone into the cloud9 environment\nrepoNew := codecommit.NewRepository(this, jsii.String(\"RepoNew\"), &repositoryProps{\n\trepositoryName: jsii.String(\"new-repo\"),\n})\n\n// import an existing codecommit repository to clone into the cloud9 environment\nrepoExisting := codecommit.repository.fromRepositoryName(this, jsii.String(\"RepoExisting\"), jsii.String(\"existing-repo\"))\ncloud9.NewEc2Environment(this, jsii.String(\"C9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tclonedRepositories: []cloneRepository{\n\t\tcloud9.*cloneRepository.fromCodeCommit(repoNew, jsii.String(\"/src/new-repo\")),\n\t\tcloud9.*cloneRepository.fromCodeCommit(repoExisting, jsii.String(\"/src/existing-repo\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\n\n// create a codecommit repository to clone into the cloud9 environment\nconst repoNew = new codecommit.Repository(this, 'RepoNew', {\n  repositoryName: 'new-repo',\n});\n\n// import an existing codecommit repository to clone into the cloud9 environment\nconst repoExisting = codecommit.Repository.fromRepositoryName(this, 'RepoExisting', 'existing-repo');\n\n// create a new Cloud9 environment and clone the two repositories\ndeclare const vpc: ec2.Vpc;\nnew cloud9.Ec2Environment(this, 'C9Env', {\n  vpc,\n  clonedRepositories: [\n    cloud9.CloneRepository.fromCodeCommit(repoNew, '/src/new-repo'),\n    cloud9.CloneRepository.fromCodeCommit(repoExisting, '/src/existing-repo'),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloud9"
        },
        "field": {
          "field": "markdown",
          "line": 70
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.CloneRepository",
        "@aws-cdk/aws-cloud9.CloneRepository#fromCodeCommit",
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.Repository#fromRepositoryName",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\n// create a new Cloud9 environment and clone the two repositories\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a codecommit repository to clone into the cloud9 environment\nconst repoNew = new codecommit.Repository(this, 'RepoNew', {\n  repositoryName: 'new-repo',\n});\n\n// import an existing codecommit repository to clone into the cloud9 environment\nconst repoExisting = codecommit.Repository.fromRepositoryName(this, 'RepoExisting', 'existing-repo');\nnew cloud9.Ec2Environment(this, 'C9Env', {\n  vpc,\n  clonedRepositories: [\n    cloud9.CloneRepository.fromCodeCommit(repoNew, '/src/new-repo'),\n    cloud9.CloneRepository.fromCodeCommit(repoExisting, '/src/existing-repo'),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 24,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dfa9dbd702b8b4d67df500b8ea71f5d3e5d97a1aaa39d274b84d218b81a324df"
    },
    "f53bb606c4efce044612358a937780011cfaf9bb514fc134a22ebbf4f621bdde": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloud9 as cloud9\n\ncfn_environment_eC2 = cloud9.CfnEnvironmentEC2(self, \"MyCfnEnvironmentEC2\",\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    automatic_stop_time_minutes=123,\n    connection_type=\"connectionType\",\n    description=\"description\",\n    image_id=\"imageId\",\n    name=\"name\",\n    owner_arn=\"ownerArn\",\n    repositories=[cloud9.CfnEnvironmentEC2.RepositoryProperty(\n        path_component=\"pathComponent\",\n        repository_url=\"repositoryUrl\"\n    )],\n    subnet_id=\"subnetId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cloud9;\n\nCfnEnvironmentEC2 cfnEnvironmentEC2 = new CfnEnvironmentEC2(this, \"MyCfnEnvironmentEC2\", new CfnEnvironmentEC2Props {\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    AutomaticStopTimeMinutes = 123,\n    ConnectionType = \"connectionType\",\n    Description = \"description\",\n    ImageId = \"imageId\",\n    Name = \"name\",\n    OwnerArn = \"ownerArn\",\n    Repositories = new [] { new RepositoryProperty {\n        PathComponent = \"pathComponent\",\n        RepositoryUrl = \"repositoryUrl\"\n    } },\n    SubnetId = \"subnetId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloud9.*;\n\nCfnEnvironmentEC2 cfnEnvironmentEC2 = CfnEnvironmentEC2.Builder.create(this, \"MyCfnEnvironmentEC2\")\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .automaticStopTimeMinutes(123)\n        .connectionType(\"connectionType\")\n        .description(\"description\")\n        .imageId(\"imageId\")\n        .name(\"name\")\n        .ownerArn(\"ownerArn\")\n        .repositories(List.of(RepositoryProperty.builder()\n                .pathComponent(\"pathComponent\")\n                .repositoryUrl(\"repositoryUrl\")\n                .build()))\n        .subnetId(\"subnetId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cloud9 \"github.com/aws-samples/dummy/awscdkawscloud9\"\n\ncfnEnvironmentEC2 := cloud9.NewCfnEnvironmentEC2(this, jsii.String(\"MyCfnEnvironmentEC2\"), &cfnEnvironmentEC2Props{\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tautomaticStopTimeMinutes: jsii.Number(123),\n\tconnectionType: jsii.String(\"connectionType\"),\n\tdescription: jsii.String(\"description\"),\n\timageId: jsii.String(\"imageId\"),\n\tname: jsii.String(\"name\"),\n\townerArn: jsii.String(\"ownerArn\"),\n\trepositories: []interface{}{\n\t\t&repositoryProperty{\n\t\t\tpathComponent: jsii.String(\"pathComponent\"),\n\t\t\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\t\t},\n\t},\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nconst cfnEnvironmentEC2 = new cloud9.CfnEnvironmentEC2(this, 'MyCfnEnvironmentEC2', {\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  automaticStopTimeMinutes: 123,\n  connectionType: 'connectionType',\n  description: 'description',\n  imageId: 'imageId',\n  name: 'name',\n  ownerArn: 'ownerArn',\n  repositories: [{\n    pathComponent: 'pathComponent',\n    repositoryUrl: 'repositoryUrl',\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloud9.CfnEnvironmentEC2"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.CfnEnvironmentEC2",
        "@aws-cdk/aws-cloud9.CfnEnvironmentEC2Props",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEnvironmentEC2 = new cloud9.CfnEnvironmentEC2(this, 'MyCfnEnvironmentEC2', {\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  automaticStopTimeMinutes: 123,\n  connectionType: 'connectionType',\n  description: 'description',\n  imageId: 'imageId',\n  name: 'name',\n  ownerArn: 'ownerArn',\n  repositories: [{\n    pathComponent: 'pathComponent',\n    repositoryUrl: 'repositoryUrl',\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 18,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "25c7e428f11806e29d1052129efb5b04af2c4dc8902f5982cd7c9f90af36ca16"
    },
    "263f3e6dca5a71a8e5a2b85d7ceda995248e7344658efb1adf3ce4ed79fae3e3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloud9 as cloud9\n\nrepository_property = cloud9.CfnEnvironmentEC2.RepositoryProperty(\n    path_component=\"pathComponent\",\n    repository_url=\"repositoryUrl\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cloud9;\n\nRepositoryProperty repositoryProperty = new RepositoryProperty {\n    PathComponent = \"pathComponent\",\n    RepositoryUrl = \"repositoryUrl\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloud9.*;\n\nRepositoryProperty repositoryProperty = RepositoryProperty.builder()\n        .pathComponent(\"pathComponent\")\n        .repositoryUrl(\"repositoryUrl\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cloud9 \"github.com/aws-samples/dummy/awscdkawscloud9\"\n\nrepositoryProperty := &repositoryProperty{\n\tpathComponent: jsii.String(\"pathComponent\"),\n\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nconst repositoryProperty: cloud9.CfnEnvironmentEC2.RepositoryProperty = {\n  pathComponent: 'pathComponent',\n  repositoryUrl: 'repositoryUrl',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloud9.CfnEnvironmentEC2.RepositoryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.CfnEnvironmentEC2.RepositoryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryProperty: cloud9.CfnEnvironmentEC2.RepositoryProperty = {\n  pathComponent: 'pathComponent',\n  repositoryUrl: 'repositoryUrl',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "58947ed172679a5197639c62e8afc5bd6474adef020d096e74c190f35abafcc2"
    },
    "0db9b34e83a74fdaec949df78d8a082b96201da5638079b990957a7d9ed2d850": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloud9 as cloud9\n\ncfn_environment_eC2_props = cloud9.CfnEnvironmentEC2Props(\n    instance_type=\"instanceType\",\n\n    # the properties below are optional\n    automatic_stop_time_minutes=123,\n    connection_type=\"connectionType\",\n    description=\"description\",\n    image_id=\"imageId\",\n    name=\"name\",\n    owner_arn=\"ownerArn\",\n    repositories=[cloud9.CfnEnvironmentEC2.RepositoryProperty(\n        path_component=\"pathComponent\",\n        repository_url=\"repositoryUrl\"\n    )],\n    subnet_id=\"subnetId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cloud9;\n\nCfnEnvironmentEC2Props cfnEnvironmentEC2Props = new CfnEnvironmentEC2Props {\n    InstanceType = \"instanceType\",\n\n    // the properties below are optional\n    AutomaticStopTimeMinutes = 123,\n    ConnectionType = \"connectionType\",\n    Description = \"description\",\n    ImageId = \"imageId\",\n    Name = \"name\",\n    OwnerArn = \"ownerArn\",\n    Repositories = new [] { new RepositoryProperty {\n        PathComponent = \"pathComponent\",\n        RepositoryUrl = \"repositoryUrl\"\n    } },\n    SubnetId = \"subnetId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloud9.*;\n\nCfnEnvironmentEC2Props cfnEnvironmentEC2Props = CfnEnvironmentEC2Props.builder()\n        .instanceType(\"instanceType\")\n\n        // the properties below are optional\n        .automaticStopTimeMinutes(123)\n        .connectionType(\"connectionType\")\n        .description(\"description\")\n        .imageId(\"imageId\")\n        .name(\"name\")\n        .ownerArn(\"ownerArn\")\n        .repositories(List.of(RepositoryProperty.builder()\n                .pathComponent(\"pathComponent\")\n                .repositoryUrl(\"repositoryUrl\")\n                .build()))\n        .subnetId(\"subnetId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cloud9 \"github.com/aws-samples/dummy/awscdkawscloud9\"\n\ncfnEnvironmentEC2Props := &cfnEnvironmentEC2Props{\n\tinstanceType: jsii.String(\"instanceType\"),\n\n\t// the properties below are optional\n\tautomaticStopTimeMinutes: jsii.Number(123),\n\tconnectionType: jsii.String(\"connectionType\"),\n\tdescription: jsii.String(\"description\"),\n\timageId: jsii.String(\"imageId\"),\n\tname: jsii.String(\"name\"),\n\townerArn: jsii.String(\"ownerArn\"),\n\trepositories: []interface{}{\n\t\t&repositoryProperty{\n\t\t\tpathComponent: jsii.String(\"pathComponent\"),\n\t\t\trepositoryUrl: jsii.String(\"repositoryUrl\"),\n\t\t},\n\t},\n\tsubnetId: jsii.String(\"subnetId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nconst cfnEnvironmentEC2Props: cloud9.CfnEnvironmentEC2Props = {\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  automaticStopTimeMinutes: 123,\n  connectionType: 'connectionType',\n  description: 'description',\n  imageId: 'imageId',\n  name: 'name',\n  ownerArn: 'ownerArn',\n  repositories: [{\n    pathComponent: 'pathComponent',\n    repositoryUrl: 'repositoryUrl',\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloud9.CfnEnvironmentEC2Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.CfnEnvironmentEC2Props"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEnvironmentEC2Props: cloud9.CfnEnvironmentEC2Props = {\n  instanceType: 'instanceType',\n\n  // the properties below are optional\n  automaticStopTimeMinutes: 123,\n  connectionType: 'connectionType',\n  description: 'description',\n  imageId: 'imageId',\n  name: 'name',\n  ownerArn: 'ownerArn',\n  repositories: [{\n    pathComponent: 'pathComponent',\n    repositoryUrl: 'repositoryUrl',\n  }],\n  subnetId: 'subnetId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 18,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "f68df62407ee08ac109aed9b45c0a6053d50b0dce6666167c6edefbc56cfbc68"
    },
    "bed707216a9d620e31415d4381057cdcea31d8245f38449f10ea89ca24a29fb8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n# create a new Cloud9 environment and clone the two repositories\n# vpc: ec2.Vpc\n\n\n# create a codecommit repository to clone into the cloud9 environment\nrepo_new = codecommit.Repository(self, \"RepoNew\",\n    repository_name=\"new-repo\"\n)\n\n# import an existing codecommit repository to clone into the cloud9 environment\nrepo_existing = codecommit.Repository.from_repository_name(self, \"RepoExisting\", \"existing-repo\")\ncloud9.Ec2Environment(self, \"C9Env\",\n    vpc=vpc,\n    cloned_repositories=[\n        cloud9.CloneRepository.from_code_commit(repo_new, \"/src/new-repo\"),\n        cloud9.CloneRepository.from_code_commit(repo_existing, \"/src/existing-repo\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n// create a new Cloud9 environment and clone the two repositories\nVpc vpc;\n\n\n// create a codecommit repository to clone into the cloud9 environment\nRepository repoNew = new Repository(this, \"RepoNew\", new RepositoryProps {\n    RepositoryName = \"new-repo\"\n});\n\n// import an existing codecommit repository to clone into the cloud9 environment\nIRepository repoExisting = Repository.FromRepositoryName(this, \"RepoExisting\", \"existing-repo\");\nnew Ec2Environment(this, \"C9Env\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    ClonedRepositories = new [] { CloneRepository.FromCodeCommit(repoNew, \"/src/new-repo\"), CloneRepository.FromCodeCommit(repoExisting, \"/src/existing-repo\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n// create a new Cloud9 environment and clone the two repositories\nVpc vpc;\n\n\n// create a codecommit repository to clone into the cloud9 environment\nRepository repoNew = Repository.Builder.create(this, \"RepoNew\")\n        .repositoryName(\"new-repo\")\n        .build();\n\n// import an existing codecommit repository to clone into the cloud9 environment\nIRepository repoExisting = Repository.fromRepositoryName(this, \"RepoExisting\", \"existing-repo\");\nEc2Environment.Builder.create(this, \"C9Env\")\n        .vpc(vpc)\n        .clonedRepositories(List.of(CloneRepository.fromCodeCommit(repoNew, \"/src/new-repo\"), CloneRepository.fromCodeCommit(repoExisting, \"/src/existing-repo\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codecommit \"github.com/aws-samples/dummy/awscdkawscodecommit\"\n\n// create a new Cloud9 environment and clone the two repositories\nvar vpc vpc\n\n\n// create a codecommit repository to clone into the cloud9 environment\nrepoNew := codecommit.NewRepository(this, jsii.String(\"RepoNew\"), &repositoryProps{\n\trepositoryName: jsii.String(\"new-repo\"),\n})\n\n// import an existing codecommit repository to clone into the cloud9 environment\nrepoExisting := codecommit.repository.fromRepositoryName(this, jsii.String(\"RepoExisting\"), jsii.String(\"existing-repo\"))\ncloud9.NewEc2Environment(this, jsii.String(\"C9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tclonedRepositories: []cloneRepository{\n\t\tcloud9.*cloneRepository.fromCodeCommit(repoNew, jsii.String(\"/src/new-repo\")),\n\t\tcloud9.*cloneRepository.fromCodeCommit(repoExisting, jsii.String(\"/src/existing-repo\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\n\n// create a codecommit repository to clone into the cloud9 environment\nconst repoNew = new codecommit.Repository(this, 'RepoNew', {\n  repositoryName: 'new-repo',\n});\n\n// import an existing codecommit repository to clone into the cloud9 environment\nconst repoExisting = codecommit.Repository.fromRepositoryName(this, 'RepoExisting', 'existing-repo');\n\n// create a new Cloud9 environment and clone the two repositories\ndeclare const vpc: ec2.Vpc;\nnew cloud9.Ec2Environment(this, 'C9Env', {\n  vpc,\n  clonedRepositories: [\n    cloud9.CloneRepository.fromCodeCommit(repoNew, '/src/new-repo'),\n    cloud9.CloneRepository.fromCodeCommit(repoExisting, '/src/existing-repo'),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloud9.CloneRepository"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.CloneRepository",
        "@aws-cdk/aws-cloud9.CloneRepository#fromCodeCommit",
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.Repository#fromRepositoryName",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-ec2.IVpc",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\n// create a new Cloud9 environment and clone the two repositories\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a codecommit repository to clone into the cloud9 environment\nconst repoNew = new codecommit.Repository(this, 'RepoNew', {\n  repositoryName: 'new-repo',\n});\n\n// import an existing codecommit repository to clone into the cloud9 environment\nconst repoExisting = codecommit.Repository.fromRepositoryName(this, 'RepoExisting', 'existing-repo');\nnew cloud9.Ec2Environment(this, 'C9Env', {\n  vpc,\n  clonedRepositories: [\n    cloud9.CloneRepository.fromCodeCommit(repoNew, '/src/new-repo'),\n    cloud9.CloneRepository.fromCodeCommit(repoExisting, '/src/existing-repo'),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 24,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dfa9dbd702b8b4d67df500b8ea71f5d3e5d97a1aaa39d274b84d218b81a324df"
    },
    "96d621d3a8c4e6aef21a93ea14e29ffc22bbca1646ee548333d315994860aeae": {
      "translations": {
        "python": {
          "source": "# create a cloud9 ec2 environment in a new VPC\nvpc = ec2.Vpc(self, \"VPC\", max_azs=3)\ncloud9.Ec2Environment(self, \"Cloud9Env\", vpc=vpc)\n\n# or create the cloud9 environment in the default VPC with specific instanceType\ndefault_vpc = ec2.Vpc.from_lookup(self, \"DefaultVPC\", is_default=True)\ncloud9.Ec2Environment(self, \"Cloud9Env2\",\n    vpc=default_vpc,\n    instance_type=ec2.InstanceType(\"t3.large\")\n)\n\n# or specify in a different subnetSelection\nc9env = cloud9.Ec2Environment(self, \"Cloud9Env3\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    )\n)\n\n# print the Cloud9 IDE URL in the output\nCfnOutput(self, \"URL\", value=c9env.ide_url)",
          "version": "2"
        },
        "csharp": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = new Vpc(this, \"VPC\", new VpcProps { MaxAzs = 3 });\nnew Ec2Environment(this, \"Cloud9Env\", new Ec2EnvironmentProps { Vpc = vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.FromLookup(this, \"DefaultVPC\", new VpcLookupOptions { IsDefault = true });\nnew Ec2Environment(this, \"Cloud9Env2\", new Ec2EnvironmentProps {\n    Vpc = defaultVpc,\n    InstanceType = new InstanceType(\"t3.large\")\n});\n\n// or specify in a different subnetSelection\nEc2Environment c9env = new Ec2Environment(this, \"Cloud9Env3\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }\n});\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, \"URL\", new CfnOutputProps { Value = c9env.IdeUrl });",
          "version": "1"
        },
        "java": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = Vpc.Builder.create(this, \"VPC\").maxAzs(3).build();\nEc2Environment.Builder.create(this, \"Cloud9Env\").vpc(vpc).build();\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.fromLookup(this, \"DefaultVPC\", VpcLookupOptions.builder().isDefault(true).build());\nEc2Environment.Builder.create(this, \"Cloud9Env2\")\n        .vpc(defaultVpc)\n        .instanceType(new InstanceType(\"t3.large\"))\n        .build();\n\n// or specify in a different subnetSelection\nEc2Environment c9env = Ec2Environment.Builder.create(this, \"Cloud9Env3\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build())\n        .build();\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nCfnOutput.Builder.create(this, \"URL\").value(c9env.getIdeUrl()).build();",
          "version": "1"
        },
        "go": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tmaxAzs: jsii.Number(3),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n})\n\n// or create the cloud9 environment in the default VPC with specific instanceType\ndefaultVpc := ec2.vpc.fromLookup(this, jsii.String(\"DefaultVPC\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env2\"), &ec2EnvironmentProps{\n\tvpc: defaultVpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n})\n\n// or specify in a different subnetSelection\nc9env := cloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env3\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tsubnetSelection: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE_WITH_NAT,\n\t},\n})\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nawscdkcore.NewCfnOutput(this, jsii.String(\"URL\"), &cfnOutputProps{\n\tvalue: c9env.ideUrl,\n})",
          "version": "1"
        },
        "$": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloud9.Ec2Environment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2Environment#ideUrl",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 32,
        "104": 6,
        "106": 1,
        "193": 7,
        "194": 10,
        "196": 1,
        "197": 6,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2
      },
      "fqnsFingerprint": "a73e82c5dd3fc3de4ba7b54f76df7d30d4a8339e73527506d1ad2c0ee1c1e5a4"
    },
    "4cd0b576969ebf0e0cb38ef5a5ee4ab2c3b6dedb3b8af28d4f712a2be1ac600a": {
      "translations": {
        "python": {
          "source": "# create a cloud9 ec2 environment in a new VPC\nvpc = ec2.Vpc(self, \"VPC\", max_azs=3)\ncloud9.Ec2Environment(self, \"Cloud9Env\", vpc=vpc)\n\n# or create the cloud9 environment in the default VPC with specific instanceType\ndefault_vpc = ec2.Vpc.from_lookup(self, \"DefaultVPC\", is_default=True)\ncloud9.Ec2Environment(self, \"Cloud9Env2\",\n    vpc=default_vpc,\n    instance_type=ec2.InstanceType(\"t3.large\")\n)\n\n# or specify in a different subnetSelection\nc9env = cloud9.Ec2Environment(self, \"Cloud9Env3\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    )\n)\n\n# print the Cloud9 IDE URL in the output\nCfnOutput(self, \"URL\", value=c9env.ide_url)",
          "version": "2"
        },
        "csharp": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = new Vpc(this, \"VPC\", new VpcProps { MaxAzs = 3 });\nnew Ec2Environment(this, \"Cloud9Env\", new Ec2EnvironmentProps { Vpc = vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.FromLookup(this, \"DefaultVPC\", new VpcLookupOptions { IsDefault = true });\nnew Ec2Environment(this, \"Cloud9Env2\", new Ec2EnvironmentProps {\n    Vpc = defaultVpc,\n    InstanceType = new InstanceType(\"t3.large\")\n});\n\n// or specify in a different subnetSelection\nEc2Environment c9env = new Ec2Environment(this, \"Cloud9Env3\", new Ec2EnvironmentProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection {\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }\n});\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, \"URL\", new CfnOutputProps { Value = c9env.IdeUrl });",
          "version": "1"
        },
        "java": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nVpc vpc = Vpc.Builder.create(this, \"VPC\").maxAzs(3).build();\nEc2Environment.Builder.create(this, \"Cloud9Env\").vpc(vpc).build();\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nIVpc defaultVpc = Vpc.fromLookup(this, \"DefaultVPC\", VpcLookupOptions.builder().isDefault(true).build());\nEc2Environment.Builder.create(this, \"Cloud9Env2\")\n        .vpc(defaultVpc)\n        .instanceType(new InstanceType(\"t3.large\"))\n        .build();\n\n// or specify in a different subnetSelection\nEc2Environment c9env = Ec2Environment.Builder.create(this, \"Cloud9Env3\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder()\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build())\n        .build();\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nCfnOutput.Builder.create(this, \"URL\").value(c9env.getIdeUrl()).build();",
          "version": "1"
        },
        "go": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"), &vpcProps{\n\tmaxAzs: jsii.Number(3),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n})\n\n// or create the cloud9 environment in the default VPC with specific instanceType\ndefaultVpc := ec2.vpc.fromLookup(this, jsii.String(\"DefaultVPC\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\ncloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env2\"), &ec2EnvironmentProps{\n\tvpc: defaultVpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t3.large\")),\n})\n\n// or specify in a different subnetSelection\nc9env := cloud9.NewEc2Environment(this, jsii.String(\"Cloud9Env3\"), &ec2EnvironmentProps{\n\tvpc: vpc,\n\tsubnetSelection: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PRIVATE_WITH_NAT,\n\t},\n})\n\n// print the Cloud9 IDE URL in the output\n// print the Cloud9 IDE URL in the output\nawscdkcore.NewCfnOutput(this, jsii.String(\"URL\"), &cfnOutputProps{\n\tvalue: c9env.ideUrl,\n})",
          "version": "1"
        },
        "$": {
          "source": "// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloud9.Ec2EnvironmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloud9.Ec2Environment",
        "@aws-cdk/aws-cloud9.Ec2Environment#ideUrl",
        "@aws-cdk/aws-cloud9.Ec2EnvironmentProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloud9 from '@aws-cdk/aws-cloud9';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// create a cloud9 ec2 environment in a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 3});\nnew cloud9.Ec2Environment(this, 'Cloud9Env', { vpc });\n\n// or create the cloud9 environment in the default VPC with specific instanceType\nconst defaultVpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', { isDefault: true });\nnew cloud9.Ec2Environment(this, 'Cloud9Env2', {\n  vpc: defaultVpc,\n  instanceType: new ec2.InstanceType('t3.large'),\n});\n\n// or specify in a different subnetSelection\nconst c9env = new cloud9.Ec2Environment(this, 'Cloud9Env3', {\n  vpc,\n  subnetSelection: {\n    subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n  },\n});\n\n// print the Cloud9 IDE URL in the output\nnew CfnOutput(this, 'URL', { value: c9env.ideUrl });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 32,
        "104": 6,
        "106": 1,
        "193": 7,
        "194": 10,
        "196": 1,
        "197": 6,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2
      },
      "fqnsFingerprint": "a73e82c5dd3fc3de4ba7b54f76df7d30d4a8339e73527506d1ad2c0ee1c1e5a4"
    }
  }
}