{
  "version": "2",
  "toolVersion": "1.63.2",
  "snippets": {
    "919bfcd405f28f1c7a46b32fb8f5a1b904d128250f7ae0691dd9c7f339be9ed9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 20
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf6d739ead405dc527e408307bfd355f4885918bb62859635dc3fdedce31f825"
    },
    "1cab630e38022e79ddc7ca9a7f87fd8a2f7aa306362330cdfd59cf6473d58c02": {
      "translations": {
        "python": {
          "source": "# cluster: docdb.DatabaseCluster\n\ncluster.connections.allow_default_port_from_any_ipv4(\"Open to the world\")",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\ncluster.Connections.AllowDefaultPortFromAnyIpv4(\"Open to the world\");",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\ncluster.connections.allowDefaultPortFromAnyIpv4(\"Open to the world\");",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\n\ncluster.connections.allowDefaultPortFromAnyIpv4(jsii.String(\"Open to the world\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: docdb.DatabaseCluster;\ncluster.connections.allowDefaultPortFromAnyIpv4('Open to the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 45
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#connections",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.connections.allowDefaultPortFromAnyIpv4('Open to the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "573f63385838e452e3889af142ca3aee7d2b562d0df67406075f79268a3b576d"
    },
    "8b1506200c58a083f1079610ed09ed523fc5ebfbed4f9bb1a6056c38bdb8da13": {
      "translations": {
        "python": {
          "source": "# cluster: docdb.DatabaseCluster\n\nwrite_address = cluster.cluster_endpoint.socket_address",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\nstring writeAddress = cluster.ClusterEndpoint.SocketAddress;",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\nString writeAddress = cluster.getClusterEndpoint().getSocketAddress();",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\n\nwriteAddress := cluster.clusterEndpoint.socketAddress",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: docdb.DatabaseCluster;\nconst writeAddress = cluster.clusterEndpoint.socketAddress;   // \"HOSTNAME:PORT\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 53
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#clusterEndpoint",
        "@aws-cdk/aws-docdb.Endpoint#socketAddress"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst writeAddress = cluster.clusterEndpoint.socketAddress;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "18a8d70bf9203ed20c2c8dcc7837f75dc6bbe16bc3b2152c8e68fe81a2208000"
    },
    "28d3804c0a54f720719e07e629264876e01ed73b9a636884e7b7b4ec61aa04a7": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# cluster: docdb.DatabaseCluster\n\n\nsecurity_group = ec2.SecurityGroup(self, \"SecurityGroup\",\n    vpc=vpc\n)\ncluster.add_security_groups(security_group)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nDatabaseCluster cluster;\n\n\nSecurityGroup securityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps {\n    Vpc = vpc\n});\ncluster.AddSecurityGroups(securityGroup);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nDatabaseCluster cluster;\n\n\nSecurityGroup securityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\")\n        .vpc(vpc)\n        .build();\ncluster.addSecurityGroups(securityGroup);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar cluster databaseCluster\n\n\nsecurityGroup := ec2.NewSecurityGroup(this, jsii.String(\"SecurityGroup\"), &securityGroupProps{\n\tvpc: vpc,\n})\ncluster.addSecurityGroups(securityGroup)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const cluster: docdb.DatabaseCluster;\n\nconst securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n});\ncluster.addSecurityGroups(securityGroup);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 61
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addSecurityGroups",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n});\ncluster.addSecurityGroups(securityGroup);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "91ac901e55dfa1d639f3b7ec69031487724f141042dbc7e20e06db94882340b3"
    },
    "3e65571391450d41cd225bb7f298258fd2df09beb5a2a599ac611b6f0551a699": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc,\n    deletion_protection=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc,\n    DeletionProtection = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .deletionProtection(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n\tdeletionProtection: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser',\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n  deletionProtection: true, // Enable deletion protection.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 75
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser',\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n  deletionProtection: true, // Enable deletion protection.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf6d739ead405dc527e408307bfd355f4885918bb62859635dc3fdedce31f825"
    },
    "8caae3f671f4fce66e3330e1c6950a3973d851f125c8dbe29b254a40249c9516": {
      "translations": {
        "python": {
          "source": "# cluster: docdb.DatabaseCluster\n\ncluster.add_rotation_single_user()",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\ncluster.AddRotationSingleUser();",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\ncluster.addRotationSingleUser();",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\n\ncluster.addRotationSingleUser()",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: docdb.DatabaseCluster;\ncluster.addRotationSingleUser(); // Will rotate automatically after 30 days",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 94
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationSingleUser"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\ncluster.addRotationSingleUser();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "75": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "d72bef6298c1de2a32a8a4b3a0ad076c98d7041b6f5f79d034d62955e5d01fe9"
    },
    "2bf3d269f78c858ed09f232d89c3e49682d62492fe7c7e4f9c84c68a2e90a863": {
      "translations": {
        "python": {
          "source": "cluster = docdb.DatabaseCluster(stack, \"Database\",\n    master_user=docdb.Login(\n        username=\"docdb\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc=vpc,\n    removal_policy=cdk.RemovalPolicy.DESTROY\n)\n\ncluster.add_rotation_single_user()",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster = new DatabaseCluster(stack, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"docdb\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    Vpc = vpc,\n    RemovalPolicy = RemovalPolicy.DESTROY\n});\n\ncluster.AddRotationSingleUser();",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster = DatabaseCluster.Builder.create(stack, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"docdb\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpc(vpc)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .build();\n\ncluster.addRotationSingleUser();",
          "version": "1"
        },
        "go": {
          "source": "cluster := docdb.NewDatabaseCluster(stack, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"docdb\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpc: vpc,\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n})\n\ncluster.addRotationSingleUser()",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new docdb.DatabaseCluster(stack, 'Database', {\n  masterUser: {\n    username: 'docdb',\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpc,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n});\n\ncluster.addRotationSingleUser();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationSingleUser",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\nimport * as docdb from '../lib';\n\n/*\n * Stack verification steps:\n * * aws secretsmanager describe-secret --secret-id <deployed secret arn>\n * * aws lambda get-function --function-name <lambda arn from \"RotationLambdaARN\" in previous output\n *   * verify the lambda has the tag \"serverlessrepo:applicationId\" with the value\n *     \"arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerMongoDBRotationSingleUser\"\n */\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-docdb-cluster-rotation');\n\nconst vpc = new ec2.Vpc(stack, 'VPC');\n\n/// !show\nconst cluster = new docdb.DatabaseCluster(stack, 'Database', {\n  masterUser: {\n    username: 'docdb',\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpc,\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n});\n\ncluster.addRotationSingleUser();\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "193": 2,
        "194": 10,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "2e9c88c0e1cde6e494ffe3f0a65c1a340ceba49495419b51bfdbc272d9e5b6dc"
    },
    "8e42ac63b46bbcdc41f3af8b7c175532e91cf3e6023339c5fcd2ac94a01cffc3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_secretsmanager as secretsmanager\n\n# my_imported_secret: secretsmanager.Secret\n# cluster: docdb.DatabaseCluster\n\n\ncluster.add_rotation_multi_user(\"MyUser\",\n    secret=my_imported_secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SecretsManager;\n\nSecret myImportedSecret;\nDatabaseCluster cluster;\n\n\ncluster.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {\n    Secret = myImportedSecret\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.secretsmanager.*;\n\nSecret myImportedSecret;\nDatabaseCluster cluster;\n\n\ncluster.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder()\n        .secret(myImportedSecret)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\n\nvar myImportedSecret secret\nvar cluster databaseCluster\n\n\ncluster.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\tsecret: myImportedSecret,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const myImportedSecret: secretsmanager.Secret;\ndeclare const cluster: docdb.DatabaseCluster;\n\ncluster.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 114
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationMultiUser",
        "@aws-cdk/aws-docdb.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const myImportedSecret: secretsmanager.Secret;\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f7961521ff611234873228849e847d928a9830ed3110612868a08e5dc5f8ab62"
    },
    "ed5498ffb9845ea6b3403be3ee7089134d67a89849fb277c25ddcce0efa7f346": {
      "translations": {
        "python": {
          "source": "# cluster: docdb.DatabaseCluster\n\nmy_user_secret = docdb.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    master_secret=cluster.secret\n)\nmy_user_secret_attached = my_user_secret.attach(cluster) # Adds DB connections information in the secret\n\ncluster.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    MasterSecret = cluster.Secret\n});\nISecret myUserSecretAttached = myUserSecret.Attach(cluster); // Adds DB connections information in the secret\n\ncluster.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .masterSecret(cluster.getSecret())\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\n\nmyUserSecret := docdb.NewDatabaseSecret(this, jsii.String(\"MyUserSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"myuser\"),\n\tmasterSecret: cluster.secret,\n})\nmyUserSecretAttached := myUserSecret.attach(cluster) // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\t // Add rotation using the multi user scheme\n\tsecret: myUserSecretAttached,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: docdb.DatabaseCluster;\nconst myUserSecret = new docdb.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  masterSecret: cluster.secret,\n});\nconst myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 127
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationMultiUser",
        "@aws-cdk/aws-docdb.DatabaseCluster#secret",
        "@aws-cdk/aws-docdb.DatabaseSecret",
        "@aws-cdk/aws-docdb.DatabaseSecretProps",
        "@aws-cdk/aws-docdb.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new docdb.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  masterSecret: cluster.secret,\n});\nconst myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bf271939b074b12c43e741ff31c67e431c9d9729e7829cb0b407695eff922dd2"
    },
    "75779418be3600e0e5ed6143abf29405690324789737e1e9737bf8c347ee5117": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_logs as logs\n\n# my_logs_publishing_role: iam.Role\n# vpc: ec2.Vpc\n\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc,\n    export_profiler_logs_to_cloud_watch=True,  # Enable sending profiler logs\n    export_audit_logs_to_cloud_watch=True,  # Enable sending audit logs\n    cloud_watch_logs_retention=logs.RetentionDays.THREE_MONTHS,  # Optional - default is to never expire logs\n    cloud_watch_logs_retention_role=my_logs_publishing_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.Logs;\n\nRole myLogsPublishingRole;\nVpc vpc;\n\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc,\n    ExportProfilerLogsToCloudWatch = true,  // Enable sending profiler logs\n    ExportAuditLogsToCloudWatch = true,  // Enable sending audit logs\n    CloudWatchLogsRetention = RetentionDays.THREE_MONTHS,  // Optional - default is to never expire logs\n    CloudWatchLogsRetentionRole = myLogsPublishingRole\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.logs.*;\n\nRole myLogsPublishingRole;\nVpc vpc;\n\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .exportProfilerLogsToCloudWatch(true) // Enable sending profiler logs\n        .exportAuditLogsToCloudWatch(true) // Enable sending audit logs\n        .cloudWatchLogsRetention(RetentionDays.THREE_MONTHS) // Optional - default is to never expire logs\n        .cloudWatchLogsRetentionRole(myLogsPublishingRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\nvar myLogsPublishingRole role\nvar vpc vpc\n\n\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n\texportProfilerLogsToCloudWatch: jsii.Boolean(true),\n\t // Enable sending profiler logs\n\texportAuditLogsToCloudWatch: jsii.Boolean(true),\n\t // Enable sending audit logs\n\tcloudWatchLogsRetention: logs.retentionDays_THREE_MONTHS,\n\t // Optional - default is to never expire logs\n\tcloudWatchLogsRetentionRole: myLogsPublishingRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as logs from'@aws-cdk/aws-logs';\n\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser',\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n  exportProfilerLogsToCloudWatch: true, // Enable sending profiler logs\n  exportAuditLogsToCloudWatch: true, // Enable sending audit logs\n  cloudWatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudWatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-docdb"
        },
        "field": {
          "field": "markdown",
          "line": 153
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#THREE_MONTHS",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as logs from'@aws-cdk/aws-logs';\n\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser',\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n  exportProfilerLogsToCloudWatch: true, // Enable sending profiler logs\n  exportAuditLogsToCloudWatch: true, // Enable sending audit logs\n  cloudWatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudWatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 37,
        "104": 1,
        "106": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 11,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cac98fd8c41abd591bbb31b4a22fd7cd2208654a5ebe92ed87c444171e868ae6"
    },
    "c72a18eee23362cbd42f70bfbfa737a3e96935e694da680d4869b035a14de421": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\nimport aws_cdk.core as cdk\n\nbackup_props = docdb.BackupProps(\n    retention=cdk.Duration.minutes(30),\n\n    # the properties below are optional\n    preferred_window=\"preferredWindow\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\nusing Amazon.CDK;\nBackupProps backupProps = new BackupProps {\n    Retention = Duration.Minutes(30),\n\n    // the properties below are optional\n    PreferredWindow = \"preferredWindow\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\nimport software.amazon.awscdk.core.*;\n\nBackupProps backupProps = BackupProps.builder()\n        .retention(Duration.minutes(30))\n\n        // the properties below are optional\n        .preferredWindow(\"preferredWindow\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nbackupProps := &backupProps{\n\tretention: cdk.duration.minutes(jsii.Number(30)),\n\n\t// the properties below are optional\n\tpreferredWindow: jsii.String(\"preferredWindow\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as cdk from '@aws-cdk/core';\nconst backupProps: docdb.BackupProps = {\n  retention: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  preferredWindow: 'preferredWindow',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.BackupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.BackupProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst backupProps: docdb.BackupProps = {\n  retention: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  preferredWindow: 'preferredWindow',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a31ddef90fedb38e9623ffe33c0ae346d04bbcea773399b4aad91ac0d7541c7a"
    },
    "526a4484d12f21c83423cb3d2a9e3fd4a96be03bfdee2719ed349fc49fd3d441": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncfn_dBCluster = docdb.CfnDBCluster(self, \"MyCfnDBCluster\",\n    availability_zones=[\"availabilityZones\"],\n    backup_retention_period=123,\n    copy_tags_to_snapshot=False,\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_cluster_parameter_group_name=\"dbClusterParameterGroupName\",\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    deletion_protection=False,\n    enable_cloudwatch_logs_exports=[\"enableCloudwatchLogsExports\"],\n    engine_version=\"engineVersion\",\n    kms_key_id=\"kmsKeyId\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    port=123,\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    restore_to_time=\"restoreToTime\",\n    restore_type=\"restoreType\",\n    snapshot_identifier=\"snapshotIdentifier\",\n    source_db_cluster_identifier=\"sourceDbClusterIdentifier\",\n    storage_encrypted=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    use_latest_restorable_time=False,\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nCfnDBCluster cfnDBCluster = new CfnDBCluster(this, \"MyCfnDBCluster\", new CfnDBClusterProps {\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    BackupRetentionPeriod = 123,\n    CopyTagsToSnapshot = false,\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbClusterParameterGroupName = \"dbClusterParameterGroupName\",\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    DeletionProtection = false,\n    EnableCloudwatchLogsExports = new [] { \"enableCloudwatchLogsExports\" },\n    EngineVersion = \"engineVersion\",\n    KmsKeyId = \"kmsKeyId\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    Port = 123,\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    RestoreToTime = \"restoreToTime\",\n    RestoreType = \"restoreType\",\n    SnapshotIdentifier = \"snapshotIdentifier\",\n    SourceDbClusterIdentifier = \"sourceDbClusterIdentifier\",\n    StorageEncrypted = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UseLatestRestorableTime = false,\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nCfnDBCluster cfnDBCluster = CfnDBCluster.Builder.create(this, \"MyCfnDBCluster\")\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .backupRetentionPeriod(123)\n        .copyTagsToSnapshot(false)\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbClusterParameterGroupName(\"dbClusterParameterGroupName\")\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .deletionProtection(false)\n        .enableCloudwatchLogsExports(List.of(\"enableCloudwatchLogsExports\"))\n        .engineVersion(\"engineVersion\")\n        .kmsKeyId(\"kmsKeyId\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .port(123)\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .restoreToTime(\"restoreToTime\")\n        .restoreType(\"restoreType\")\n        .snapshotIdentifier(\"snapshotIdentifier\")\n        .sourceDbClusterIdentifier(\"sourceDbClusterIdentifier\")\n        .storageEncrypted(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .useLatestRestorableTime(false)\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ncfnDBCluster := docdb.NewCfnDBCluster(this, jsii.String(\"MyCfnDBCluster\"), &cfnDBClusterProps{\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tbackupRetentionPeriod: jsii.Number(123),\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbClusterParameterGroupName: jsii.String(\"dbClusterParameterGroupName\"),\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\tdeletionProtection: jsii.Boolean(false),\n\tenableCloudwatchLogsExports: []*string{\n\t\tjsii.String(\"enableCloudwatchLogsExports\"),\n\t},\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tport: jsii.Number(123),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\trestoreToTime: jsii.String(\"restoreToTime\"),\n\trestoreType: jsii.String(\"restoreType\"),\n\tsnapshotIdentifier: jsii.String(\"snapshotIdentifier\"),\n\tsourceDbClusterIdentifier: jsii.String(\"sourceDbClusterIdentifier\"),\n\tstorageEncrypted: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuseLatestRestorableTime: jsii.Boolean(false),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst cfnDBCluster = new docdb.CfnDBCluster(this, 'MyCfnDBCluster', /* all optional props */ {\n  availabilityZones: ['availabilityZones'],\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  engineVersion: 'engineVersion',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  restoreToTime: 'restoreToTime',\n  restoreType: 'restoreType',\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBCluster",
        "@aws-cdk/aws-docdb.CfnDBClusterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBCluster = new docdb.CfnDBCluster(this, 'MyCfnDBCluster', /* all optional props */ {\n  availabilityZones: ['availabilityZones'],\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  engineVersion: 'engineVersion',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  restoreToTime: 'restoreToTime',\n  restoreType: 'restoreType',\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 20,
        "75": 29,
        "91": 4,
        "104": 1,
        "192": 4,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 25,
        "290": 1
      },
      "fqnsFingerprint": "da2f3438c5f05078909bc678c1cdec5552d3ad3301321db67a2d232aaf7632e7"
    },
    "87974f6e954d38e8f4e71cf961670c76ce14b0c6424d2a66f0cd21b4c9d69f6f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\n# parameters: Any\n\ncfn_dBCluster_parameter_group = docdb.CfnDBClusterParameterGroup(self, \"MyCfnDBClusterParameterGroup\",\n    description=\"description\",\n    family=\"family\",\n    parameters=parameters,\n\n    # the properties below are optional\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nvar parameters;\n\nCfnDBClusterParameterGroup cfnDBClusterParameterGroup = new CfnDBClusterParameterGroup(this, \"MyCfnDBClusterParameterGroup\", new CfnDBClusterParameterGroupProps {\n    Description = \"description\",\n    Family = \"family\",\n    Parameters = parameters,\n\n    // the properties below are optional\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nObject parameters;\n\nCfnDBClusterParameterGroup cfnDBClusterParameterGroup = CfnDBClusterParameterGroup.Builder.create(this, \"MyCfnDBClusterParameterGroup\")\n        .description(\"description\")\n        .family(\"family\")\n        .parameters(parameters)\n\n        // the properties below are optional\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\nvar parameters interface{}\n\ncfnDBClusterParameterGroup := docdb.NewCfnDBClusterParameterGroup(this, jsii.String(\"MyCfnDBClusterParameterGroup\"), &cfnDBClusterParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tfamily: jsii.String(\"family\"),\n\tparameters: parameters,\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n\ndeclare const parameters: any;\nconst cfnDBClusterParameterGroup = new docdb.CfnDBClusterParameterGroup(this, 'MyCfnDBClusterParameterGroup', {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBClusterParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBClusterParameterGroup",
        "@aws-cdk/aws-docdb.CfnDBClusterParameterGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBClusterParameterGroup = new docdb.CfnDBClusterParameterGroup(this, 'MyCfnDBClusterParameterGroup', {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 13,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "73818a81d6a48b547ef13eb030679c79768228ea9b377f3649ea7c1ae86770ba"
    },
    "7345a4ef81d9a4d1a614466e9a78233142b2658b137a6245f10cc4f4ef12852a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\n# parameters: Any\n\ncfn_dBCluster_parameter_group_props = docdb.CfnDBClusterParameterGroupProps(\n    description=\"description\",\n    family=\"family\",\n    parameters=parameters,\n\n    # the properties below are optional\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nvar parameters;\n\nCfnDBClusterParameterGroupProps cfnDBClusterParameterGroupProps = new CfnDBClusterParameterGroupProps {\n    Description = \"description\",\n    Family = \"family\",\n    Parameters = parameters,\n\n    // the properties below are optional\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nObject parameters;\n\nCfnDBClusterParameterGroupProps cfnDBClusterParameterGroupProps = CfnDBClusterParameterGroupProps.builder()\n        .description(\"description\")\n        .family(\"family\")\n        .parameters(parameters)\n\n        // the properties below are optional\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\nvar parameters interface{}\n\ncfnDBClusterParameterGroupProps := &cfnDBClusterParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tfamily: jsii.String(\"family\"),\n\tparameters: parameters,\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n\ndeclare const parameters: any;\nconst cfnDBClusterParameterGroupProps: docdb.CfnDBClusterParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBClusterParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBClusterParameterGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBClusterParameterGroupProps: docdb.CfnDBClusterParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "630689e363d66be96dcf6a9d292a9b7ef660121e6dd0deb28e0f67d3a4304d66"
    },
    "efdc09adb202b10f89a85d419ec740b7c5059d480532ab4328c0c11409557846": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncfn_dBCluster_props = docdb.CfnDBClusterProps(\n    availability_zones=[\"availabilityZones\"],\n    backup_retention_period=123,\n    copy_tags_to_snapshot=False,\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_cluster_parameter_group_name=\"dbClusterParameterGroupName\",\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    deletion_protection=False,\n    enable_cloudwatch_logs_exports=[\"enableCloudwatchLogsExports\"],\n    engine_version=\"engineVersion\",\n    kms_key_id=\"kmsKeyId\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    port=123,\n    preferred_backup_window=\"preferredBackupWindow\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    restore_to_time=\"restoreToTime\",\n    restore_type=\"restoreType\",\n    snapshot_identifier=\"snapshotIdentifier\",\n    source_db_cluster_identifier=\"sourceDbClusterIdentifier\",\n    storage_encrypted=False,\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    use_latest_restorable_time=False,\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nCfnDBClusterProps cfnDBClusterProps = new CfnDBClusterProps {\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    BackupRetentionPeriod = 123,\n    CopyTagsToSnapshot = false,\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbClusterParameterGroupName = \"dbClusterParameterGroupName\",\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    DeletionProtection = false,\n    EnableCloudwatchLogsExports = new [] { \"enableCloudwatchLogsExports\" },\n    EngineVersion = \"engineVersion\",\n    KmsKeyId = \"kmsKeyId\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    Port = 123,\n    PreferredBackupWindow = \"preferredBackupWindow\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    RestoreToTime = \"restoreToTime\",\n    RestoreType = \"restoreType\",\n    SnapshotIdentifier = \"snapshotIdentifier\",\n    SourceDbClusterIdentifier = \"sourceDbClusterIdentifier\",\n    StorageEncrypted = false,\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    UseLatestRestorableTime = false,\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nCfnDBClusterProps cfnDBClusterProps = CfnDBClusterProps.builder()\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .backupRetentionPeriod(123)\n        .copyTagsToSnapshot(false)\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbClusterParameterGroupName(\"dbClusterParameterGroupName\")\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .deletionProtection(false)\n        .enableCloudwatchLogsExports(List.of(\"enableCloudwatchLogsExports\"))\n        .engineVersion(\"engineVersion\")\n        .kmsKeyId(\"kmsKeyId\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .port(123)\n        .preferredBackupWindow(\"preferredBackupWindow\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .restoreToTime(\"restoreToTime\")\n        .restoreType(\"restoreType\")\n        .snapshotIdentifier(\"snapshotIdentifier\")\n        .sourceDbClusterIdentifier(\"sourceDbClusterIdentifier\")\n        .storageEncrypted(false)\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .useLatestRestorableTime(false)\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ncfnDBClusterProps := &cfnDBClusterProps{\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tbackupRetentionPeriod: jsii.Number(123),\n\tcopyTagsToSnapshot: jsii.Boolean(false),\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbClusterParameterGroupName: jsii.String(\"dbClusterParameterGroupName\"),\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\tdeletionProtection: jsii.Boolean(false),\n\tenableCloudwatchLogsExports: []*string{\n\t\tjsii.String(\"enableCloudwatchLogsExports\"),\n\t},\n\tengineVersion: jsii.String(\"engineVersion\"),\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tport: jsii.Number(123),\n\tpreferredBackupWindow: jsii.String(\"preferredBackupWindow\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\trestoreToTime: jsii.String(\"restoreToTime\"),\n\trestoreType: jsii.String(\"restoreType\"),\n\tsnapshotIdentifier: jsii.String(\"snapshotIdentifier\"),\n\tsourceDbClusterIdentifier: jsii.String(\"sourceDbClusterIdentifier\"),\n\tstorageEncrypted: jsii.Boolean(false),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuseLatestRestorableTime: jsii.Boolean(false),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst cfnDBClusterProps: docdb.CfnDBClusterProps = {\n  availabilityZones: ['availabilityZones'],\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  engineVersion: 'engineVersion',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  restoreToTime: 'restoreToTime',\n  restoreType: 'restoreType',\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBClusterProps: docdb.CfnDBClusterProps = {\n  availabilityZones: ['availabilityZones'],\n  backupRetentionPeriod: 123,\n  copyTagsToSnapshot: false,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  engineVersion: 'engineVersion',\n  kmsKeyId: 'kmsKeyId',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  restoreToTime: 'restoreToTime',\n  restoreType: 'restoreType',\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 19,
        "75": 29,
        "91": 4,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 25,
        "290": 1
      },
      "fqnsFingerprint": "9d21904a5c1fee8f79619b60a7395f16cdff92f27053e1a90415303d3940ff3b"
    },
    "21c117121056a64cc7ff6b3d4ad594000f604587e56409835a6dafaccff5799e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncfn_dBInstance = docdb.CfnDBInstance(self, \"MyCfnDBInstance\",\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_instance_class=\"dbInstanceClass\",\n\n    # the properties below are optional\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    db_instance_identifier=\"dbInstanceIdentifier\",\n    enable_performance_insights=False,\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nCfnDBInstance cfnDBInstance = new CfnDBInstance(this, \"MyCfnDBInstance\", new CfnDBInstanceProps {\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbInstanceClass = \"dbInstanceClass\",\n\n    // the properties below are optional\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    DbInstanceIdentifier = \"dbInstanceIdentifier\",\n    EnablePerformanceInsights = false,\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nCfnDBInstance cfnDBInstance = CfnDBInstance.Builder.create(this, \"MyCfnDBInstance\")\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbInstanceClass(\"dbInstanceClass\")\n\n        // the properties below are optional\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .dbInstanceIdentifier(\"dbInstanceIdentifier\")\n        .enablePerformanceInsights(false)\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ncfnDBInstance := docdb.NewCfnDBInstance(this, jsii.String(\"MyCfnDBInstance\"), &cfnDBInstanceProps{\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbInstanceClass: jsii.String(\"dbInstanceClass\"),\n\n\t// the properties below are optional\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tdbInstanceIdentifier: jsii.String(\"dbInstanceIdentifier\"),\n\tenablePerformanceInsights: jsii.Boolean(false),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst cfnDBInstance = new docdb.CfnDBInstance(this, 'MyCfnDBInstance', {\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  enablePerformanceInsights: false,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBInstance",
        "@aws-cdk/aws-docdb.CfnDBInstanceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBInstance = new docdb.CfnDBInstance(this, 'MyCfnDBInstance', {\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  enablePerformanceInsights: false,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 14,
        "91": 2,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "d6657d867c422d6be31acaa1f93811f3466b287aeacde6cc8716e5753477883a"
    },
    "f49c01f69850cbe7d98c4376741b8b16704be9e3ffd90edc4bfa42eb63b4aaee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncfn_dBInstance_props = docdb.CfnDBInstanceProps(\n    db_cluster_identifier=\"dbClusterIdentifier\",\n    db_instance_class=\"dbInstanceClass\",\n\n    # the properties below are optional\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    db_instance_identifier=\"dbInstanceIdentifier\",\n    enable_performance_insights=False,\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nCfnDBInstanceProps cfnDBInstanceProps = new CfnDBInstanceProps {\n    DbClusterIdentifier = \"dbClusterIdentifier\",\n    DbInstanceClass = \"dbInstanceClass\",\n\n    // the properties below are optional\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    DbInstanceIdentifier = \"dbInstanceIdentifier\",\n    EnablePerformanceInsights = false,\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nCfnDBInstanceProps cfnDBInstanceProps = CfnDBInstanceProps.builder()\n        .dbClusterIdentifier(\"dbClusterIdentifier\")\n        .dbInstanceClass(\"dbInstanceClass\")\n\n        // the properties below are optional\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .dbInstanceIdentifier(\"dbInstanceIdentifier\")\n        .enablePerformanceInsights(false)\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ncfnDBInstanceProps := &cfnDBInstanceProps{\n\tdbClusterIdentifier: jsii.String(\"dbClusterIdentifier\"),\n\tdbInstanceClass: jsii.String(\"dbInstanceClass\"),\n\n\t// the properties below are optional\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tdbInstanceIdentifier: jsii.String(\"dbInstanceIdentifier\"),\n\tenablePerformanceInsights: jsii.Boolean(false),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst cfnDBInstanceProps: docdb.CfnDBInstanceProps = {\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  enablePerformanceInsights: false,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBInstanceProps: docdb.CfnDBInstanceProps = {\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  enablePerformanceInsights: false,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "156e97a6de84374bef99c10618400fa549541978f30c16fe27a81c1b9bf1d615"
    },
    "61ffcfb5e5ffa08155a257f28fba7b8775aac0f2b2c7613a79d6e3a7080f9766": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncfn_dBSubnet_group = docdb.CfnDBSubnetGroup(self, \"MyCfnDBSubnetGroup\",\n    db_subnet_group_description=\"dbSubnetGroupDescription\",\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nCfnDBSubnetGroup cfnDBSubnetGroup = new CfnDBSubnetGroup(this, \"MyCfnDBSubnetGroup\", new CfnDBSubnetGroupProps {\n    DbSubnetGroupDescription = \"dbSubnetGroupDescription\",\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nCfnDBSubnetGroup cfnDBSubnetGroup = CfnDBSubnetGroup.Builder.create(this, \"MyCfnDBSubnetGroup\")\n        .dbSubnetGroupDescription(\"dbSubnetGroupDescription\")\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ncfnDBSubnetGroup := docdb.NewCfnDBSubnetGroup(this, jsii.String(\"MyCfnDBSubnetGroup\"), &cfnDBSubnetGroupProps{\n\tdbSubnetGroupDescription: jsii.String(\"dbSubnetGroupDescription\"),\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst cfnDBSubnetGroup = new docdb.CfnDBSubnetGroup(this, 'MyCfnDBSubnetGroup', {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBSubnetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBSubnetGroup",
        "@aws-cdk/aws-docdb.CfnDBSubnetGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSubnetGroup = new docdb.CfnDBSubnetGroup(this, 'MyCfnDBSubnetGroup', {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "b4cab4ac7517ac43c94e60cca225f7656a38cca0915f29c59a44656e3ea47a2e"
    },
    "fcb4b58f06a80c34f2333cb3f6f6a7a4de7f3334e88597fa22bf2864eea9f5e5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncfn_dBSubnet_group_props = docdb.CfnDBSubnetGroupProps(\n    db_subnet_group_description=\"dbSubnetGroupDescription\",\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    db_subnet_group_name=\"dbSubnetGroupName\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nCfnDBSubnetGroupProps cfnDBSubnetGroupProps = new CfnDBSubnetGroupProps {\n    DbSubnetGroupDescription = \"dbSubnetGroupDescription\",\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    DbSubnetGroupName = \"dbSubnetGroupName\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nCfnDBSubnetGroupProps cfnDBSubnetGroupProps = CfnDBSubnetGroupProps.builder()\n        .dbSubnetGroupDescription(\"dbSubnetGroupDescription\")\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .dbSubnetGroupName(\"dbSubnetGroupName\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ncfnDBSubnetGroupProps := &cfnDBSubnetGroupProps{\n\tdbSubnetGroupDescription: jsii.String(\"dbSubnetGroupDescription\"),\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\tdbSubnetGroupName: jsii.String(\"dbSubnetGroupName\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst cfnDBSubnetGroupProps: docdb.CfnDBSubnetGroupProps = {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.CfnDBSubnetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.CfnDBSubnetGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDBSubnetGroupProps: docdb.CfnDBSubnetGroupProps = {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "afe592295d45cc36a6a85204eb811c50395163fb525309f51e73507a6defb84b"
    },
    "ad74fca27902023f1d5ec0ca6221c291fd9fda4776fbf269a65e62bffd38677d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncluster_parameter_group = docdb.ClusterParameterGroup(self, \"MyClusterParameterGroup\",\n    family=\"family\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n\n    # the properties below are optional\n    db_cluster_parameter_group_name=\"dbClusterParameterGroupName\",\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nClusterParameterGroup clusterParameterGroup = new ClusterParameterGroup(this, \"MyClusterParameterGroup\", new ClusterParameterGroupProps {\n    Family = \"family\",\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n\n    // the properties below are optional\n    DbClusterParameterGroupName = \"dbClusterParameterGroupName\",\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nClusterParameterGroup clusterParameterGroup = ClusterParameterGroup.Builder.create(this, \"MyClusterParameterGroup\")\n        .family(\"family\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n\n        // the properties below are optional\n        .dbClusterParameterGroupName(\"dbClusterParameterGroupName\")\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\nclusterParameterGroup := docdb.NewClusterParameterGroup(this, jsii.String(\"MyClusterParameterGroup\"), &clusterParameterGroupProps{\n\tfamily: jsii.String(\"family\"),\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\n\t// the properties below are optional\n\tdbClusterParameterGroupName: jsii.String(\"dbClusterParameterGroupName\"),\n\tdescription: jsii.String(\"description\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst clusterParameterGroup = new docdb.ClusterParameterGroup(this, 'MyClusterParameterGroup', {\n  family: 'family',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.ClusterParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.ClusterParameterGroup",
        "@aws-cdk/aws-docdb.ClusterParameterGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterParameterGroup = new docdb.ClusterParameterGroup(this, 'MyClusterParameterGroup', {\n  family: 'family',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0a9d4e0335e40f580f6b248aa8811bc07dd8b31e2532041179390623dfe7f85a"
    },
    "5e1db7736f32cbf8b52e6fa571a280687c0629720f62584a7b5dfc3a62392ab4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ncluster_parameter_group_props = docdb.ClusterParameterGroupProps(\n    family=\"family\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n\n    # the properties below are optional\n    db_cluster_parameter_group_name=\"dbClusterParameterGroupName\",\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nClusterParameterGroupProps clusterParameterGroupProps = new ClusterParameterGroupProps {\n    Family = \"family\",\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n\n    // the properties below are optional\n    DbClusterParameterGroupName = \"dbClusterParameterGroupName\",\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nClusterParameterGroupProps clusterParameterGroupProps = ClusterParameterGroupProps.builder()\n        .family(\"family\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n\n        // the properties below are optional\n        .dbClusterParameterGroupName(\"dbClusterParameterGroupName\")\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\nclusterParameterGroupProps := &clusterParameterGroupProps{\n\tfamily: jsii.String(\"family\"),\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\n\t// the properties below are optional\n\tdbClusterParameterGroupName: jsii.String(\"dbClusterParameterGroupName\"),\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst clusterParameterGroupProps: docdb.ClusterParameterGroupProps = {\n  family: 'family',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.ClusterParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.ClusterParameterGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterParameterGroupProps: docdb.ClusterParameterGroupProps = {\n  family: 'family',\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c2fcb9fd6443f89e8e03e62648d0ebd85bef8cbc9812d0dba450714cf38887d1"
    },
    "5f26ae07dc5928565846ae9a582ccfefe579ad68b1af06979c071f24031365db": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf6d739ead405dc527e408307bfd355f4885918bb62859635dc3fdedce31f825"
    },
    "0a54ceb2f0cc84758c4c2a61f7d880b78b667069ca77c9b5550d7df8e7a7c027": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\nimport aws_cdk.aws_ec2 as ec2\n\n# security_group: ec2.SecurityGroup\n\ndatabase_cluster_attributes = docdb.DatabaseClusterAttributes(\n    cluster_identifier=\"clusterIdentifier\",\n\n    # the properties below are optional\n    cluster_endpoint_address=\"clusterEndpointAddress\",\n    instance_endpoint_addresses=[\"instanceEndpointAddresses\"],\n    instance_identifiers=[\"instanceIdentifiers\"],\n    port=123,\n    reader_endpoint_address=\"readerEndpointAddress\",\n    security_group=security_group\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\nusing Amazon.CDK.AWS.EC2;\n\nSecurityGroup securityGroup;\n\nDatabaseClusterAttributes databaseClusterAttributes = new DatabaseClusterAttributes {\n    ClusterIdentifier = \"clusterIdentifier\",\n\n    // the properties below are optional\n    ClusterEndpointAddress = \"clusterEndpointAddress\",\n    InstanceEndpointAddresses = new [] { \"instanceEndpointAddresses\" },\n    InstanceIdentifiers = new [] { \"instanceIdentifiers\" },\n    Port = 123,\n    ReaderEndpointAddress = \"readerEndpointAddress\",\n    SecurityGroup = securityGroup\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\nimport software.amazon.awscdk.services.ec2.*;\n\nSecurityGroup securityGroup;\n\nDatabaseClusterAttributes databaseClusterAttributes = DatabaseClusterAttributes.builder()\n        .clusterIdentifier(\"clusterIdentifier\")\n\n        // the properties below are optional\n        .clusterEndpointAddress(\"clusterEndpointAddress\")\n        .instanceEndpointAddresses(List.of(\"instanceEndpointAddresses\"))\n        .instanceIdentifiers(List.of(\"instanceIdentifiers\"))\n        .port(123)\n        .readerEndpointAddress(\"readerEndpointAddress\")\n        .securityGroup(securityGroup)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\nvar securityGroup securityGroup\n\ndatabaseClusterAttributes := &databaseClusterAttributes{\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\n\t// the properties below are optional\n\tclusterEndpointAddress: jsii.String(\"clusterEndpointAddress\"),\n\tinstanceEndpointAddresses: []*string{\n\t\tjsii.String(\"instanceEndpointAddresses\"),\n\t},\n\tinstanceIdentifiers: []*string{\n\t\tjsii.String(\"instanceIdentifiers\"),\n\t},\n\tport: jsii.Number(123),\n\treaderEndpointAddress: jsii.String(\"readerEndpointAddress\"),\n\tsecurityGroup: securityGroup,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseClusterAttributes: docdb.DatabaseClusterAttributes = {\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  instanceEndpointAddresses: ['instanceEndpointAddresses'],\n  instanceIdentifiers: ['instanceIdentifiers'],\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  securityGroup: securityGroup,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseClusterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseClusterAttributes",
        "@aws-cdk/aws-ec2.ISecurityGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseClusterAttributes: docdb.DatabaseClusterAttributes = {\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  instanceEndpointAddresses: ['instanceEndpointAddresses'],\n  instanceIdentifiers: ['instanceIdentifiers'],\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  securityGroup: securityGroup,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "4d69c28b41cec7a3cc44f21f6855775a0691e80165b3414ba9b3e4721af054e5"
    },
    "3abe7e1361a0d959b054e49aac07298d635d3d8253f03b5af6885b370c0ddcfe": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf6d739ead405dc527e408307bfd355f4885918bb62859635dc3fdedce31f825"
    },
    "90edf894697cf067a90e7d3552b7cbc679bff990dd49850e7f95403a9e2cd60a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.core as cdk\n\n# database_cluster: docdb.DatabaseCluster\n# instance_type: ec2.InstanceType\n\ndatabase_instance = docdb.DatabaseInstance(self, \"MyDatabaseInstance\",\n    cluster=database_cluster,\n    instance_type=instance_type,\n\n    # the properties below are optional\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    db_instance_name=\"dbInstanceName\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    removal_policy=cdk.RemovalPolicy.DESTROY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK;\n\nDatabaseCluster databaseCluster;\nInstanceType instanceType;\nDatabaseInstance databaseInstance = new DatabaseInstance(this, \"MyDatabaseInstance\", new DatabaseInstanceProps {\n    Cluster = databaseCluster,\n    InstanceType = instanceType,\n\n    // the properties below are optional\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    DbInstanceName = \"dbInstanceName\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    RemovalPolicy = RemovalPolicy.DESTROY\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.core.*;\n\nDatabaseCluster databaseCluster;\nInstanceType instanceType;\n\nDatabaseInstance databaseInstance = DatabaseInstance.Builder.create(this, \"MyDatabaseInstance\")\n        .cluster(databaseCluster)\n        .instanceType(instanceType)\n\n        // the properties below are optional\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .dbInstanceName(\"dbInstanceName\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar databaseCluster databaseCluster\nvar instanceType instanceType\n\ndatabaseInstance := docdb.NewDatabaseInstance(this, jsii.String(\"MyDatabaseInstance\"), &databaseInstanceProps{\n\tcluster: databaseCluster,\n\tinstanceType: instanceType,\n\n\t// the properties below are optional\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tdbInstanceName: jsii.String(\"dbInstanceName\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const databaseCluster: docdb.DatabaseCluster;\ndeclare const instanceType: ec2.InstanceType;\nconst databaseInstance = new docdb.DatabaseInstance(this, 'MyDatabaseInstance', {\n  cluster: databaseCluster,\n  instanceType: instanceType,\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceName: 'dbInstanceName',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseInstance",
        "@aws-cdk/aws-docdb.DatabaseInstanceProps",
        "@aws-cdk/aws-docdb.IDatabaseCluster",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const databaseCluster: docdb.DatabaseCluster;\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstance = new docdb.DatabaseInstance(this, 'MyDatabaseInstance', {\n  cluster: databaseCluster,\n  instanceType: instanceType,\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceName: 'dbInstanceName',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 24,
        "91": 1,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6ce6c2e3a2641c118090adc9a950d7508503b952a3dccfb4c0b29050dabde9f2"
    },
    "38e64efca48d801a0a3cf2b1d899f59f04491ca2a136e9d32edea7e26c4e2ec6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\ndatabase_instance_attributes = docdb.DatabaseInstanceAttributes(\n    instance_endpoint_address=\"instanceEndpointAddress\",\n    instance_identifier=\"instanceIdentifier\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nDatabaseInstanceAttributes databaseInstanceAttributes = new DatabaseInstanceAttributes {\n    InstanceEndpointAddress = \"instanceEndpointAddress\",\n    InstanceIdentifier = \"instanceIdentifier\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nDatabaseInstanceAttributes databaseInstanceAttributes = DatabaseInstanceAttributes.builder()\n        .instanceEndpointAddress(\"instanceEndpointAddress\")\n        .instanceIdentifier(\"instanceIdentifier\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\ndatabaseInstanceAttributes := &databaseInstanceAttributes{\n\tinstanceEndpointAddress: jsii.String(\"instanceEndpointAddress\"),\n\tinstanceIdentifier: jsii.String(\"instanceIdentifier\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst databaseInstanceAttributes: docdb.DatabaseInstanceAttributes = {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseInstanceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseInstanceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstanceAttributes: docdb.DatabaseInstanceAttributes = {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "761dcb53442679b522e5321e6d0d8201b71241d256b9399bc89099c32970e657"
    },
    "d46e3542eb231495497912ccfe06cffd02708e38a3c255479f3a7d0fdf170ab6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.core as cdk\n\n# database_cluster: docdb.DatabaseCluster\n# instance_type: ec2.InstanceType\n\ndatabase_instance_props = docdb.DatabaseInstanceProps(\n    cluster=database_cluster,\n    instance_type=instance_type,\n\n    # the properties below are optional\n    auto_minor_version_upgrade=False,\n    availability_zone=\"availabilityZone\",\n    db_instance_name=\"dbInstanceName\",\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    removal_policy=cdk.RemovalPolicy.DESTROY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK;\n\nDatabaseCluster databaseCluster;\nInstanceType instanceType;\nDatabaseInstanceProps databaseInstanceProps = new DatabaseInstanceProps {\n    Cluster = databaseCluster,\n    InstanceType = instanceType,\n\n    // the properties below are optional\n    AutoMinorVersionUpgrade = false,\n    AvailabilityZone = \"availabilityZone\",\n    DbInstanceName = \"dbInstanceName\",\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    RemovalPolicy = RemovalPolicy.DESTROY\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.core.*;\n\nDatabaseCluster databaseCluster;\nInstanceType instanceType;\n\nDatabaseInstanceProps databaseInstanceProps = DatabaseInstanceProps.builder()\n        .cluster(databaseCluster)\n        .instanceType(instanceType)\n\n        // the properties below are optional\n        .autoMinorVersionUpgrade(false)\n        .availabilityZone(\"availabilityZone\")\n        .dbInstanceName(\"dbInstanceName\")\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar databaseCluster databaseCluster\nvar instanceType instanceType\n\ndatabaseInstanceProps := &databaseInstanceProps{\n\tcluster: databaseCluster,\n\tinstanceType: instanceType,\n\n\t// the properties below are optional\n\tautoMinorVersionUpgrade: jsii.Boolean(false),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tdbInstanceName: jsii.String(\"dbInstanceName\"),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const databaseCluster: docdb.DatabaseCluster;\ndeclare const instanceType: ec2.InstanceType;\nconst databaseInstanceProps: docdb.DatabaseInstanceProps = {\n  cluster: databaseCluster,\n  instanceType: instanceType,\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceName: 'dbInstanceName',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseInstanceProps",
        "@aws-cdk/aws-docdb.IDatabaseCluster",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const databaseCluster: docdb.DatabaseCluster;\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseInstanceProps: docdb.DatabaseInstanceProps = {\n  cluster: databaseCluster,\n  instanceType: instanceType,\n\n  // the properties below are optional\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbInstanceName: 'dbInstanceName',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 24,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "42c4b1b73a60ec2f086de77cfb193077903cba345f8002b1a6f7f98c6a317120"
    },
    "3502a851aa499d3678d43e041b915dde8c49d0accb68005a95ff61a8c9fba829": {
      "translations": {
        "python": {
          "source": "# cluster: docdb.DatabaseCluster\n\nmy_user_secret = docdb.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    master_secret=cluster.secret\n)\nmy_user_secret_attached = my_user_secret.attach(cluster) # Adds DB connections information in the secret\n\ncluster.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    MasterSecret = cluster.Secret\n});\nISecret myUserSecretAttached = myUserSecret.Attach(cluster); // Adds DB connections information in the secret\n\ncluster.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .masterSecret(cluster.getSecret())\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\n\nmyUserSecret := docdb.NewDatabaseSecret(this, jsii.String(\"MyUserSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"myuser\"),\n\tmasterSecret: cluster.secret,\n})\nmyUserSecretAttached := myUserSecret.attach(cluster) // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\t // Add rotation using the multi user scheme\n\tsecret: myUserSecretAttached,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: docdb.DatabaseCluster;\nconst myUserSecret = new docdb.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  masterSecret: cluster.secret,\n});\nconst myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseSecret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationMultiUser",
        "@aws-cdk/aws-docdb.DatabaseCluster#secret",
        "@aws-cdk/aws-docdb.DatabaseSecret",
        "@aws-cdk/aws-docdb.DatabaseSecretProps",
        "@aws-cdk/aws-docdb.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new docdb.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  masterSecret: cluster.secret,\n});\nconst myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bf271939b074b12c43e741ff31c67e431c9d9729e7829cb0b407695eff922dd2"
    },
    "86ff4233335e935ac8a21512108b77008bd4ef4e32973bacf03d1435d9cf12bd": {
      "translations": {
        "python": {
          "source": "# cluster: docdb.DatabaseCluster\n\nmy_user_secret = docdb.DatabaseSecret(self, \"MyUserSecret\",\n    username=\"myuser\",\n    master_secret=cluster.secret\n)\nmy_user_secret_attached = my_user_secret.attach(cluster) # Adds DB connections information in the secret\n\ncluster.add_rotation_multi_user(\"MyUser\",  # Add rotation using the multi user scheme\n    secret=my_user_secret_attached)",
          "version": "2"
        },
        "csharp": {
          "source": "DatabaseCluster cluster;\n\nDatabaseSecret myUserSecret = new DatabaseSecret(this, \"MyUserSecret\", new DatabaseSecretProps {\n    Username = \"myuser\",\n    MasterSecret = cluster.Secret\n});\nISecret myUserSecretAttached = myUserSecret.Attach(cluster); // Adds DB connections information in the secret\n\ncluster.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {  // Add rotation using the multi user scheme\n    Secret = myUserSecretAttached });",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster;\n\nDatabaseSecret myUserSecret = DatabaseSecret.Builder.create(this, \"MyUserSecret\")\n        .username(\"myuser\")\n        .masterSecret(cluster.getSecret())\n        .build();\nISecret myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder() // Add rotation using the multi user scheme\n        .secret(myUserSecretAttached).build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster databaseCluster\n\nmyUserSecret := docdb.NewDatabaseSecret(this, jsii.String(\"MyUserSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"myuser\"),\n\tmasterSecret: cluster.secret,\n})\nmyUserSecretAttached := myUserSecret.attach(cluster) // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\t // Add rotation using the multi user scheme\n\tsecret: myUserSecretAttached,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: docdb.DatabaseCluster;\nconst myUserSecret = new docdb.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  masterSecret: cluster.secret,\n});\nconst myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.DatabaseSecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationMultiUser",
        "@aws-cdk/aws-docdb.DatabaseCluster#secret",
        "@aws-cdk/aws-docdb.DatabaseSecret",
        "@aws-cdk/aws-docdb.DatabaseSecretProps",
        "@aws-cdk/aws-docdb.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.ISecretAttachmentTarget",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myUserSecret = new docdb.DatabaseSecret(this, 'MyUserSecret', {\n  username: 'myuser',\n  masterSecret: cluster.secret,\n});\nconst myUserSecretAttached = myUserSecret.attach(cluster); // Adds DB connections information in the secret\n\ncluster.addRotationMultiUser('MyUser', { // Add rotation using the multi user scheme\n  secret: myUserSecretAttached, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bf271939b074b12c43e741ff31c67e431c9d9729e7829cb0b407695eff922dd2"
    },
    "45da0ca1a04f0c66eb5592714ef142ba244ba1dddcb2abaaf1940199913755dc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_docdb as docdb\n\nendpoint = docdb.Endpoint(\"address\", 123)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.DocDB;\n\nEndpoint endpoint = new Endpoint(\"address\", 123);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.docdb.*;\n\nEndpoint endpoint = new Endpoint(\"address\", 123);",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport docdb \"github.com/aws-samples/dummy/awscdkawsdocdb\"\n\nendpoint := docdb.NewEndpoint(jsii.String(\"address\"), jsii.Number(123))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\nconst endpoint = new docdb.Endpoint('address', 123);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.Endpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.Endpoint"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as docdb from '@aws-cdk/aws-docdb';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpoint = new docdb.Endpoint('address', 123);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "70225e89c5bba625e40ee3409034436eab5d2f6c6585dc8f135c66a8b0bc3710"
    },
    "65b85689c3050836f64ea3bd982cd305cf8e03a9ec2fe0ab7716ec74993c7195": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\ncluster = docdb.DatabaseCluster(self, \"Database\",\n    master_user=docdb.Login(\n        username=\"myuser\",  # NOTE: 'admin' is reserved by DocumentDB\n        exclude_characters=\"\\\"@/:\",  # optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        secret_name=\"/myapp/mydocdb/masteruser\"\n    ),\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n    vpc_subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    MasterUser = new Login {\n        Username = \"myuser\",  // NOTE: 'admin' is reserved by DocumentDB\n        ExcludeCharacters = \"\\\"@/:\",  // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n        SecretName = \"/myapp/mydocdb/masteruser\"\n    },\n    InstanceType = InstanceType.Of(InstanceClass.R5, InstanceSize.LARGE),\n    VpcSubnets = new SubnetSelection {\n        SubnetType = SubnetType.PUBLIC\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .masterUser(Login.builder()\n                .username(\"myuser\") // NOTE: 'admin' is reserved by DocumentDB\n                .excludeCharacters(\"\\\"@/:\") // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n                .secretName(\"/myapp/mydocdb/masteruser\")\n                .build())\n        .instanceType(InstanceType.of(InstanceClass.R5, InstanceSize.LARGE))\n        .vpcSubnets(SubnetSelection.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\ncluster := docdb.NewDatabaseCluster(this, jsii.String(\"Database\"), &databaseClusterProps{\n\tmasterUser: &login{\n\t\tusername: jsii.String(\"myuser\"),\n\t\t // NOTE: 'admin' is reserved by DocumentDB\n\t\texcludeCharacters: jsii.String(\"\\\"@/:\"),\n\t\t // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n\t\tsecretName: jsii.String(\"/myapp/mydocdb/masteruser\"),\n\t},\n\tinstanceType: ec2.instanceType.of(ec2.instanceClass_R5, ec2.instanceSize_LARGE),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.Login"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster",
        "@aws-cdk/aws-docdb.DatabaseClusterProps",
        "@aws-cdk/aws-docdb.Login",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#R5",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst cluster = new docdb.DatabaseCluster(this, 'Database', {\n  masterUser: {\n    username: 'myuser', // NOTE: 'admin' is reserved by DocumentDB\n    excludeCharacters: '\\\"@/:', // optional, defaults to the set \"\\\"@/\" and is also used for eventually created rotations\n    secretName: '/myapp/mydocdb/masteruser', // optional, if you prefer to specify the secret name\n  },\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),\n  vpcSubnets: {\n    subnetType: ec2.SubnetType.PUBLIC,\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 9,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf6d739ead405dc527e408307bfd355f4885918bb62859635dc3fdedce31f825"
    },
    "20e41fec82ecf59d017fa9dbe6fcb87ddf17ca145aa7c32d0af89b184a80c298": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_secretsmanager as secretsmanager\n\n# my_imported_secret: secretsmanager.Secret\n# cluster: docdb.DatabaseCluster\n\n\ncluster.add_rotation_multi_user(\"MyUser\",\n    secret=my_imported_secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SecretsManager;\n\nSecret myImportedSecret;\nDatabaseCluster cluster;\n\n\ncluster.AddRotationMultiUser(\"MyUser\", new RotationMultiUserOptions {\n    Secret = myImportedSecret\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.secretsmanager.*;\n\nSecret myImportedSecret;\nDatabaseCluster cluster;\n\n\ncluster.addRotationMultiUser(\"MyUser\", RotationMultiUserOptions.builder()\n        .secret(myImportedSecret)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\n\nvar myImportedSecret secret\nvar cluster databaseCluster\n\n\ncluster.addRotationMultiUser(jsii.String(\"MyUser\"), &rotationMultiUserOptions{\n\tsecret: myImportedSecret,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const myImportedSecret: secretsmanager.Secret;\ndeclare const cluster: docdb.DatabaseCluster;\n\ncluster.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-docdb.RotationMultiUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-docdb.DatabaseCluster#addRotationMultiUser",
        "@aws-cdk/aws-docdb.RotationMultiUserOptions",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const myImportedSecret: secretsmanager.Secret;\ndeclare const cluster: docdb.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as docdb from '@aws-cdk/aws-docdb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addRotationMultiUser('MyUser', {\n  secret: myImportedSecret, // This secret must have the `masterarn` key\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f7961521ff611234873228849e847d928a9830ed3110612868a08e5dc5f8ab62"
    }
  }
}