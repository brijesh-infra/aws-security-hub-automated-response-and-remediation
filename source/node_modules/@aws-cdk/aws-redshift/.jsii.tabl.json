{
  "version": "2",
  "toolVersion": "1.63.2",
  "snippets": {
    "6d7c56eff48596a83e743630c70e2a3dbfe43e5c6bbfaa2f8af2625a76537449": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"Vpc\")\ncluster = Cluster(self, \"Redshift\",\n    master_user=Login(\n        master_username=\"admin\"\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"Vpc\");\nCluster cluster = new Cluster(this, \"Redshift\", new ClusterProps {\n    MasterUser = new Login {\n        MasterUsername = \"admin\"\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"Vpc\");\nCluster cluster = Cluster.Builder.create(this, \"Redshift\")\n        .masterUser(Login.builder()\n                .masterUsername(\"admin\")\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\ncluster := awscdkawsredshift.NewCluster(this, jsii.String(\"Redshift\"), &clusterProps{\n\tmasterUser: &login{\n\t\tmasterUsername: jsii.String(\"admin\"),\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst cluster = new Cluster(this, 'Redshift', {\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 29
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-redshift.Cluster",
        "@aws-cdk/aws-redshift.ClusterProps",
        "@aws-cdk/aws-redshift.Login",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Cluster } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst cluster = new Cluster(this, 'Redshift', {\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7ccd4d932721cefb97417307affa666825bbf34f24e53fc97a95d48463f02975"
    },
    "35dbff6b95a3a5f184f27e775a68f19281ecd304a7ed51c5403fdbcbf2854119": {
      "translations": {
        "python": {
          "source": "cluster.connections.allow_default_port_from_any_ipv4(\"Open to the world\")",
          "version": "2"
        },
        "csharp": {
          "source": "cluster.Connections.AllowDefaultPortFromAnyIpv4(\"Open to the world\");",
          "version": "1"
        },
        "java": {
          "source": "cluster.connections.allowDefaultPortFromAnyIpv4(\"Open to the world\");",
          "version": "1"
        },
        "go": {
          "source": "cluster.connections.allowDefaultPortFromAnyIpv4(jsii.String(\"Open to the world\"))",
          "version": "1"
        },
        "$": {
          "source": "cluster.connections.allowDefaultPortFromAnyIpv4('Open to the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 53
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#connections",
        "@aws-cdk/aws-redshift.Login"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\ncluster.connections.allowDefaultPortFromAnyIpv4('Open to the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 2,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "dc26ee1a29889123981fd2b9ebf8e2205ead34443cf5a5c0a88f8f4e97df2412"
    },
    "fddfa8c2a4581412e8d83929f74e5a9acc99c3a7006928bdb2287327c9bdeed4": {
      "translations": {
        "python": {
          "source": "cluster.cluster_endpoint.socket_address",
          "version": "2"
        },
        "csharp": {
          "source": "cluster.ClusterEndpoint.SocketAddress;",
          "version": "1"
        },
        "java": {
          "source": "cluster.getClusterEndpoint().getSocketAddress();",
          "version": "1"
        },
        "go": {
          "source": "cluster.clusterEndpoint.socketAddress",
          "version": "1"
        },
        "$": {
          "source": "cluster.clusterEndpoint.socketAddress;   // \"HOSTNAME:PORT\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#clusterEndpoint",
        "@aws-cdk/aws-redshift.Endpoint#socketAddress",
        "@aws-cdk/aws-redshift.Login"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\ncluster.clusterEndpoint.socketAddress;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 3,
        "194": 2,
        "226": 1
      },
      "fqnsFingerprint": "10412f54af817e3ea0601dfd357bf859cce614b64b0d60b23ba1dad316b78476"
    },
    "e466764005cf66c42c87c3e14798cb7a70e100840239e5c23d06e1da48247b6c": {
      "translations": {
        "python": {
          "source": "User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 93
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.UserProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "dbcf461e85c57b33b0f6c3e2d8bc91beaed34b18b098721a79e263b85ff7562d"
    },
    "c5def825da18d6397c0614d9c4d0741e665b8dfc7c633b5fab2df317d33f8570": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_kms as kms\n\n\nencryption_key = kms.Key(self, \"Key\")\nUser(self, \"User\",\n    encryption_key=encryption_key,\n    cluster=cluster,\n    database_name=\"databaseName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KMS;\n\n\nKey encryptionKey = new Key(this, \"Key\");\nnew User(this, \"User\", new UserProps {\n    EncryptionKey = encryptionKey,\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kms.*;\n\n\nKey encryptionKey = new Key(this, \"Key\");\nUser.Builder.create(this, \"User\")\n        .encryptionKey(encryptionKey)\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import kms \"github.com/aws-samples/dummy/awscdkawskms\"\n\n\nencryptionKey := kms.NewKey(this, jsii.String(\"Key\"))\nawscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tencryptionKey: encryptionKey,\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as kms from '@aws-cdk/aws-kms';\n\nconst encryptionKey = new kms.Key(this, 'Key');\nnew User(this, 'User', {\n  encryptionKey: encryptionKey,\n  cluster: cluster,\n  databaseName: 'databaseName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 104
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.UserProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as kms from '@aws-cdk/aws-kms';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst encryptionKey = new kms.Key(this, 'Key');\nnew User(this, 'User', {\n  encryptionKey: encryptionKey,\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "104": 2,
        "193": 1,
        "194": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d9538c18163b17f616aabe8f2d41f163483d52751f39525c4f1423654fda4045"
    },
    "1a383a78b042b417ec81b674b18f5dd20d970fb5785212bb25023fc67cee768d": {
      "translations": {
        "python": {
          "source": "User(self, \"User\",\n    username=\"myuser\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new User(this, \"User\", new UserProps {\n    Username = \"myuser\",\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "User.Builder.create(this, \"User\")\n        .username(\"myuser\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tusername: jsii.String(\"myuser\"),\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new User(this, 'User', {\n  username: 'myuser',\n  cluster: cluster,\n  databaseName: 'databaseName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 121
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.UserProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew User(this, 'User', {\n  username: 'myuser',\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "dbcf461e85c57b33b0f6c3e2d8bc91beaed34b18b098721a79e263b85ff7562d"
    },
    "d2974b569bc5ed7d66a6cd1f734ac5917ee580af25f35fb2d317e885392ad790": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databaseName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 144
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 3,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "93475e1762dba3e30d091f3c17843842f45915f192dfc163cd47a202ca1659fa"
    },
    "2e4424cc42fc915d801385aabf33a290d4d93a865a6972b4c055f4306cc151a4": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\", dist_key=True), Column(name=\"col2\", data_type=\"float\")\n    ],\n    cluster=cluster,\n    database_name=\"databaseName\",\n    dist_style=TableDistStyle.KEY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\", DistKey = true }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n    DistStyle = TableDistStyle.KEY\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").distKey(true).build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .distStyle(TableDistStyle.KEY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t\tdistKey: jsii.Boolean(true),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdistStyle: *awscdkawsredshift.TableDistStyle_KEY,\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 154
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableDistStyle",
        "@aws-cdk/aws-redshift.TableDistStyle#KEY",
        "@aws-cdk/aws-redshift.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 9
      },
      "fqnsFingerprint": "07c674922559092dcd6aa380a2a95b5bf75336a05831b7421b82cff5b4275e8c"
    },
    "72c8cff61d267b6d480e458595ba300dcbd09827f25abedcd0970c899224ae9a": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\", sort_key=True), Column(name=\"col2\", data_type=\"float\", sort_key=True)\n    ],\n    cluster=cluster,\n    database_name=\"databaseName\",\n    sort_style=TableSortStyle.COMPOUND\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\", SortKey = true }, new Column { Name = \"col2\", DataType = \"float\", SortKey = true } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n    SortStyle = TableSortStyle.COMPOUND\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").sortKey(true).build(), Column.builder().name(\"col2\").dataType(\"float\").sortKey(true).build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .sortStyle(TableSortStyle.COMPOUND)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t\tsortKey: jsii.Boolean(true),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t\tsortKey: jsii.Boolean(true),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tsortStyle: *awscdkawsredshift.TableSortStyle_COMPOUND,\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', sortKey: true },\n    { name: 'col2', dataType: 'float', sortKey: true },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  sortStyle: TableSortStyle.COMPOUND,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 168
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableProps",
        "@aws-cdk/aws-redshift.TableSortStyle",
        "@aws-cdk/aws-redshift.TableSortStyle#COMPOUND",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', sortKey: true },\n    { name: 'col2', dataType: 'float', sortKey: true },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  sortStyle: TableSortStyle.COMPOUND,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "4caef52a31bb9916f9182309c072288b961169a229ecebd99d042e4eb0966408"
    },
    "48022170a3156921629ff20639a0a8363dd0914ec435686a4dc6b61941bf68e9": {
      "translations": {
        "python": {
          "source": "user = User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ntable = Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\n\ntable.grant(user, TableAction.DROP, TableAction.SELECT)",
          "version": "2"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\nTable table = new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\n\ntable.Grant(user, TableAction.DROP, TableAction.SELECT);",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\nTable table = Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\n\ntable.grant(user, TableAction.DROP, TableAction.SELECT);",
          "version": "1"
        },
        "go": {
          "source": "user := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ntable := awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\n\ntable.grant(user, awscdkawsredshift.TableAction_DROP, awscdkawsredshift.TableAction_SELECT)",
          "version": "1"
        },
        "$": {
          "source": "const user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\nconst table = new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\n\ntable.grant(user, TableAction.DROP, TableAction.SELECT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 185
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.IUser",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableAction",
        "@aws-cdk/aws-redshift.TableAction#DROP",
        "@aws-cdk/aws-redshift.TableAction#SELECT",
        "@aws-cdk/aws-redshift.TableProps",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.UserProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\nconst table = new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\n\ntable.grant(user, TableAction.DROP, TableAction.SELECT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 22,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 9
      },
      "fqnsFingerprint": "c211a7dd0e60ea1ef01a901d56abd3ffb9f7eeae16aa9874222f9e21bfb3c8df"
    },
    "4ee7f7db9b15075096de9064b690f5d6e27804851a5a285ce62b261851bb7a9b": {
      "translations": {
        "python": {
          "source": "database_name = \"databaseName\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = User(self, \"User\",\n    username=username,\n    cluster=cluster,\n    database_name=database_name\n)\ntable = Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=database_name\n)\ntable.grant(user, TableAction.INSERT)",
          "version": "2"
        },
        "csharp": {
          "source": "string databaseName = \"databaseName\";\nstring username = \"myuser\";\nstring tableName = \"mytable\";\n\nUser user = new User(this, \"User\", new UserProps {\n    Username = username,\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\nTable table = new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\ntable.Grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "java": {
          "source": "String databaseName = \"databaseName\";\nString username = \"myuser\";\nString tableName = \"mytable\";\n\nUser user = User.Builder.create(this, \"User\")\n        .username(username)\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build();\nTable table = Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build();\ntable.grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "go": {
          "source": "databaseName := \"databaseName\"\nusername := \"myuser\"\ntableName := \"mytable\"\n\nuser := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tusername: username,\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable := awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable.grant(user, awscdkawsredshift.TableAction_INSERT)",
          "version": "1"
        },
        "$": {
          "source": "const databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = new User(this, 'User', {\n  username: username,\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: databaseName,\n});\ntable.grant(user, TableAction.INSERT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 205
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.IUser",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableAction",
        "@aws-cdk/aws-redshift.TableAction#INSERT",
        "@aws-cdk/aws-redshift.TableProps",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.UserProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = new User(this, 'User', {\n  username: username,\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: databaseName,\n});\ntable.grant(user, TableAction.INSERT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 27,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 10
      },
      "fqnsFingerprint": "c7abbae4c53a5cf59f64cc2877eb99889ce9f5888afd0aa196d5b9f225c9cc4e"
    },
    "5ff8db71047dd0b5b3163ce164f5f4d397b23cc04b0542209f7bf455f0e138cd": {
      "translations": {
        "python": {
          "source": "database_name = \"databaseName\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = User.from_user_attributes(self, \"User\",\n    username=username,\n    password=SecretValue.unsafe_plain_text(\"NOT_FOR_PRODUCTION\"),\n    cluster=cluster,\n    database_name=database_name\n)\ntable = Table.from_table_attributes(self, \"Table\",\n    table_name=table_name,\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ntable.grant(user, TableAction.INSERT)",
          "version": "2"
        },
        "csharp": {
          "source": "string databaseName = \"databaseName\";\nstring username = \"myuser\";\nstring tableName = \"mytable\";\n\nIUser user = User.FromUserAttributes(this, \"User\", new UserAttributes {\n    Username = username,\n    Password = SecretValue.UnsafePlainText(\"NOT_FOR_PRODUCTION\"),\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\nITable table = Table.FromTableAttributes(this, \"Table\", new TableAttributes {\n    TableName = tableName,\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ntable.Grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "java": {
          "source": "String databaseName = \"databaseName\";\nString username = \"myuser\";\nString tableName = \"mytable\";\n\nIUser user = User.fromUserAttributes(this, \"User\", UserAttributes.builder()\n        .username(username)\n        .password(SecretValue.unsafePlainText(\"NOT_FOR_PRODUCTION\"))\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build());\nITable table = Table.fromTableAttributes(this, \"Table\", TableAttributes.builder()\n        .tableName(tableName)\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build());\ntable.grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "go": {
          "source": "databaseName := \"databaseName\"\nusername := \"myuser\"\ntableName := \"mytable\"\n\nuser := awscdkawsredshift.User.fromUserAttributes(this, jsii.String(\"User\"), &userAttributes{\n\tusername: username,\n\tpassword: *awscdkcore.SecretValue.unsafePlainText(jsii.String(\"NOT_FOR_PRODUCTION\")),\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable := awscdkawsredshift.Table.fromTableAttributes(this, jsii.String(\"Table\"), &tableAttributes{\n\ttableName: tableName,\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ntable.grant(user, awscdkawsredshift.TableAction_INSERT)",
          "version": "1"
        },
        "$": {
          "source": "const databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = User.fromUserAttributes(this, 'User', {\n  username: username,\n  password: SecretValue.unsafePlainText('NOT_FOR_PRODUCTION'),\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = Table.fromTableAttributes(this, 'Table', {\n  tableName: tableName,\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ntable.grant(user, TableAction.INSERT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 226
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.ITable",
        "@aws-cdk/aws-redshift.ITable#grant",
        "@aws-cdk/aws-redshift.IUser",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table#fromTableAttributes",
        "@aws-cdk/aws-redshift.TableAction",
        "@aws-cdk/aws-redshift.TableAction#INSERT",
        "@aws-cdk/aws-redshift.TableAttributes",
        "@aws-cdk/aws-redshift.User#fromUserAttributes",
        "@aws-cdk/aws-redshift.UserAttributes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#unsafePlainText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = User.fromUserAttributes(this, 'User', {\n  username: username,\n  password: SecretValue.unsafePlainText('NOT_FOR_PRODUCTION'),\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = Table.fromTableAttributes(this, 'Table', {\n  tableName: tableName,\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ntable.grant(user, TableAction.INSERT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 33,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 5,
        "196": 4,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 12
      },
      "fqnsFingerprint": "a36c21f5b99a3339e670351799bfa7f4b134284495d89d169ed6389dcd192540"
    },
    "4edab03ba0ff208d4759ff9763330df324697ff6549639b0f0c4c0a6ea34c2d0": {
      "translations": {
        "python": {
          "source": "cluster.add_rotation_single_user()",
          "version": "2"
        },
        "csharp": {
          "source": "cluster.AddRotationSingleUser();",
          "version": "1"
        },
        "java": {
          "source": "cluster.addRotationSingleUser();",
          "version": "1"
        },
        "go": {
          "source": "cluster.addRotationSingleUser()",
          "version": "1"
        },
        "$": {
          "source": "cluster.addRotationSingleUser(); // Will rotate automatically after 30 days",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 263
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#addRotationSingleUser",
        "@aws-cdk/aws-redshift.Login"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\ncluster.addRotationSingleUser();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "ffc80e312ae2345cb7cd563bcb3dae8768f66923806318d26b2b0c88ea5ca9b6"
    },
    "6a2e262f774026f44089e61dae22a0e90f5e6745d0ac125fa1d183cf11db9a63": {
      "translations": {
        "python": {
          "source": "user = User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ncluster.add_rotation_multi_user(\"MultiUserRotation\",\n    secret=user.secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ncluster.AddRotationMultiUser(\"MultiUserRotation\", new RotationMultiUserOptions {\n    Secret = user.Secret\n});",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\ncluster.addRotationMultiUser(\"MultiUserRotation\", RotationMultiUserOptions.builder()\n        .secret(user.getSecret())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "user := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ncluster.addRotationMultiUser(jsii.String(\"MultiUserRotation\"), &rotationMultiUserOptions{\n\tsecret: user.secret,\n})",
          "version": "1"
        },
        "$": {
          "source": "\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-redshift"
        },
        "field": {
          "field": "markdown",
          "line": 269
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#addRotationMultiUser",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.RotationMultiUserOptions",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.User#secret",
        "@aws-cdk/aws-redshift.UserProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "310c4f872f1180a1518ae34083adf5238be9070ab7e629791e315e8215265b5e"
    },
    "7ba7755aabeee923a8613d1b06a347b336c8675d3a1c1b1061bcfe62a89476bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster = redshift.CfnCluster(self, \"MyCfnCluster\",\n    cluster_type=\"clusterType\",\n    db_name=\"dbName\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    node_type=\"nodeType\",\n\n    # the properties below are optional\n    allow_version_upgrade=False,\n    aqua_configuration_status=\"aquaConfigurationStatus\",\n    automated_snapshot_retention_period=123,\n    availability_zone=\"availabilityZone\",\n    availability_zone_relocation=False,\n    availability_zone_relocation_status=\"availabilityZoneRelocationStatus\",\n    classic=False,\n    cluster_identifier=\"clusterIdentifier\",\n    cluster_parameter_group_name=\"clusterParameterGroupName\",\n    cluster_security_groups=[\"clusterSecurityGroups\"],\n    cluster_subnet_group_name=\"clusterSubnetGroupName\",\n    cluster_version=\"clusterVersion\",\n    defer_maintenance=False,\n    defer_maintenance_duration=123,\n    defer_maintenance_end_time=\"deferMaintenanceEndTime\",\n    defer_maintenance_start_time=\"deferMaintenanceStartTime\",\n    destination_region=\"destinationRegion\",\n    elastic_ip=\"elasticIp\",\n    encrypted=False,\n    enhanced_vpc_routing=False,\n    hsm_client_certificate_identifier=\"hsmClientCertificateIdentifier\",\n    hsm_configuration_identifier=\"hsmConfigurationIdentifier\",\n    iam_roles=[\"iamRoles\"],\n    kms_key_id=\"kmsKeyId\",\n    logging_properties=redshift.CfnCluster.LoggingPropertiesProperty(\n        bucket_name=\"bucketName\",\n\n        # the properties below are optional\n        s3_key_prefix=\"s3KeyPrefix\"\n    ),\n    maintenance_track_name=\"maintenanceTrackName\",\n    manual_snapshot_retention_period=123,\n    number_of_nodes=123,\n    owner_account=\"ownerAccount\",\n    port=123,\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    publicly_accessible=False,\n    resource_action=\"resourceAction\",\n    revision_target=\"revisionTarget\",\n    rotate_encryption_key=False,\n    snapshot_cluster_identifier=\"snapshotClusterIdentifier\",\n    snapshot_copy_grant_name=\"snapshotCopyGrantName\",\n    snapshot_copy_manual=False,\n    snapshot_copy_retention_period=123,\n    snapshot_identifier=\"snapshotIdentifier\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnCluster cfnCluster = new CfnCluster(this, \"MyCfnCluster\", new CfnClusterProps {\n    ClusterType = \"clusterType\",\n    DbName = \"dbName\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    NodeType = \"nodeType\",\n\n    // the properties below are optional\n    AllowVersionUpgrade = false,\n    AquaConfigurationStatus = \"aquaConfigurationStatus\",\n    AutomatedSnapshotRetentionPeriod = 123,\n    AvailabilityZone = \"availabilityZone\",\n    AvailabilityZoneRelocation = false,\n    AvailabilityZoneRelocationStatus = \"availabilityZoneRelocationStatus\",\n    Classic = false,\n    ClusterIdentifier = \"clusterIdentifier\",\n    ClusterParameterGroupName = \"clusterParameterGroupName\",\n    ClusterSecurityGroups = new [] { \"clusterSecurityGroups\" },\n    ClusterSubnetGroupName = \"clusterSubnetGroupName\",\n    ClusterVersion = \"clusterVersion\",\n    DeferMaintenance = false,\n    DeferMaintenanceDuration = 123,\n    DeferMaintenanceEndTime = \"deferMaintenanceEndTime\",\n    DeferMaintenanceStartTime = \"deferMaintenanceStartTime\",\n    DestinationRegion = \"destinationRegion\",\n    ElasticIp = \"elasticIp\",\n    Encrypted = false,\n    EnhancedVpcRouting = false,\n    HsmClientCertificateIdentifier = \"hsmClientCertificateIdentifier\",\n    HsmConfigurationIdentifier = \"hsmConfigurationIdentifier\",\n    IamRoles = new [] { \"iamRoles\" },\n    KmsKeyId = \"kmsKeyId\",\n    LoggingProperties = new LoggingPropertiesProperty {\n        BucketName = \"bucketName\",\n\n        // the properties below are optional\n        S3KeyPrefix = \"s3KeyPrefix\"\n    },\n    MaintenanceTrackName = \"maintenanceTrackName\",\n    ManualSnapshotRetentionPeriod = 123,\n    NumberOfNodes = 123,\n    OwnerAccount = \"ownerAccount\",\n    Port = 123,\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    PubliclyAccessible = false,\n    ResourceAction = \"resourceAction\",\n    RevisionTarget = \"revisionTarget\",\n    RotateEncryptionKey = false,\n    SnapshotClusterIdentifier = \"snapshotClusterIdentifier\",\n    SnapshotCopyGrantName = \"snapshotCopyGrantName\",\n    SnapshotCopyManual = false,\n    SnapshotCopyRetentionPeriod = 123,\n    SnapshotIdentifier = \"snapshotIdentifier\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnCluster cfnCluster = CfnCluster.Builder.create(this, \"MyCfnCluster\")\n        .clusterType(\"clusterType\")\n        .dbName(\"dbName\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .nodeType(\"nodeType\")\n\n        // the properties below are optional\n        .allowVersionUpgrade(false)\n        .aquaConfigurationStatus(\"aquaConfigurationStatus\")\n        .automatedSnapshotRetentionPeriod(123)\n        .availabilityZone(\"availabilityZone\")\n        .availabilityZoneRelocation(false)\n        .availabilityZoneRelocationStatus(\"availabilityZoneRelocationStatus\")\n        .classic(false)\n        .clusterIdentifier(\"clusterIdentifier\")\n        .clusterParameterGroupName(\"clusterParameterGroupName\")\n        .clusterSecurityGroups(List.of(\"clusterSecurityGroups\"))\n        .clusterSubnetGroupName(\"clusterSubnetGroupName\")\n        .clusterVersion(\"clusterVersion\")\n        .deferMaintenance(false)\n        .deferMaintenanceDuration(123)\n        .deferMaintenanceEndTime(\"deferMaintenanceEndTime\")\n        .deferMaintenanceStartTime(\"deferMaintenanceStartTime\")\n        .destinationRegion(\"destinationRegion\")\n        .elasticIp(\"elasticIp\")\n        .encrypted(false)\n        .enhancedVpcRouting(false)\n        .hsmClientCertificateIdentifier(\"hsmClientCertificateIdentifier\")\n        .hsmConfigurationIdentifier(\"hsmConfigurationIdentifier\")\n        .iamRoles(List.of(\"iamRoles\"))\n        .kmsKeyId(\"kmsKeyId\")\n        .loggingProperties(LoggingPropertiesProperty.builder()\n                .bucketName(\"bucketName\")\n\n                // the properties below are optional\n                .s3KeyPrefix(\"s3KeyPrefix\")\n                .build())\n        .maintenanceTrackName(\"maintenanceTrackName\")\n        .manualSnapshotRetentionPeriod(123)\n        .numberOfNodes(123)\n        .ownerAccount(\"ownerAccount\")\n        .port(123)\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .publiclyAccessible(false)\n        .resourceAction(\"resourceAction\")\n        .revisionTarget(\"revisionTarget\")\n        .rotateEncryptionKey(false)\n        .snapshotClusterIdentifier(\"snapshotClusterIdentifier\")\n        .snapshotCopyGrantName(\"snapshotCopyGrantName\")\n        .snapshotCopyManual(false)\n        .snapshotCopyRetentionPeriod(123)\n        .snapshotIdentifier(\"snapshotIdentifier\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnCluster := redshift.NewCfnCluster(this, jsii.String(\"MyCfnCluster\"), &cfnClusterProps{\n\tclusterType: jsii.String(\"clusterType\"),\n\tdbName: jsii.String(\"dbName\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tnodeType: jsii.String(\"nodeType\"),\n\n\t// the properties below are optional\n\tallowVersionUpgrade: jsii.Boolean(false),\n\taquaConfigurationStatus: jsii.String(\"aquaConfigurationStatus\"),\n\tautomatedSnapshotRetentionPeriod: jsii.Number(123),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tavailabilityZoneRelocation: jsii.Boolean(false),\n\tavailabilityZoneRelocationStatus: jsii.String(\"availabilityZoneRelocationStatus\"),\n\tclassic: jsii.Boolean(false),\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\tclusterParameterGroupName: jsii.String(\"clusterParameterGroupName\"),\n\tclusterSecurityGroups: []*string{\n\t\tjsii.String(\"clusterSecurityGroups\"),\n\t},\n\tclusterSubnetGroupName: jsii.String(\"clusterSubnetGroupName\"),\n\tclusterVersion: jsii.String(\"clusterVersion\"),\n\tdeferMaintenance: jsii.Boolean(false),\n\tdeferMaintenanceDuration: jsii.Number(123),\n\tdeferMaintenanceEndTime: jsii.String(\"deferMaintenanceEndTime\"),\n\tdeferMaintenanceStartTime: jsii.String(\"deferMaintenanceStartTime\"),\n\tdestinationRegion: jsii.String(\"destinationRegion\"),\n\telasticIp: jsii.String(\"elasticIp\"),\n\tencrypted: jsii.Boolean(false),\n\tenhancedVpcRouting: jsii.Boolean(false),\n\thsmClientCertificateIdentifier: jsii.String(\"hsmClientCertificateIdentifier\"),\n\thsmConfigurationIdentifier: jsii.String(\"hsmConfigurationIdentifier\"),\n\tiamRoles: []*string{\n\t\tjsii.String(\"iamRoles\"),\n\t},\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tloggingProperties: &loggingPropertiesProperty{\n\t\tbucketName: jsii.String(\"bucketName\"),\n\n\t\t// the properties below are optional\n\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t},\n\tmaintenanceTrackName: jsii.String(\"maintenanceTrackName\"),\n\tmanualSnapshotRetentionPeriod: jsii.Number(123),\n\tnumberOfNodes: jsii.Number(123),\n\townerAccount: jsii.String(\"ownerAccount\"),\n\tport: jsii.Number(123),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tpubliclyAccessible: jsii.Boolean(false),\n\tresourceAction: jsii.String(\"resourceAction\"),\n\trevisionTarget: jsii.String(\"revisionTarget\"),\n\trotateEncryptionKey: jsii.Boolean(false),\n\tsnapshotClusterIdentifier: jsii.String(\"snapshotClusterIdentifier\"),\n\tsnapshotCopyGrantName: jsii.String(\"snapshotCopyGrantName\"),\n\tsnapshotCopyManual: jsii.Boolean(false),\n\tsnapshotCopyRetentionPeriod: jsii.Number(123),\n\tsnapshotIdentifier: jsii.String(\"snapshotIdentifier\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnCluster = new redshift.CfnCluster(this, 'MyCfnCluster', {\n  clusterType: 'clusterType',\n  dbName: 'dbName',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  nodeType: 'nodeType',\n\n  // the properties below are optional\n  allowVersionUpgrade: false,\n  aquaConfigurationStatus: 'aquaConfigurationStatus',\n  automatedSnapshotRetentionPeriod: 123,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneRelocation: false,\n  availabilityZoneRelocationStatus: 'availabilityZoneRelocationStatus',\n  classic: false,\n  clusterIdentifier: 'clusterIdentifier',\n  clusterParameterGroupName: 'clusterParameterGroupName',\n  clusterSecurityGroups: ['clusterSecurityGroups'],\n  clusterSubnetGroupName: 'clusterSubnetGroupName',\n  clusterVersion: 'clusterVersion',\n  deferMaintenance: false,\n  deferMaintenanceDuration: 123,\n  deferMaintenanceEndTime: 'deferMaintenanceEndTime',\n  deferMaintenanceStartTime: 'deferMaintenanceStartTime',\n  destinationRegion: 'destinationRegion',\n  elasticIp: 'elasticIp',\n  encrypted: false,\n  enhancedVpcRouting: false,\n  hsmClientCertificateIdentifier: 'hsmClientCertificateIdentifier',\n  hsmConfigurationIdentifier: 'hsmConfigurationIdentifier',\n  iamRoles: ['iamRoles'],\n  kmsKeyId: 'kmsKeyId',\n  loggingProperties: {\n    bucketName: 'bucketName',\n\n    // the properties below are optional\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  maintenanceTrackName: 'maintenanceTrackName',\n  manualSnapshotRetentionPeriod: 123,\n  numberOfNodes: 123,\n  ownerAccount: 'ownerAccount',\n  port: 123,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  publiclyAccessible: false,\n  resourceAction: 'resourceAction',\n  revisionTarget: 'revisionTarget',\n  rotateEncryptionKey: false,\n  snapshotClusterIdentifier: 'snapshotClusterIdentifier',\n  snapshotCopyGrantName: 'snapshotCopyGrantName',\n  snapshotCopyManual: false,\n  snapshotCopyRetentionPeriod: 123,\n  snapshotIdentifier: 'snapshotIdentifier',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnCluster",
        "@aws-cdk/aws-redshift.CfnClusterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCluster = new redshift.CfnCluster(this, 'MyCfnCluster', {\n  clusterType: 'clusterType',\n  dbName: 'dbName',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  nodeType: 'nodeType',\n\n  // the properties below are optional\n  allowVersionUpgrade: false,\n  aquaConfigurationStatus: 'aquaConfigurationStatus',\n  automatedSnapshotRetentionPeriod: 123,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneRelocation: false,\n  availabilityZoneRelocationStatus: 'availabilityZoneRelocationStatus',\n  classic: false,\n  clusterIdentifier: 'clusterIdentifier',\n  clusterParameterGroupName: 'clusterParameterGroupName',\n  clusterSecurityGroups: ['clusterSecurityGroups'],\n  clusterSubnetGroupName: 'clusterSubnetGroupName',\n  clusterVersion: 'clusterVersion',\n  deferMaintenance: false,\n  deferMaintenanceDuration: 123,\n  deferMaintenanceEndTime: 'deferMaintenanceEndTime',\n  deferMaintenanceStartTime: 'deferMaintenanceStartTime',\n  destinationRegion: 'destinationRegion',\n  elasticIp: 'elasticIp',\n  encrypted: false,\n  enhancedVpcRouting: false,\n  hsmClientCertificateIdentifier: 'hsmClientCertificateIdentifier',\n  hsmConfigurationIdentifier: 'hsmConfigurationIdentifier',\n  iamRoles: ['iamRoles'],\n  kmsKeyId: 'kmsKeyId',\n  loggingProperties: {\n    bucketName: 'bucketName',\n\n    // the properties below are optional\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  maintenanceTrackName: 'maintenanceTrackName',\n  manualSnapshotRetentionPeriod: 123,\n  numberOfNodes: 123,\n  ownerAccount: 'ownerAccount',\n  port: 123,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  publiclyAccessible: false,\n  resourceAction: 'resourceAction',\n  revisionTarget: 'revisionTarget',\n  rotateEncryptionKey: false,\n  snapshotClusterIdentifier: 'snapshotClusterIdentifier',\n  snapshotCopyGrantName: 'snapshotCopyGrantName',\n  snapshotCopyManual: false,\n  snapshotCopyRetentionPeriod: 123,\n  snapshotIdentifier: 'snapshotIdentifier',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 36,
        "75": 55,
        "91": 9,
        "104": 1,
        "192": 4,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 51,
        "290": 1
      },
      "fqnsFingerprint": "887ff0e452a25e09247f9a0605be34b442e571c7a603ff6c1e116bd0e5eb382c"
    },
    "23c90cdf30e9d1d329aac81eb632f1a3ae1ed02b5b4dd69809c98049daa607e3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\nendpoint_property = redshift.CfnCluster.EndpointProperty(\n    address=\"address\",\n    port=\"port\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nEndpointProperty endpointProperty = new EndpointProperty {\n    Address = \"address\",\n    Port = \"port\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nEndpointProperty endpointProperty = EndpointProperty.builder()\n        .address(\"address\")\n        .port(\"port\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nendpointProperty := &endpointProperty{\n\taddress: jsii.String(\"address\"),\n\tport: jsii.String(\"port\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst endpointProperty: redshift.CfnCluster.EndpointProperty = {\n  address: 'address',\n  port: 'port',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnCluster.EndpointProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnCluster.EndpointProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointProperty: redshift.CfnCluster.EndpointProperty = {\n  address: 'address',\n  port: 'port',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "63e96b3dcfb3e8957fb24549f271bf6c79df62fdf9883c541e967984a8196168"
    },
    "9a9f30ac47d92478c6e9d08f439fb8954d0a4b97466411c2c8d5e4cd06d0dee0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\nlogging_properties_property = redshift.CfnCluster.LoggingPropertiesProperty(\n    bucket_name=\"bucketName\",\n\n    # the properties below are optional\n    s3_key_prefix=\"s3KeyPrefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nLoggingPropertiesProperty loggingPropertiesProperty = new LoggingPropertiesProperty {\n    BucketName = \"bucketName\",\n\n    // the properties below are optional\n    S3KeyPrefix = \"s3KeyPrefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nLoggingPropertiesProperty loggingPropertiesProperty = LoggingPropertiesProperty.builder()\n        .bucketName(\"bucketName\")\n\n        // the properties below are optional\n        .s3KeyPrefix(\"s3KeyPrefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nloggingPropertiesProperty := &loggingPropertiesProperty{\n\tbucketName: jsii.String(\"bucketName\"),\n\n\t// the properties below are optional\n\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst loggingPropertiesProperty: redshift.CfnCluster.LoggingPropertiesProperty = {\n  bucketName: 'bucketName',\n\n  // the properties below are optional\n  s3KeyPrefix: 's3KeyPrefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnCluster.LoggingPropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnCluster.LoggingPropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loggingPropertiesProperty: redshift.CfnCluster.LoggingPropertiesProperty = {\n  bucketName: 'bucketName',\n\n  // the properties below are optional\n  s3KeyPrefix: 's3KeyPrefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4c520c435b04f9378dc82c93c5afc81568f583fe3e3816b8adf8613025187b53"
    },
    "c6938f03e5599c3459f3290673ce5797c0dc268c8202cdea25aa534da637e543": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_parameter_group = redshift.CfnClusterParameterGroup(self, \"MyCfnClusterParameterGroup\",\n    description=\"description\",\n    parameter_group_family=\"parameterGroupFamily\",\n\n    # the properties below are optional\n    parameters=[redshift.CfnClusterParameterGroup.ParameterProperty(\n        parameter_name=\"parameterName\",\n        parameter_value=\"parameterValue\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterParameterGroup cfnClusterParameterGroup = new CfnClusterParameterGroup(this, \"MyCfnClusterParameterGroup\", new CfnClusterParameterGroupProps {\n    Description = \"description\",\n    ParameterGroupFamily = \"parameterGroupFamily\",\n\n    // the properties below are optional\n    Parameters = new [] { new ParameterProperty {\n        ParameterName = \"parameterName\",\n        ParameterValue = \"parameterValue\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterParameterGroup cfnClusterParameterGroup = CfnClusterParameterGroup.Builder.create(this, \"MyCfnClusterParameterGroup\")\n        .description(\"description\")\n        .parameterGroupFamily(\"parameterGroupFamily\")\n\n        // the properties below are optional\n        .parameters(List.of(ParameterProperty.builder()\n                .parameterName(\"parameterName\")\n                .parameterValue(\"parameterValue\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterParameterGroup := redshift.NewCfnClusterParameterGroup(this, jsii.String(\"MyCfnClusterParameterGroup\"), &cfnClusterParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tparameterGroupFamily: jsii.String(\"parameterGroupFamily\"),\n\n\t// the properties below are optional\n\tparameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tparameterName: jsii.String(\"parameterName\"),\n\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterParameterGroup = new redshift.CfnClusterParameterGroup(this, 'MyCfnClusterParameterGroup', {\n  description: 'description',\n  parameterGroupFamily: 'parameterGroupFamily',\n\n  // the properties below are optional\n  parameters: [{\n    parameterName: 'parameterName',\n    parameterValue: 'parameterValue',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterParameterGroup",
        "@aws-cdk/aws-redshift.CfnClusterParameterGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterParameterGroup = new redshift.CfnClusterParameterGroup(this, 'MyCfnClusterParameterGroup', {\n  description: 'description',\n  parameterGroupFamily: 'parameterGroupFamily',\n\n  // the properties below are optional\n  parameters: [{\n    parameterName: 'parameterName',\n    parameterValue: 'parameterValue',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 12,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "087e0f08596ea3088c797a68eace47ab77a6ff7ed01ed2337636a69415ac5072"
    },
    "33ce8c59f4259f6db7339e2477558a3352daf5af99dcd0d9e854655c3dc8ad59": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\nparameter_property = redshift.CfnClusterParameterGroup.ParameterProperty(\n    parameter_name=\"parameterName\",\n    parameter_value=\"parameterValue\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nParameterProperty parameterProperty = new ParameterProperty {\n    ParameterName = \"parameterName\",\n    ParameterValue = \"parameterValue\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nParameterProperty parameterProperty = ParameterProperty.builder()\n        .parameterName(\"parameterName\")\n        .parameterValue(\"parameterValue\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nparameterProperty := &parameterProperty{\n\tparameterName: jsii.String(\"parameterName\"),\n\tparameterValue: jsii.String(\"parameterValue\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst parameterProperty: redshift.CfnClusterParameterGroup.ParameterProperty = {\n  parameterName: 'parameterName',\n  parameterValue: 'parameterValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterParameterGroup.ParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterParameterGroup.ParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parameterProperty: redshift.CfnClusterParameterGroup.ParameterProperty = {\n  parameterName: 'parameterName',\n  parameterValue: 'parameterValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c290f319b27ba631aa698723a898e576c083d28810b9faddde35bd91883c87e9"
    },
    "54684b68ca44d438ea2158e37fef71a94d8d27b743943ac721bf78be5261b75d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_parameter_group_props = redshift.CfnClusterParameterGroupProps(\n    description=\"description\",\n    parameter_group_family=\"parameterGroupFamily\",\n\n    # the properties below are optional\n    parameters=[redshift.CfnClusterParameterGroup.ParameterProperty(\n        parameter_name=\"parameterName\",\n        parameter_value=\"parameterValue\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterParameterGroupProps cfnClusterParameterGroupProps = new CfnClusterParameterGroupProps {\n    Description = \"description\",\n    ParameterGroupFamily = \"parameterGroupFamily\",\n\n    // the properties below are optional\n    Parameters = new [] { new ParameterProperty {\n        ParameterName = \"parameterName\",\n        ParameterValue = \"parameterValue\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterParameterGroupProps cfnClusterParameterGroupProps = CfnClusterParameterGroupProps.builder()\n        .description(\"description\")\n        .parameterGroupFamily(\"parameterGroupFamily\")\n\n        // the properties below are optional\n        .parameters(List.of(ParameterProperty.builder()\n                .parameterName(\"parameterName\")\n                .parameterValue(\"parameterValue\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterParameterGroupProps := &cfnClusterParameterGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tparameterGroupFamily: jsii.String(\"parameterGroupFamily\"),\n\n\t// the properties below are optional\n\tparameters: []interface{}{\n\t\t&parameterProperty{\n\t\t\tparameterName: jsii.String(\"parameterName\"),\n\t\t\tparameterValue: jsii.String(\"parameterValue\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterParameterGroupProps: redshift.CfnClusterParameterGroupProps = {\n  description: 'description',\n  parameterGroupFamily: 'parameterGroupFamily',\n\n  // the properties below are optional\n  parameters: [{\n    parameterName: 'parameterName',\n    parameterValue: 'parameterValue',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterParameterGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterParameterGroupProps: redshift.CfnClusterParameterGroupProps = {\n  description: 'description',\n  parameterGroupFamily: 'parameterGroupFamily',\n\n  // the properties below are optional\n  parameters: [{\n    parameterName: 'parameterName',\n    parameterValue: 'parameterValue',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "33345f6d2a4153cc90c8f94b392a8d331268eaaa5496af86683b08758e249e95"
    },
    "d699024e576bb96013138579c79082fffb5984a6d277d8345390d5f637d560b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_props = redshift.CfnClusterProps(\n    cluster_type=\"clusterType\",\n    db_name=\"dbName\",\n    master_username=\"masterUsername\",\n    master_user_password=\"masterUserPassword\",\n    node_type=\"nodeType\",\n\n    # the properties below are optional\n    allow_version_upgrade=False,\n    aqua_configuration_status=\"aquaConfigurationStatus\",\n    automated_snapshot_retention_period=123,\n    availability_zone=\"availabilityZone\",\n    availability_zone_relocation=False,\n    availability_zone_relocation_status=\"availabilityZoneRelocationStatus\",\n    classic=False,\n    cluster_identifier=\"clusterIdentifier\",\n    cluster_parameter_group_name=\"clusterParameterGroupName\",\n    cluster_security_groups=[\"clusterSecurityGroups\"],\n    cluster_subnet_group_name=\"clusterSubnetGroupName\",\n    cluster_version=\"clusterVersion\",\n    defer_maintenance=False,\n    defer_maintenance_duration=123,\n    defer_maintenance_end_time=\"deferMaintenanceEndTime\",\n    defer_maintenance_start_time=\"deferMaintenanceStartTime\",\n    destination_region=\"destinationRegion\",\n    elastic_ip=\"elasticIp\",\n    encrypted=False,\n    enhanced_vpc_routing=False,\n    hsm_client_certificate_identifier=\"hsmClientCertificateIdentifier\",\n    hsm_configuration_identifier=\"hsmConfigurationIdentifier\",\n    iam_roles=[\"iamRoles\"],\n    kms_key_id=\"kmsKeyId\",\n    logging_properties=redshift.CfnCluster.LoggingPropertiesProperty(\n        bucket_name=\"bucketName\",\n\n        # the properties below are optional\n        s3_key_prefix=\"s3KeyPrefix\"\n    ),\n    maintenance_track_name=\"maintenanceTrackName\",\n    manual_snapshot_retention_period=123,\n    number_of_nodes=123,\n    owner_account=\"ownerAccount\",\n    port=123,\n    preferred_maintenance_window=\"preferredMaintenanceWindow\",\n    publicly_accessible=False,\n    resource_action=\"resourceAction\",\n    revision_target=\"revisionTarget\",\n    rotate_encryption_key=False,\n    snapshot_cluster_identifier=\"snapshotClusterIdentifier\",\n    snapshot_copy_grant_name=\"snapshotCopyGrantName\",\n    snapshot_copy_manual=False,\n    snapshot_copy_retention_period=123,\n    snapshot_identifier=\"snapshotIdentifier\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterProps cfnClusterProps = new CfnClusterProps {\n    ClusterType = \"clusterType\",\n    DbName = \"dbName\",\n    MasterUsername = \"masterUsername\",\n    MasterUserPassword = \"masterUserPassword\",\n    NodeType = \"nodeType\",\n\n    // the properties below are optional\n    AllowVersionUpgrade = false,\n    AquaConfigurationStatus = \"aquaConfigurationStatus\",\n    AutomatedSnapshotRetentionPeriod = 123,\n    AvailabilityZone = \"availabilityZone\",\n    AvailabilityZoneRelocation = false,\n    AvailabilityZoneRelocationStatus = \"availabilityZoneRelocationStatus\",\n    Classic = false,\n    ClusterIdentifier = \"clusterIdentifier\",\n    ClusterParameterGroupName = \"clusterParameterGroupName\",\n    ClusterSecurityGroups = new [] { \"clusterSecurityGroups\" },\n    ClusterSubnetGroupName = \"clusterSubnetGroupName\",\n    ClusterVersion = \"clusterVersion\",\n    DeferMaintenance = false,\n    DeferMaintenanceDuration = 123,\n    DeferMaintenanceEndTime = \"deferMaintenanceEndTime\",\n    DeferMaintenanceStartTime = \"deferMaintenanceStartTime\",\n    DestinationRegion = \"destinationRegion\",\n    ElasticIp = \"elasticIp\",\n    Encrypted = false,\n    EnhancedVpcRouting = false,\n    HsmClientCertificateIdentifier = \"hsmClientCertificateIdentifier\",\n    HsmConfigurationIdentifier = \"hsmConfigurationIdentifier\",\n    IamRoles = new [] { \"iamRoles\" },\n    KmsKeyId = \"kmsKeyId\",\n    LoggingProperties = new LoggingPropertiesProperty {\n        BucketName = \"bucketName\",\n\n        // the properties below are optional\n        S3KeyPrefix = \"s3KeyPrefix\"\n    },\n    MaintenanceTrackName = \"maintenanceTrackName\",\n    ManualSnapshotRetentionPeriod = 123,\n    NumberOfNodes = 123,\n    OwnerAccount = \"ownerAccount\",\n    Port = 123,\n    PreferredMaintenanceWindow = \"preferredMaintenanceWindow\",\n    PubliclyAccessible = false,\n    ResourceAction = \"resourceAction\",\n    RevisionTarget = \"revisionTarget\",\n    RotateEncryptionKey = false,\n    SnapshotClusterIdentifier = \"snapshotClusterIdentifier\",\n    SnapshotCopyGrantName = \"snapshotCopyGrantName\",\n    SnapshotCopyManual = false,\n    SnapshotCopyRetentionPeriod = 123,\n    SnapshotIdentifier = \"snapshotIdentifier\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterProps cfnClusterProps = CfnClusterProps.builder()\n        .clusterType(\"clusterType\")\n        .dbName(\"dbName\")\n        .masterUsername(\"masterUsername\")\n        .masterUserPassword(\"masterUserPassword\")\n        .nodeType(\"nodeType\")\n\n        // the properties below are optional\n        .allowVersionUpgrade(false)\n        .aquaConfigurationStatus(\"aquaConfigurationStatus\")\n        .automatedSnapshotRetentionPeriod(123)\n        .availabilityZone(\"availabilityZone\")\n        .availabilityZoneRelocation(false)\n        .availabilityZoneRelocationStatus(\"availabilityZoneRelocationStatus\")\n        .classic(false)\n        .clusterIdentifier(\"clusterIdentifier\")\n        .clusterParameterGroupName(\"clusterParameterGroupName\")\n        .clusterSecurityGroups(List.of(\"clusterSecurityGroups\"))\n        .clusterSubnetGroupName(\"clusterSubnetGroupName\")\n        .clusterVersion(\"clusterVersion\")\n        .deferMaintenance(false)\n        .deferMaintenanceDuration(123)\n        .deferMaintenanceEndTime(\"deferMaintenanceEndTime\")\n        .deferMaintenanceStartTime(\"deferMaintenanceStartTime\")\n        .destinationRegion(\"destinationRegion\")\n        .elasticIp(\"elasticIp\")\n        .encrypted(false)\n        .enhancedVpcRouting(false)\n        .hsmClientCertificateIdentifier(\"hsmClientCertificateIdentifier\")\n        .hsmConfigurationIdentifier(\"hsmConfigurationIdentifier\")\n        .iamRoles(List.of(\"iamRoles\"))\n        .kmsKeyId(\"kmsKeyId\")\n        .loggingProperties(LoggingPropertiesProperty.builder()\n                .bucketName(\"bucketName\")\n\n                // the properties below are optional\n                .s3KeyPrefix(\"s3KeyPrefix\")\n                .build())\n        .maintenanceTrackName(\"maintenanceTrackName\")\n        .manualSnapshotRetentionPeriod(123)\n        .numberOfNodes(123)\n        .ownerAccount(\"ownerAccount\")\n        .port(123)\n        .preferredMaintenanceWindow(\"preferredMaintenanceWindow\")\n        .publiclyAccessible(false)\n        .resourceAction(\"resourceAction\")\n        .revisionTarget(\"revisionTarget\")\n        .rotateEncryptionKey(false)\n        .snapshotClusterIdentifier(\"snapshotClusterIdentifier\")\n        .snapshotCopyGrantName(\"snapshotCopyGrantName\")\n        .snapshotCopyManual(false)\n        .snapshotCopyRetentionPeriod(123)\n        .snapshotIdentifier(\"snapshotIdentifier\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterProps := &cfnClusterProps{\n\tclusterType: jsii.String(\"clusterType\"),\n\tdbName: jsii.String(\"dbName\"),\n\tmasterUsername: jsii.String(\"masterUsername\"),\n\tmasterUserPassword: jsii.String(\"masterUserPassword\"),\n\tnodeType: jsii.String(\"nodeType\"),\n\n\t// the properties below are optional\n\tallowVersionUpgrade: jsii.Boolean(false),\n\taquaConfigurationStatus: jsii.String(\"aquaConfigurationStatus\"),\n\tautomatedSnapshotRetentionPeriod: jsii.Number(123),\n\tavailabilityZone: jsii.String(\"availabilityZone\"),\n\tavailabilityZoneRelocation: jsii.Boolean(false),\n\tavailabilityZoneRelocationStatus: jsii.String(\"availabilityZoneRelocationStatus\"),\n\tclassic: jsii.Boolean(false),\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\tclusterParameterGroupName: jsii.String(\"clusterParameterGroupName\"),\n\tclusterSecurityGroups: []*string{\n\t\tjsii.String(\"clusterSecurityGroups\"),\n\t},\n\tclusterSubnetGroupName: jsii.String(\"clusterSubnetGroupName\"),\n\tclusterVersion: jsii.String(\"clusterVersion\"),\n\tdeferMaintenance: jsii.Boolean(false),\n\tdeferMaintenanceDuration: jsii.Number(123),\n\tdeferMaintenanceEndTime: jsii.String(\"deferMaintenanceEndTime\"),\n\tdeferMaintenanceStartTime: jsii.String(\"deferMaintenanceStartTime\"),\n\tdestinationRegion: jsii.String(\"destinationRegion\"),\n\telasticIp: jsii.String(\"elasticIp\"),\n\tencrypted: jsii.Boolean(false),\n\tenhancedVpcRouting: jsii.Boolean(false),\n\thsmClientCertificateIdentifier: jsii.String(\"hsmClientCertificateIdentifier\"),\n\thsmConfigurationIdentifier: jsii.String(\"hsmConfigurationIdentifier\"),\n\tiamRoles: []*string{\n\t\tjsii.String(\"iamRoles\"),\n\t},\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tloggingProperties: &loggingPropertiesProperty{\n\t\tbucketName: jsii.String(\"bucketName\"),\n\n\t\t// the properties below are optional\n\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t},\n\tmaintenanceTrackName: jsii.String(\"maintenanceTrackName\"),\n\tmanualSnapshotRetentionPeriod: jsii.Number(123),\n\tnumberOfNodes: jsii.Number(123),\n\townerAccount: jsii.String(\"ownerAccount\"),\n\tport: jsii.Number(123),\n\tpreferredMaintenanceWindow: jsii.String(\"preferredMaintenanceWindow\"),\n\tpubliclyAccessible: jsii.Boolean(false),\n\tresourceAction: jsii.String(\"resourceAction\"),\n\trevisionTarget: jsii.String(\"revisionTarget\"),\n\trotateEncryptionKey: jsii.Boolean(false),\n\tsnapshotClusterIdentifier: jsii.String(\"snapshotClusterIdentifier\"),\n\tsnapshotCopyGrantName: jsii.String(\"snapshotCopyGrantName\"),\n\tsnapshotCopyManual: jsii.Boolean(false),\n\tsnapshotCopyRetentionPeriod: jsii.Number(123),\n\tsnapshotIdentifier: jsii.String(\"snapshotIdentifier\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterProps: redshift.CfnClusterProps = {\n  clusterType: 'clusterType',\n  dbName: 'dbName',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  nodeType: 'nodeType',\n\n  // the properties below are optional\n  allowVersionUpgrade: false,\n  aquaConfigurationStatus: 'aquaConfigurationStatus',\n  automatedSnapshotRetentionPeriod: 123,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneRelocation: false,\n  availabilityZoneRelocationStatus: 'availabilityZoneRelocationStatus',\n  classic: false,\n  clusterIdentifier: 'clusterIdentifier',\n  clusterParameterGroupName: 'clusterParameterGroupName',\n  clusterSecurityGroups: ['clusterSecurityGroups'],\n  clusterSubnetGroupName: 'clusterSubnetGroupName',\n  clusterVersion: 'clusterVersion',\n  deferMaintenance: false,\n  deferMaintenanceDuration: 123,\n  deferMaintenanceEndTime: 'deferMaintenanceEndTime',\n  deferMaintenanceStartTime: 'deferMaintenanceStartTime',\n  destinationRegion: 'destinationRegion',\n  elasticIp: 'elasticIp',\n  encrypted: false,\n  enhancedVpcRouting: false,\n  hsmClientCertificateIdentifier: 'hsmClientCertificateIdentifier',\n  hsmConfigurationIdentifier: 'hsmConfigurationIdentifier',\n  iamRoles: ['iamRoles'],\n  kmsKeyId: 'kmsKeyId',\n  loggingProperties: {\n    bucketName: 'bucketName',\n\n    // the properties below are optional\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  maintenanceTrackName: 'maintenanceTrackName',\n  manualSnapshotRetentionPeriod: 123,\n  numberOfNodes: 123,\n  ownerAccount: 'ownerAccount',\n  port: 123,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  publiclyAccessible: false,\n  resourceAction: 'resourceAction',\n  revisionTarget: 'revisionTarget',\n  rotateEncryptionKey: false,\n  snapshotClusterIdentifier: 'snapshotClusterIdentifier',\n  snapshotCopyGrantName: 'snapshotCopyGrantName',\n  snapshotCopyManual: false,\n  snapshotCopyRetentionPeriod: 123,\n  snapshotIdentifier: 'snapshotIdentifier',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterProps: redshift.CfnClusterProps = {\n  clusterType: 'clusterType',\n  dbName: 'dbName',\n  masterUsername: 'masterUsername',\n  masterUserPassword: 'masterUserPassword',\n  nodeType: 'nodeType',\n\n  // the properties below are optional\n  allowVersionUpgrade: false,\n  aquaConfigurationStatus: 'aquaConfigurationStatus',\n  automatedSnapshotRetentionPeriod: 123,\n  availabilityZone: 'availabilityZone',\n  availabilityZoneRelocation: false,\n  availabilityZoneRelocationStatus: 'availabilityZoneRelocationStatus',\n  classic: false,\n  clusterIdentifier: 'clusterIdentifier',\n  clusterParameterGroupName: 'clusterParameterGroupName',\n  clusterSecurityGroups: ['clusterSecurityGroups'],\n  clusterSubnetGroupName: 'clusterSubnetGroupName',\n  clusterVersion: 'clusterVersion',\n  deferMaintenance: false,\n  deferMaintenanceDuration: 123,\n  deferMaintenanceEndTime: 'deferMaintenanceEndTime',\n  deferMaintenanceStartTime: 'deferMaintenanceStartTime',\n  destinationRegion: 'destinationRegion',\n  elasticIp: 'elasticIp',\n  encrypted: false,\n  enhancedVpcRouting: false,\n  hsmClientCertificateIdentifier: 'hsmClientCertificateIdentifier',\n  hsmConfigurationIdentifier: 'hsmConfigurationIdentifier',\n  iamRoles: ['iamRoles'],\n  kmsKeyId: 'kmsKeyId',\n  loggingProperties: {\n    bucketName: 'bucketName',\n\n    // the properties below are optional\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  maintenanceTrackName: 'maintenanceTrackName',\n  manualSnapshotRetentionPeriod: 123,\n  numberOfNodes: 123,\n  ownerAccount: 'ownerAccount',\n  port: 123,\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  publiclyAccessible: false,\n  resourceAction: 'resourceAction',\n  revisionTarget: 'revisionTarget',\n  rotateEncryptionKey: false,\n  snapshotClusterIdentifier: 'snapshotClusterIdentifier',\n  snapshotCopyGrantName: 'snapshotCopyGrantName',\n  snapshotCopyManual: false,\n  snapshotCopyRetentionPeriod: 123,\n  snapshotIdentifier: 'snapshotIdentifier',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 35,
        "75": 55,
        "91": 9,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 51,
        "290": 1
      },
      "fqnsFingerprint": "9f1646d671b1d991bf69829121af49ca455f336b55c99d27b293206bbe6a32ae"
    },
    "8dc7bbd30d55f574ece5eab3cb8ebe835eacd67a76ccf62a5da62b22514978dd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_security_group = redshift.CfnClusterSecurityGroup(self, \"MyCfnClusterSecurityGroup\",\n    description=\"description\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterSecurityGroup cfnClusterSecurityGroup = new CfnClusterSecurityGroup(this, \"MyCfnClusterSecurityGroup\", new CfnClusterSecurityGroupProps {\n    Description = \"description\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterSecurityGroup cfnClusterSecurityGroup = CfnClusterSecurityGroup.Builder.create(this, \"MyCfnClusterSecurityGroup\")\n        .description(\"description\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterSecurityGroup := redshift.NewCfnClusterSecurityGroup(this, jsii.String(\"MyCfnClusterSecurityGroup\"), &cfnClusterSecurityGroupProps{\n\tdescription: jsii.String(\"description\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterSecurityGroup = new redshift.CfnClusterSecurityGroup(this, 'MyCfnClusterSecurityGroup', {\n  description: 'description',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterSecurityGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterSecurityGroup",
        "@aws-cdk/aws-redshift.CfnClusterSecurityGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterSecurityGroup = new redshift.CfnClusterSecurityGroup(this, 'MyCfnClusterSecurityGroup', {\n  description: 'description',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e3f5d2fe8fb83ba6f46c3f4368cc41eac32bc07e5eee8e02ada20788c87da07f"
    },
    "d7fec2bf31a4b5c40ae648c3f90d6653533d91cedb1cccf4900cf9e951f79605": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_security_group_ingress = redshift.CfnClusterSecurityGroupIngress(self, \"MyCfnClusterSecurityGroupIngress\",\n    cluster_security_group_name=\"clusterSecurityGroupName\",\n\n    # the properties below are optional\n    cidrip=\"cidrip\",\n    ec2_security_group_name=\"ec2SecurityGroupName\",\n    ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterSecurityGroupIngress cfnClusterSecurityGroupIngress = new CfnClusterSecurityGroupIngress(this, \"MyCfnClusterSecurityGroupIngress\", new CfnClusterSecurityGroupIngressProps {\n    ClusterSecurityGroupName = \"clusterSecurityGroupName\",\n\n    // the properties below are optional\n    Cidrip = \"cidrip\",\n    Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n    Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterSecurityGroupIngress cfnClusterSecurityGroupIngress = CfnClusterSecurityGroupIngress.Builder.create(this, \"MyCfnClusterSecurityGroupIngress\")\n        .clusterSecurityGroupName(\"clusterSecurityGroupName\")\n\n        // the properties below are optional\n        .cidrip(\"cidrip\")\n        .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n        .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterSecurityGroupIngress := redshift.NewCfnClusterSecurityGroupIngress(this, jsii.String(\"MyCfnClusterSecurityGroupIngress\"), &cfnClusterSecurityGroupIngressProps{\n\tclusterSecurityGroupName: jsii.String(\"clusterSecurityGroupName\"),\n\n\t// the properties below are optional\n\tcidrip: jsii.String(\"cidrip\"),\n\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterSecurityGroupIngress = new redshift.CfnClusterSecurityGroupIngress(this, 'MyCfnClusterSecurityGroupIngress', {\n  clusterSecurityGroupName: 'clusterSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterSecurityGroupIngress"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterSecurityGroupIngress",
        "@aws-cdk/aws-redshift.CfnClusterSecurityGroupIngressProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterSecurityGroupIngress = new redshift.CfnClusterSecurityGroupIngress(this, 'MyCfnClusterSecurityGroupIngress', {\n  clusterSecurityGroupName: 'clusterSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "2c271e8153dac1d133d92517ee94bad2fc648a28311b31e0c7733f58e6970b85"
    },
    "8c2929899c5969bbe8386ea2e9dbbe2ba33147db2eb1c3e61f0b926ca56ab7a1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_security_group_ingress_props = redshift.CfnClusterSecurityGroupIngressProps(\n    cluster_security_group_name=\"clusterSecurityGroupName\",\n\n    # the properties below are optional\n    cidrip=\"cidrip\",\n    ec2_security_group_name=\"ec2SecurityGroupName\",\n    ec2_security_group_owner_id=\"ec2SecurityGroupOwnerId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterSecurityGroupIngressProps cfnClusterSecurityGroupIngressProps = new CfnClusterSecurityGroupIngressProps {\n    ClusterSecurityGroupName = \"clusterSecurityGroupName\",\n\n    // the properties below are optional\n    Cidrip = \"cidrip\",\n    Ec2SecurityGroupName = \"ec2SecurityGroupName\",\n    Ec2SecurityGroupOwnerId = \"ec2SecurityGroupOwnerId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterSecurityGroupIngressProps cfnClusterSecurityGroupIngressProps = CfnClusterSecurityGroupIngressProps.builder()\n        .clusterSecurityGroupName(\"clusterSecurityGroupName\")\n\n        // the properties below are optional\n        .cidrip(\"cidrip\")\n        .ec2SecurityGroupName(\"ec2SecurityGroupName\")\n        .ec2SecurityGroupOwnerId(\"ec2SecurityGroupOwnerId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterSecurityGroupIngressProps := &cfnClusterSecurityGroupIngressProps{\n\tclusterSecurityGroupName: jsii.String(\"clusterSecurityGroupName\"),\n\n\t// the properties below are optional\n\tcidrip: jsii.String(\"cidrip\"),\n\tec2SecurityGroupName: jsii.String(\"ec2SecurityGroupName\"),\n\tec2SecurityGroupOwnerId: jsii.String(\"ec2SecurityGroupOwnerId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterSecurityGroupIngressProps: redshift.CfnClusterSecurityGroupIngressProps = {\n  clusterSecurityGroupName: 'clusterSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterSecurityGroupIngressProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterSecurityGroupIngressProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterSecurityGroupIngressProps: redshift.CfnClusterSecurityGroupIngressProps = {\n  clusterSecurityGroupName: 'clusterSecurityGroupName',\n\n  // the properties below are optional\n  cidrip: 'cidrip',\n  ec2SecurityGroupName: 'ec2SecurityGroupName',\n  ec2SecurityGroupOwnerId: 'ec2SecurityGroupOwnerId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a4ce8a4abdb928f11630ffdea1e739ecf0f83919c9949073e11c37e87351853b"
    },
    "0a0d4b29f68da87059c0a12a3e5ec20447a14896032168280ec4f0e5d7c63670": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_security_group_props = redshift.CfnClusterSecurityGroupProps(\n    description=\"description\",\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterSecurityGroupProps cfnClusterSecurityGroupProps = new CfnClusterSecurityGroupProps {\n    Description = \"description\",\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterSecurityGroupProps cfnClusterSecurityGroupProps = CfnClusterSecurityGroupProps.builder()\n        .description(\"description\")\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterSecurityGroupProps := &cfnClusterSecurityGroupProps{\n\tdescription: jsii.String(\"description\"),\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterSecurityGroupProps: redshift.CfnClusterSecurityGroupProps = {\n  description: 'description',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterSecurityGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterSecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterSecurityGroupProps: redshift.CfnClusterSecurityGroupProps = {\n  description: 'description',\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a94c8658ccc24c68b57ceb93a93475be842ef6ffbfc5f62ce7d4f3c6cef51c3c"
    },
    "402c2b20b3e73b1b78f634512a7bb0839b68fed228ea479a024028ee3080a195": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_subnet_group = redshift.CfnClusterSubnetGroup(self, \"MyCfnClusterSubnetGroup\",\n    description=\"description\",\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterSubnetGroup cfnClusterSubnetGroup = new CfnClusterSubnetGroup(this, \"MyCfnClusterSubnetGroup\", new CfnClusterSubnetGroupProps {\n    Description = \"description\",\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterSubnetGroup cfnClusterSubnetGroup = CfnClusterSubnetGroup.Builder.create(this, \"MyCfnClusterSubnetGroup\")\n        .description(\"description\")\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterSubnetGroup := redshift.NewCfnClusterSubnetGroup(this, jsii.String(\"MyCfnClusterSubnetGroup\"), &cfnClusterSubnetGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterSubnetGroup = new redshift.CfnClusterSubnetGroup(this, 'MyCfnClusterSubnetGroup', {\n  description: 'description',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterSubnetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterSubnetGroup",
        "@aws-cdk/aws-redshift.CfnClusterSubnetGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterSubnetGroup = new redshift.CfnClusterSubnetGroup(this, 'MyCfnClusterSubnetGroup', {\n  description: 'description',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "82a1e74efb5bf0e74db4b9f44e707fd4320c39e3149962e75d4b24320fc4d592"
    },
    "685c911b6b91326332f43fb66cff78c920a4d25d40a7d5af847f3d47fb8829f2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_cluster_subnet_group_props = redshift.CfnClusterSubnetGroupProps(\n    description=\"description\",\n    subnet_ids=[\"subnetIds\"],\n\n    # the properties below are optional\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnClusterSubnetGroupProps cfnClusterSubnetGroupProps = new CfnClusterSubnetGroupProps {\n    Description = \"description\",\n    SubnetIds = new [] { \"subnetIds\" },\n\n    // the properties below are optional\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnClusterSubnetGroupProps cfnClusterSubnetGroupProps = CfnClusterSubnetGroupProps.builder()\n        .description(\"description\")\n        .subnetIds(List.of(\"subnetIds\"))\n\n        // the properties below are optional\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnClusterSubnetGroupProps := &cfnClusterSubnetGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tsubnetIds: []*string{\n\t\tjsii.String(\"subnetIds\"),\n\t},\n\n\t// the properties below are optional\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnClusterSubnetGroupProps: redshift.CfnClusterSubnetGroupProps = {\n  description: 'description',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnClusterSubnetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnClusterSubnetGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterSubnetGroupProps: redshift.CfnClusterSubnetGroupProps = {\n  description: 'description',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f297b2870a5aeac7fd19d66be565ddc62b9be8e6f4fa7008395af89097692098"
    },
    "e486b325e5d390c8502c673ee1e0e7af89fef8b4cd0a7be91cde9f549262a1fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_endpoint_access = redshift.CfnEndpointAccess(self, \"MyCfnEndpointAccess\",\n    endpoint_name=\"endpointName\",\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"],\n\n    # the properties below are optional\n    cluster_identifier=\"clusterIdentifier\",\n    resource_owner=\"resourceOwner\",\n    subnet_group_name=\"subnetGroupName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnEndpointAccess cfnEndpointAccess = new CfnEndpointAccess(this, \"MyCfnEndpointAccess\", new CfnEndpointAccessProps {\n    EndpointName = \"endpointName\",\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" },\n\n    // the properties below are optional\n    ClusterIdentifier = \"clusterIdentifier\",\n    ResourceOwner = \"resourceOwner\",\n    SubnetGroupName = \"subnetGroupName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnEndpointAccess cfnEndpointAccess = CfnEndpointAccess.Builder.create(this, \"MyCfnEndpointAccess\")\n        .endpointName(\"endpointName\")\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n\n        // the properties below are optional\n        .clusterIdentifier(\"clusterIdentifier\")\n        .resourceOwner(\"resourceOwner\")\n        .subnetGroupName(\"subnetGroupName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnEndpointAccess := redshift.NewCfnEndpointAccess(this, jsii.String(\"MyCfnEndpointAccess\"), &cfnEndpointAccessProps{\n\tendpointName: jsii.String(\"endpointName\"),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n\n\t// the properties below are optional\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\tresourceOwner: jsii.String(\"resourceOwner\"),\n\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnEndpointAccess = new redshift.CfnEndpointAccess(this, 'MyCfnEndpointAccess', {\n  endpointName: 'endpointName',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n\n  // the properties below are optional\n  clusterIdentifier: 'clusterIdentifier',\n  resourceOwner: 'resourceOwner',\n  subnetGroupName: 'subnetGroupName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEndpointAccess"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEndpointAccess",
        "@aws-cdk/aws-redshift.CfnEndpointAccessProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointAccess = new redshift.CfnEndpointAccess(this, 'MyCfnEndpointAccess', {\n  endpointName: 'endpointName',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n\n  // the properties below are optional\n  clusterIdentifier: 'clusterIdentifier',\n  resourceOwner: 'resourceOwner',\n  subnetGroupName: 'subnetGroupName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "3639eeac19244425f60c3a2320fca9f0d72086fbf034e6f4e65c3e0b0e85b66e"
    },
    "a4218076eeef5e3cc347204b67367eabbc815acc304da29b35f07157ed03f0b3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\nvpc_security_group_property = redshift.CfnEndpointAccess.VpcSecurityGroupProperty(\n    status=\"status\",\n    vpc_security_group_id=\"vpcSecurityGroupId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nVpcSecurityGroupProperty vpcSecurityGroupProperty = new VpcSecurityGroupProperty {\n    Status = \"status\",\n    VpcSecurityGroupId = \"vpcSecurityGroupId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nVpcSecurityGroupProperty vpcSecurityGroupProperty = VpcSecurityGroupProperty.builder()\n        .status(\"status\")\n        .vpcSecurityGroupId(\"vpcSecurityGroupId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nvpcSecurityGroupProperty := &vpcSecurityGroupProperty{\n\tstatus: jsii.String(\"status\"),\n\tvpcSecurityGroupId: jsii.String(\"vpcSecurityGroupId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst vpcSecurityGroupProperty: redshift.CfnEndpointAccess.VpcSecurityGroupProperty = {\n  status: 'status',\n  vpcSecurityGroupId: 'vpcSecurityGroupId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEndpointAccess.VpcSecurityGroupProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEndpointAccess.VpcSecurityGroupProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpcSecurityGroupProperty: redshift.CfnEndpointAccess.VpcSecurityGroupProperty = {\n  status: 'status',\n  vpcSecurityGroupId: 'vpcSecurityGroupId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7ab306aeeedb3f61155dc56fcafe64b502c25e7cea14b72faba381501ca981f6"
    },
    "a3fffadfa71ba4f4539f16f4059b9cd211b91fb7e9730ce1b0852bc65d68c759": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_endpoint_access_props = redshift.CfnEndpointAccessProps(\n    endpoint_name=\"endpointName\",\n    vpc_security_group_ids=[\"vpcSecurityGroupIds\"],\n\n    # the properties below are optional\n    cluster_identifier=\"clusterIdentifier\",\n    resource_owner=\"resourceOwner\",\n    subnet_group_name=\"subnetGroupName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnEndpointAccessProps cfnEndpointAccessProps = new CfnEndpointAccessProps {\n    EndpointName = \"endpointName\",\n    VpcSecurityGroupIds = new [] { \"vpcSecurityGroupIds\" },\n\n    // the properties below are optional\n    ClusterIdentifier = \"clusterIdentifier\",\n    ResourceOwner = \"resourceOwner\",\n    SubnetGroupName = \"subnetGroupName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnEndpointAccessProps cfnEndpointAccessProps = CfnEndpointAccessProps.builder()\n        .endpointName(\"endpointName\")\n        .vpcSecurityGroupIds(List.of(\"vpcSecurityGroupIds\"))\n\n        // the properties below are optional\n        .clusterIdentifier(\"clusterIdentifier\")\n        .resourceOwner(\"resourceOwner\")\n        .subnetGroupName(\"subnetGroupName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnEndpointAccessProps := &cfnEndpointAccessProps{\n\tendpointName: jsii.String(\"endpointName\"),\n\tvpcSecurityGroupIds: []*string{\n\t\tjsii.String(\"vpcSecurityGroupIds\"),\n\t},\n\n\t// the properties below are optional\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\tresourceOwner: jsii.String(\"resourceOwner\"),\n\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnEndpointAccessProps: redshift.CfnEndpointAccessProps = {\n  endpointName: 'endpointName',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n\n  // the properties below are optional\n  clusterIdentifier: 'clusterIdentifier',\n  resourceOwner: 'resourceOwner',\n  subnetGroupName: 'subnetGroupName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEndpointAccessProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEndpointAccessProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointAccessProps: redshift.CfnEndpointAccessProps = {\n  endpointName: 'endpointName',\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n\n  // the properties below are optional\n  clusterIdentifier: 'clusterIdentifier',\n  resourceOwner: 'resourceOwner',\n  subnetGroupName: 'subnetGroupName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fee5b8307ca269f59fc186aa04d61e3381b8fc044de216f86655316687c5bab7"
    },
    "7a4151753b12240f471562f1ac823555f3d7c5f90b258d74efb96d22cdb0761c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_endpoint_authorization = redshift.CfnEndpointAuthorization(self, \"MyCfnEndpointAuthorization\",\n    account=\"account\",\n    cluster_identifier=\"clusterIdentifier\",\n\n    # the properties below are optional\n    force=False,\n    vpc_ids=[\"vpcIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnEndpointAuthorization cfnEndpointAuthorization = new CfnEndpointAuthorization(this, \"MyCfnEndpointAuthorization\", new CfnEndpointAuthorizationProps {\n    Account = \"account\",\n    ClusterIdentifier = \"clusterIdentifier\",\n\n    // the properties below are optional\n    Force = false,\n    VpcIds = new [] { \"vpcIds\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnEndpointAuthorization cfnEndpointAuthorization = CfnEndpointAuthorization.Builder.create(this, \"MyCfnEndpointAuthorization\")\n        .account(\"account\")\n        .clusterIdentifier(\"clusterIdentifier\")\n\n        // the properties below are optional\n        .force(false)\n        .vpcIds(List.of(\"vpcIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnEndpointAuthorization := redshift.NewCfnEndpointAuthorization(this, jsii.String(\"MyCfnEndpointAuthorization\"), &cfnEndpointAuthorizationProps{\n\taccount: jsii.String(\"account\"),\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\n\t// the properties below are optional\n\tforce: jsii.Boolean(false),\n\tvpcIds: []*string{\n\t\tjsii.String(\"vpcIds\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnEndpointAuthorization = new redshift.CfnEndpointAuthorization(this, 'MyCfnEndpointAuthorization', {\n  account: 'account',\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  force: false,\n  vpcIds: ['vpcIds'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEndpointAuthorization"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEndpointAuthorization",
        "@aws-cdk/aws-redshift.CfnEndpointAuthorizationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointAuthorization = new redshift.CfnEndpointAuthorization(this, 'MyCfnEndpointAuthorization', {\n  account: 'account',\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  force: false,\n  vpcIds: ['vpcIds'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "91": 1,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "05b9ea83b5abaa0ef64e2c35e63ecaec9534876a9e7514def94d9f9a952ec818"
    },
    "25238fd720b6716fe8df7acb4bed4790a26e94ce97fce2bb1e7ff1f8fec4298c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_endpoint_authorization_props = redshift.CfnEndpointAuthorizationProps(\n    account=\"account\",\n    cluster_identifier=\"clusterIdentifier\",\n\n    # the properties below are optional\n    force=False,\n    vpc_ids=[\"vpcIds\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnEndpointAuthorizationProps cfnEndpointAuthorizationProps = new CfnEndpointAuthorizationProps {\n    Account = \"account\",\n    ClusterIdentifier = \"clusterIdentifier\",\n\n    // the properties below are optional\n    Force = false,\n    VpcIds = new [] { \"vpcIds\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnEndpointAuthorizationProps cfnEndpointAuthorizationProps = CfnEndpointAuthorizationProps.builder()\n        .account(\"account\")\n        .clusterIdentifier(\"clusterIdentifier\")\n\n        // the properties below are optional\n        .force(false)\n        .vpcIds(List.of(\"vpcIds\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnEndpointAuthorizationProps := &cfnEndpointAuthorizationProps{\n\taccount: jsii.String(\"account\"),\n\tclusterIdentifier: jsii.String(\"clusterIdentifier\"),\n\n\t// the properties below are optional\n\tforce: jsii.Boolean(false),\n\tvpcIds: []*string{\n\t\tjsii.String(\"vpcIds\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnEndpointAuthorizationProps: redshift.CfnEndpointAuthorizationProps = {\n  account: 'account',\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  force: false,\n  vpcIds: ['vpcIds'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEndpointAuthorizationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEndpointAuthorizationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointAuthorizationProps: redshift.CfnEndpointAuthorizationProps = {\n  account: 'account',\n  clusterIdentifier: 'clusterIdentifier',\n\n  // the properties below are optional\n  force: false,\n  vpcIds: ['vpcIds'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6228306e3b2f4d39212b5e3c58912ca56088a6fb914885266545d9453f403b6f"
    },
    "10a213a75047553e5b0037e949d685c1d231117f31f3ca67afa8dba6e4c72362": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_event_subscription = redshift.CfnEventSubscription(self, \"MyCfnEventSubscription\",\n    subscription_name=\"subscriptionName\",\n\n    # the properties below are optional\n    enabled=False,\n    event_categories=[\"eventCategories\"],\n    severity=\"severity\",\n    sns_topic_arn=\"snsTopicArn\",\n    source_ids=[\"sourceIds\"],\n    source_type=\"sourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnEventSubscription cfnEventSubscription = new CfnEventSubscription(this, \"MyCfnEventSubscription\", new CfnEventSubscriptionProps {\n    SubscriptionName = \"subscriptionName\",\n\n    // the properties below are optional\n    Enabled = false,\n    EventCategories = new [] { \"eventCategories\" },\n    Severity = \"severity\",\n    SnsTopicArn = \"snsTopicArn\",\n    SourceIds = new [] { \"sourceIds\" },\n    SourceType = \"sourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnEventSubscription cfnEventSubscription = CfnEventSubscription.Builder.create(this, \"MyCfnEventSubscription\")\n        .subscriptionName(\"subscriptionName\")\n\n        // the properties below are optional\n        .enabled(false)\n        .eventCategories(List.of(\"eventCategories\"))\n        .severity(\"severity\")\n        .snsTopicArn(\"snsTopicArn\")\n        .sourceIds(List.of(\"sourceIds\"))\n        .sourceType(\"sourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnEventSubscription := redshift.NewCfnEventSubscription(this, jsii.String(\"MyCfnEventSubscription\"), &cfnEventSubscriptionProps{\n\tsubscriptionName: jsii.String(\"subscriptionName\"),\n\n\t// the properties below are optional\n\tenabled: jsii.Boolean(false),\n\teventCategories: []*string{\n\t\tjsii.String(\"eventCategories\"),\n\t},\n\tseverity: jsii.String(\"severity\"),\n\tsnsTopicArn: jsii.String(\"snsTopicArn\"),\n\tsourceIds: []*string{\n\t\tjsii.String(\"sourceIds\"),\n\t},\n\tsourceType: jsii.String(\"sourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnEventSubscription = new redshift.CfnEventSubscription(this, 'MyCfnEventSubscription', {\n  subscriptionName: 'subscriptionName',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  severity: 'severity',\n  snsTopicArn: 'snsTopicArn',\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEventSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEventSubscription",
        "@aws-cdk/aws-redshift.CfnEventSubscriptionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventSubscription = new redshift.CfnEventSubscription(this, 'MyCfnEventSubscription', {\n  subscriptionName: 'subscriptionName',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  severity: 'severity',\n  snsTopicArn: 'snsTopicArn',\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 14,
        "91": 1,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "3c8bfb0a66dfdf062487115d2936bc4857a377a1fbe31d963c33a1600646bbd0"
    },
    "be9268f84fe14535e0986b7a2c86f325d24a4b10f5b4b374a660c34dfb450026": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncfn_event_subscription_props = redshift.CfnEventSubscriptionProps(\n    subscription_name=\"subscriptionName\",\n\n    # the properties below are optional\n    enabled=False,\n    event_categories=[\"eventCategories\"],\n    severity=\"severity\",\n    sns_topic_arn=\"snsTopicArn\",\n    source_ids=[\"sourceIds\"],\n    source_type=\"sourceType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nCfnEventSubscriptionProps cfnEventSubscriptionProps = new CfnEventSubscriptionProps {\n    SubscriptionName = \"subscriptionName\",\n\n    // the properties below are optional\n    Enabled = false,\n    EventCategories = new [] { \"eventCategories\" },\n    Severity = \"severity\",\n    SnsTopicArn = \"snsTopicArn\",\n    SourceIds = new [] { \"sourceIds\" },\n    SourceType = \"sourceType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nCfnEventSubscriptionProps cfnEventSubscriptionProps = CfnEventSubscriptionProps.builder()\n        .subscriptionName(\"subscriptionName\")\n\n        // the properties below are optional\n        .enabled(false)\n        .eventCategories(List.of(\"eventCategories\"))\n        .severity(\"severity\")\n        .snsTopicArn(\"snsTopicArn\")\n        .sourceIds(List.of(\"sourceIds\"))\n        .sourceType(\"sourceType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncfnEventSubscriptionProps := &cfnEventSubscriptionProps{\n\tsubscriptionName: jsii.String(\"subscriptionName\"),\n\n\t// the properties below are optional\n\tenabled: jsii.Boolean(false),\n\teventCategories: []*string{\n\t\tjsii.String(\"eventCategories\"),\n\t},\n\tseverity: jsii.String(\"severity\"),\n\tsnsTopicArn: jsii.String(\"snsTopicArn\"),\n\tsourceIds: []*string{\n\t\tjsii.String(\"sourceIds\"),\n\t},\n\tsourceType: jsii.String(\"sourceType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst cfnEventSubscriptionProps: redshift.CfnEventSubscriptionProps = {\n  subscriptionName: 'subscriptionName',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  severity: 'severity',\n  snsTopicArn: 'snsTopicArn',\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnEventSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnEventSubscriptionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEventSubscriptionProps: redshift.CfnEventSubscriptionProps = {\n  subscriptionName: 'subscriptionName',\n\n  // the properties below are optional\n  enabled: false,\n  eventCategories: ['eventCategories'],\n  severity: 'severity',\n  snsTopicArn: 'snsTopicArn',\n  sourceIds: ['sourceIds'],\n  sourceType: 'sourceType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 14,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "4c36190fbed83f73bc735edceb559b78cff8702585cbf17999f4f52d7c49846c"
    },
    "1fc95a0a2371f4baef347bfa25445f4b2526a3320c3dc823d53dbdcc080ab3a3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\n# target_action: Any\n\ncfn_scheduled_action = redshift.CfnScheduledAction(self, \"MyCfnScheduledAction\",\n    scheduled_action_name=\"scheduledActionName\",\n\n    # the properties below are optional\n    enable=False,\n    end_time=\"endTime\",\n    iam_role=\"iamRole\",\n    schedule=\"schedule\",\n    scheduled_action_description=\"scheduledActionDescription\",\n    start_time=\"startTime\",\n    target_action=target_action\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nvar targetAction;\n\nCfnScheduledAction cfnScheduledAction = new CfnScheduledAction(this, \"MyCfnScheduledAction\", new CfnScheduledActionProps {\n    ScheduledActionName = \"scheduledActionName\",\n\n    // the properties below are optional\n    Enable = false,\n    EndTime = \"endTime\",\n    IamRole = \"iamRole\",\n    Schedule = \"schedule\",\n    ScheduledActionDescription = \"scheduledActionDescription\",\n    StartTime = \"startTime\",\n    TargetAction = targetAction\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nObject targetAction;\n\nCfnScheduledAction cfnScheduledAction = CfnScheduledAction.Builder.create(this, \"MyCfnScheduledAction\")\n        .scheduledActionName(\"scheduledActionName\")\n\n        // the properties below are optional\n        .enable(false)\n        .endTime(\"endTime\")\n        .iamRole(\"iamRole\")\n        .schedule(\"schedule\")\n        .scheduledActionDescription(\"scheduledActionDescription\")\n        .startTime(\"startTime\")\n        .targetAction(targetAction)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nvar targetAction interface{}\n\ncfnScheduledAction := redshift.NewCfnScheduledAction(this, jsii.String(\"MyCfnScheduledAction\"), &cfnScheduledActionProps{\n\tscheduledActionName: jsii.String(\"scheduledActionName\"),\n\n\t// the properties below are optional\n\tenable: jsii.Boolean(false),\n\tendTime: jsii.String(\"endTime\"),\n\tiamRole: jsii.String(\"iamRole\"),\n\tschedule: jsii.String(\"schedule\"),\n\tscheduledActionDescription: jsii.String(\"scheduledActionDescription\"),\n\tstartTime: jsii.String(\"startTime\"),\n\ttargetAction: targetAction,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const targetAction: any;\nconst cfnScheduledAction = new redshift.CfnScheduledAction(this, 'MyCfnScheduledAction', {\n  scheduledActionName: 'scheduledActionName',\n\n  // the properties below are optional\n  enable: false,\n  endTime: 'endTime',\n  iamRole: 'iamRole',\n  schedule: 'schedule',\n  scheduledActionDescription: 'scheduledActionDescription',\n  startTime: 'startTime',\n  targetAction: targetAction,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnScheduledAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnScheduledAction",
        "@aws-cdk/aws-redshift.CfnScheduledActionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const targetAction: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnScheduledAction = new redshift.CfnScheduledAction(this, 'MyCfnScheduledAction', {\n  scheduledActionName: 'scheduledActionName',\n\n  // the properties below are optional\n  enable: false,\n  endTime: 'endTime',\n  iamRole: 'iamRole',\n  schedule: 'schedule',\n  scheduledActionDescription: 'scheduledActionDescription',\n  startTime: 'startTime',\n  targetAction: targetAction,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "91": 1,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e4790baf5d4ef7dbe618f4cd1aa6d87257e77ee3409df2ba25aa46181b5de995"
    },
    "7706ee0c1c143620c2f499a7642ddd612e21e402fd57494a4addf155df9f9e56": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\n# target_action: Any\n\ncfn_scheduled_action_props = redshift.CfnScheduledActionProps(\n    scheduled_action_name=\"scheduledActionName\",\n\n    # the properties below are optional\n    enable=False,\n    end_time=\"endTime\",\n    iam_role=\"iamRole\",\n    schedule=\"schedule\",\n    scheduled_action_description=\"scheduledActionDescription\",\n    start_time=\"startTime\",\n    target_action=target_action\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nvar targetAction;\n\nCfnScheduledActionProps cfnScheduledActionProps = new CfnScheduledActionProps {\n    ScheduledActionName = \"scheduledActionName\",\n\n    // the properties below are optional\n    Enable = false,\n    EndTime = \"endTime\",\n    IamRole = \"iamRole\",\n    Schedule = \"schedule\",\n    ScheduledActionDescription = \"scheduledActionDescription\",\n    StartTime = \"startTime\",\n    TargetAction = targetAction\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nObject targetAction;\n\nCfnScheduledActionProps cfnScheduledActionProps = CfnScheduledActionProps.builder()\n        .scheduledActionName(\"scheduledActionName\")\n\n        // the properties below are optional\n        .enable(false)\n        .endTime(\"endTime\")\n        .iamRole(\"iamRole\")\n        .schedule(\"schedule\")\n        .scheduledActionDescription(\"scheduledActionDescription\")\n        .startTime(\"startTime\")\n        .targetAction(targetAction)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nvar targetAction interface{}\n\ncfnScheduledActionProps := &cfnScheduledActionProps{\n\tscheduledActionName: jsii.String(\"scheduledActionName\"),\n\n\t// the properties below are optional\n\tenable: jsii.Boolean(false),\n\tendTime: jsii.String(\"endTime\"),\n\tiamRole: jsii.String(\"iamRole\"),\n\tschedule: jsii.String(\"schedule\"),\n\tscheduledActionDescription: jsii.String(\"scheduledActionDescription\"),\n\tstartTime: jsii.String(\"startTime\"),\n\ttargetAction: targetAction,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const targetAction: any;\nconst cfnScheduledActionProps: redshift.CfnScheduledActionProps = {\n  scheduledActionName: 'scheduledActionName',\n\n  // the properties below are optional\n  enable: false,\n  endTime: 'endTime',\n  iamRole: 'iamRole',\n  schedule: 'schedule',\n  scheduledActionDescription: 'scheduledActionDescription',\n  startTime: 'startTime',\n  targetAction: targetAction,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.CfnScheduledActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.CfnScheduledActionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const targetAction: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnScheduledActionProps: redshift.CfnScheduledActionProps = {\n  scheduledActionName: 'scheduledActionName',\n\n  // the properties below are optional\n  enable: false,\n  endTime: 'endTime',\n  iamRole: 'iamRole',\n  schedule: 'schedule',\n  scheduledActionDescription: 'scheduledActionDescription',\n  startTime: 'startTime',\n  targetAction: targetAction,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "91": 1,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "66e87ac000958ec55902ec37210f324fee8edb50705b9b8ba12663e92cdfcd8c"
    },
    "97c2762c8a60c59c87798925438bd955d0aae015e3e956e61a5270633deec621": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"Vpc\")\ncluster = Cluster(self, \"Redshift\",\n    master_user=Login(\n        master_username=\"admin\"\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"Vpc\");\nCluster cluster = new Cluster(this, \"Redshift\", new ClusterProps {\n    MasterUser = new Login {\n        MasterUsername = \"admin\"\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"Vpc\");\nCluster cluster = Cluster.Builder.create(this, \"Redshift\")\n        .masterUser(Login.builder()\n                .masterUsername(\"admin\")\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\ncluster := awscdkawsredshift.NewCluster(this, jsii.String(\"Redshift\"), &clusterProps{\n\tmasterUser: &login{\n\t\tmasterUsername: jsii.String(\"admin\"),\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst cluster = new Cluster(this, 'Redshift', {\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.Cluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-redshift.Cluster",
        "@aws-cdk/aws-redshift.ClusterProps",
        "@aws-cdk/aws-redshift.Login",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Cluster } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst cluster = new Cluster(this, 'Redshift', {\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7ccd4d932721cefb97417307affa666825bbf34f24e53fc97a95d48463f02975"
    },
    "d08f84f5b3bfd6ec8dba10d1b4036c779a23d4959c96293e979190bb1fa3b66e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_redshift as redshift\n\n# security_group: ec2.SecurityGroup\n\ncluster_attributes = redshift.ClusterAttributes(\n    cluster_endpoint_address=\"clusterEndpointAddress\",\n    cluster_endpoint_port=123,\n    cluster_name=\"clusterName\",\n\n    # the properties below are optional\n    security_groups=[security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.Redshift;\n\nSecurityGroup securityGroup;\n\nClusterAttributes clusterAttributes = new ClusterAttributes {\n    ClusterEndpointAddress = \"clusterEndpointAddress\",\n    ClusterEndpointPort = 123,\n    ClusterName = \"clusterName\",\n\n    // the properties below are optional\n    SecurityGroups = new [] { securityGroup }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.redshift.*;\n\nSecurityGroup securityGroup;\n\nClusterAttributes clusterAttributes = ClusterAttributes.builder()\n        .clusterEndpointAddress(\"clusterEndpointAddress\")\n        .clusterEndpointPort(123)\n        .clusterName(\"clusterName\")\n\n        // the properties below are optional\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nvar securityGroup securityGroup\n\nclusterAttributes := &clusterAttributes{\n\tclusterEndpointAddress: jsii.String(\"clusterEndpointAddress\"),\n\tclusterEndpointPort: jsii.Number(123),\n\tclusterName: jsii.String(\"clusterName\"),\n\n\t// the properties below are optional\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst clusterAttributes: redshift.ClusterAttributes = {\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  clusterEndpointPort: 123,\n  clusterName: 'clusterName',\n\n  // the properties below are optional\n  securityGroups: [securityGroup],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.ClusterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.ClusterAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterAttributes: redshift.ClusterAttributes = {\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  clusterEndpointPort: 123,\n  clusterName: 'clusterName',\n\n  // the properties below are optional\n  securityGroups: [securityGroup],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3d2d8dff70f084805af14991c9e43691676ff5918d572d2f6a99191de694b721"
    },
    "376ebe41631d5ae3648e45fbc1d3e2796e9d7782e685c23de17c3fe028bc771e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncluster_parameter_group = redshift.ClusterParameterGroup(self, \"MyClusterParameterGroup\",\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nClusterParameterGroup clusterParameterGroup = new ClusterParameterGroup(this, \"MyClusterParameterGroup\", new ClusterParameterGroupProps {\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n\n    // the properties below are optional\n    Description = \"description\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nClusterParameterGroup clusterParameterGroup = ClusterParameterGroup.Builder.create(this, \"MyClusterParameterGroup\")\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nclusterParameterGroup := redshift.NewClusterParameterGroup(this, jsii.String(\"MyClusterParameterGroup\"), &clusterParameterGroupProps{\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst clusterParameterGroup = new redshift.ClusterParameterGroup(this, 'MyClusterParameterGroup', {\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  description: 'description',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.ClusterParameterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.ClusterParameterGroup",
        "@aws-cdk/aws-redshift.ClusterParameterGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterParameterGroup = new redshift.ClusterParameterGroup(this, 'MyClusterParameterGroup', {\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  description: 'description',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3eea99b12809296b6443575c0fbbf3063f818723b630587c63d47fff36ce315"
    },
    "1b2a19c1fc45328c507fc727558b4093b6375751792b5753d3f0a0710cfd2726": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncluster_parameter_group_props = redshift.ClusterParameterGroupProps(\n    parameters={\n        \"parameters_key\": \"parameters\"\n    },\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nClusterParameterGroupProps clusterParameterGroupProps = new ClusterParameterGroupProps {\n    Parameters = new Dictionary<string, string> {\n        { \"parametersKey\", \"parameters\" }\n    },\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nClusterParameterGroupProps clusterParameterGroupProps = ClusterParameterGroupProps.builder()\n        .parameters(Map.of(\n                \"parametersKey\", \"parameters\"))\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nclusterParameterGroupProps := &clusterParameterGroupProps{\n\tparameters: map[string]*string{\n\t\t\"parametersKey\": jsii.String(\"parameters\"),\n\t},\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst clusterParameterGroupProps: redshift.ClusterParameterGroupProps = {\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.ClusterParameterGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.ClusterParameterGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterParameterGroupProps: redshift.ClusterParameterGroupProps = {\n  parameters: {\n    parametersKey: 'parameters',\n  },\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5a7451820f309294ed31cf56a41e6d8c7043bd018eae5f6b32d89dd14903c586"
    },
    "be0ca54073530155bbde929dc0fc798aac377a39204c5e131ce1fda7a34d4e8d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"Vpc\")\ncluster = Cluster(self, \"Redshift\",\n    master_user=Login(\n        master_username=\"admin\"\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"Vpc\");\nCluster cluster = new Cluster(this, \"Redshift\", new ClusterProps {\n    MasterUser = new Login {\n        MasterUsername = \"admin\"\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"Vpc\");\nCluster cluster = Cluster.Builder.create(this, \"Redshift\")\n        .masterUser(Login.builder()\n                .masterUsername(\"admin\")\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"Vpc\"))\ncluster := awscdkawsredshift.NewCluster(this, jsii.String(\"Redshift\"), &clusterProps{\n\tmasterUser: &login{\n\t\tmasterUsername: jsii.String(\"admin\"),\n\t},\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst cluster = new Cluster(this, 'Redshift', {\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.ClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-redshift.Cluster",
        "@aws-cdk/aws-redshift.ClusterProps",
        "@aws-cdk/aws-redshift.Login",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Cluster } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'Vpc');\nconst cluster = new Cluster(this, 'Redshift', {\n  masterUser: {\n    masterUsername: 'admin',\n  },\n  vpc\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7ccd4d932721cefb97417307affa666825bbf34f24e53fc97a95d48463f02975"
    },
    "9b0e25737471a6ed1d93b467c55d9b2fcc18c577487ee085dea8646e587a706e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_redshift as redshift\nimport aws_cdk.core as cdk\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\ncluster_subnet_group = redshift.ClusterSubnetGroup(self, \"MyClusterSubnetGroup\",\n    description=\"description\",\n    vpc=vpc,\n\n    # the properties below are optional\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.Redshift;\nusing Amazon.CDK;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nClusterSubnetGroup clusterSubnetGroup = new ClusterSubnetGroup(this, \"MyClusterSubnetGroup\", new ClusterSubnetGroupProps {\n    Description = \"description\",\n    Vpc = vpc,\n\n    // the properties below are optional\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.redshift.*;\nimport software.amazon.awscdk.core.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nClusterSubnetGroup clusterSubnetGroup = ClusterSubnetGroup.Builder.create(this, \"MyClusterSubnetGroup\")\n        .description(\"description\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\n\nclusterSubnetGroup := redshift.NewClusterSubnetGroup(this, jsii.String(\"MyClusterSubnetGroup\"), &clusterSubnetGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst clusterSubnetGroup = new redshift.ClusterSubnetGroup(this, 'MyClusterSubnetGroup', {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.ClusterSubnetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-redshift.ClusterSubnetGroup",
        "@aws-cdk/aws-redshift.ClusterSubnetGroupProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterSubnetGroup = new redshift.ClusterSubnetGroup(this, 'MyClusterSubnetGroup', {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 35,
        "91": 1,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "b4a1feef59e203c0fbb4942a9efe79935fc2bac7c13a71cbe87a6e61b0bc41ce"
    },
    "5aac936864d7198c8240048b62bb906bd66f46b650a5f00fdb3d3a67b522fbb7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_redshift as redshift\nimport aws_cdk.core as cdk\n\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\ncluster_subnet_group_props = redshift.ClusterSubnetGroupProps(\n    description=\"description\",\n    vpc=vpc,\n\n    # the properties below are optional\n    removal_policy=cdk.RemovalPolicy.DESTROY,\n    vpc_subnets=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.Redshift;\nusing Amazon.CDK;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nClusterSubnetGroupProps clusterSubnetGroupProps = new ClusterSubnetGroupProps {\n    Description = \"description\",\n    Vpc = vpc,\n\n    // the properties below are optional\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    VpcSubnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.redshift.*;\nimport software.amazon.awscdk.core.*;\n\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nClusterSubnetGroupProps clusterSubnetGroupProps = ClusterSubnetGroupProps.builder()\n        .description(\"description\")\n        .vpc(vpc)\n\n        // the properties below are optional\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .vpcSubnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar subnet subnet\nvar subnetFilter subnetFilter\nvar vpc vpc\n\nclusterSubnetGroupProps := &clusterSubnetGroupProps{\n\tdescription: jsii.String(\"description\"),\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\tvpcSubnets: &subnetSelection{\n\t\tavailabilityZones: []*string{\n\t\t\tjsii.String(\"availabilityZones\"),\n\t\t},\n\t\tonePerAz: jsii.Boolean(false),\n\t\tsubnetFilters: []*subnetFilter{\n\t\t\tsubnetFilter,\n\t\t},\n\t\tsubnetGroupName: jsii.String(\"subnetGroupName\"),\n\t\tsubnetName: jsii.String(\"subnetName\"),\n\t\tsubnets: []iSubnet{\n\t\t\tsubnet,\n\t\t},\n\t\tsubnetType: ec2.subnetType_ISOLATED,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst clusterSubnetGroupProps: redshift.ClusterSubnetGroupProps = {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.ClusterSubnetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-redshift.ClusterSubnetGroupProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as redshift from '@aws-cdk/aws-redshift';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterSubnetGroupProps: redshift.ClusterSubnetGroupProps = {\n  description: 'description',\n  vpc: vpc,\n\n  // the properties below are optional\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 35,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 2,
        "194": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "6a1a94b1b4e1d0e5ccba8a091dd2d3fefa54ebcfa52431bae08869f4b90da7d8"
    },
    "e890d6251e1ae131d2291fc2bf6f1e778e60528a9994c7a79a566b5dbf2e6d40": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\ncolumn = redshift.Column(\n    data_type=\"dataType\",\n    name=\"name\",\n\n    # the properties below are optional\n    dist_key=False,\n    sort_key=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nColumn column = new Column {\n    DataType = \"dataType\",\n    Name = \"name\",\n\n    // the properties below are optional\n    DistKey = false,\n    SortKey = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nColumn column = Column.builder()\n        .dataType(\"dataType\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .distKey(false)\n        .sortKey(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\ncolumn := &column{\n\tdataType: jsii.String(\"dataType\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdistKey: jsii.Boolean(false),\n\tsortKey: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst column: redshift.Column = {\n  dataType: 'dataType',\n  name: 'name',\n\n  // the properties below are optional\n  distKey: false,\n  sortKey: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.Column"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.Column"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst column: redshift.Column = {\n  dataType: 'dataType',\n  name: 'name',\n\n  // the properties below are optional\n  distKey: false,\n  sortKey: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d472988354d80eaed79aaf43a42a21ddea1550bab1a041a0eed68ca5b7f492ab"
    },
    "b0654b374398fba438454b5badc7e54726becf2d2e03e8bff3c107728d45c822": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# cluster: redshift.Cluster\n# secret: secretsmanager.Secret\n\ndatabase_options = redshift.DatabaseOptions(\n    cluster=cluster,\n    database_name=\"databaseName\",\n\n    # the properties below are optional\n    admin_user=secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\nusing Amazon.CDK.AWS.SecretsManager;\n\nCluster cluster;\nSecret secret;\n\nDatabaseOptions databaseOptions = new DatabaseOptions {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n\n    // the properties below are optional\n    AdminUser = secret\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nCluster cluster;\nSecret secret;\n\nDatabaseOptions databaseOptions = DatabaseOptions.builder()\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n\n        // the properties below are optional\n        .adminUser(secret)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\nimport secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\n\nvar cluster cluster\nvar secret secret\n\ndatabaseOptions := &databaseOptions{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\n\t// the properties below are optional\n\tadminUser: secret,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const cluster: redshift.Cluster;\ndeclare const secret: secretsmanager.Secret;\nconst databaseOptions: redshift.DatabaseOptions = {\n  cluster: cluster,\n  databaseName: 'databaseName',\n\n  // the properties below are optional\n  adminUser: secret,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.DatabaseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.DatabaseOptions",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const cluster: redshift.Cluster;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseOptions: redshift.DatabaseOptions = {\n  cluster: cluster,\n  databaseName: 'databaseName',\n\n  // the properties below are optional\n  adminUser: secret,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c5dc64bc59c60d636b892b639d3739d691553d8e3d433799d6e7e6c4e05ac30b"
    },
    "9e9dbbc30521ea7b8c554ef076e3ace00404774a97585ff0f617be5af634d5be": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_redshift as redshift\n\n# key: kms.Key\n\ndatabase_secret = redshift.DatabaseSecret(self, \"MyDatabaseSecret\",\n    username=\"username\",\n\n    # the properties below are optional\n    encryption_key=key\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Redshift;\n\nKey key;\n\nDatabaseSecret databaseSecret = new DatabaseSecret(this, \"MyDatabaseSecret\", new DatabaseSecretProps {\n    Username = \"username\",\n\n    // the properties below are optional\n    EncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.redshift.*;\n\nKey key;\n\nDatabaseSecret databaseSecret = DatabaseSecret.Builder.create(this, \"MyDatabaseSecret\")\n        .username(\"username\")\n\n        // the properties below are optional\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport kms \"github.com/aws-samples/dummy/awscdkawskms\"\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nvar key key\n\ndatabaseSecret := redshift.NewDatabaseSecret(this, jsii.String(\"MyDatabaseSecret\"), &databaseSecretProps{\n\tusername: jsii.String(\"username\"),\n\n\t// the properties below are optional\n\tencryptionKey: key,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const key: kms.Key;\nconst databaseSecret = new redshift.DatabaseSecret(this, 'MyDatabaseSecret', {\n  username: 'username',\n\n  // the properties below are optional\n  encryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.DatabaseSecret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-redshift.DatabaseSecret",
        "@aws-cdk/aws-redshift.DatabaseSecretProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseSecret = new redshift.DatabaseSecret(this, 'MyDatabaseSecret', {\n  username: 'username',\n\n  // the properties below are optional\n  encryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "81a7a141de98f88939ff0862c557e37877c58d1029f59e267c1494fd181b2042"
    },
    "6b2d73a396e8198164c8a3441f7a1bbe95a1c5d001bdbb67d4218bee3585a195": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_redshift as redshift\n\n# key: kms.Key\n\ndatabase_secret_props = redshift.DatabaseSecretProps(\n    username=\"username\",\n\n    # the properties below are optional\n    encryption_key=key\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Redshift;\n\nKey key;\n\nDatabaseSecretProps databaseSecretProps = new DatabaseSecretProps {\n    Username = \"username\",\n\n    // the properties below are optional\n    EncryptionKey = key\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.redshift.*;\n\nKey key;\n\nDatabaseSecretProps databaseSecretProps = DatabaseSecretProps.builder()\n        .username(\"username\")\n\n        // the properties below are optional\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport kms \"github.com/aws-samples/dummy/awscdkawskms\"\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nvar key key\n\ndatabaseSecretProps := &databaseSecretProps{\n\tusername: jsii.String(\"username\"),\n\n\t// the properties below are optional\n\tencryptionKey: key,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const key: kms.Key;\nconst databaseSecretProps: redshift.DatabaseSecretProps = {\n  username: 'username',\n\n  // the properties below are optional\n  encryptionKey: key,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.DatabaseSecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-redshift.DatabaseSecretProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as redshift from '@aws-cdk/aws-redshift';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst databaseSecretProps: redshift.DatabaseSecretProps = {\n  username: 'username',\n\n  // the properties below are optional\n  encryptionKey: key,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "536197c2d43a93b170172b5e0dd63d33471d3d2aca7542b7637d0791bbd7b20a"
    },
    "6975ba56c7350403703c8c916cc90bd03f4342203ba88a064757cdb2acb819ae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_redshift as redshift\n\nendpoint = redshift.Endpoint(\"address\", 123)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Redshift;\n\nEndpoint endpoint = new Endpoint(\"address\", 123);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.redshift.*;\n\nEndpoint endpoint = new Endpoint(\"address\", 123);",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport redshift \"github.com/aws-samples/dummy/awscdkawsredshift\"\n\nendpoint := redshift.NewEndpoint(jsii.String(\"address\"), jsii.Number(123))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\nconst endpoint = new redshift.Endpoint('address', 123);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.Endpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-redshift.Endpoint"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as redshift from '@aws-cdk/aws-redshift';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpoint = new redshift.Endpoint('address', 123);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a2e5491e5ae93eadf2d616984beed463fea453228829cc1cc6626831a71f8981"
    },
    "fc382d26bee8c55ad3c2a10e0e21df4bfb335c62f6701713f26499c97da0264b": {
      "translations": {
        "python": {
          "source": "user = User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ncluster.add_rotation_multi_user(\"MultiUserRotation\",\n    secret=user.secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ncluster.AddRotationMultiUser(\"MultiUserRotation\", new RotationMultiUserOptions {\n    Secret = user.Secret\n});",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\ncluster.addRotationMultiUser(\"MultiUserRotation\", RotationMultiUserOptions.builder()\n        .secret(user.getSecret())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "user := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ncluster.addRotationMultiUser(jsii.String(\"MultiUserRotation\"), &rotationMultiUserOptions{\n\tsecret: user.secret,\n})",
          "version": "1"
        },
        "$": {
          "source": "\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.Login"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#addRotationMultiUser",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.RotationMultiUserOptions",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.User#secret",
        "@aws-cdk/aws-redshift.UserProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "310c4f872f1180a1518ae34083adf5238be9070ab7e629791e315e8215265b5e"
    },
    "444080bf66fa2e65af0030f78eba0f3c21c74944d4c9eb68a32297b3b5e2d719": {
      "translations": {
        "python": {
          "source": "user = User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ncluster.add_rotation_multi_user(\"MultiUserRotation\",\n    secret=user.secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ncluster.AddRotationMultiUser(\"MultiUserRotation\", new RotationMultiUserOptions {\n    Secret = user.Secret\n});",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\ncluster.addRotationMultiUser(\"MultiUserRotation\", RotationMultiUserOptions.builder()\n        .secret(user.getSecret())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "user := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ncluster.addRotationMultiUser(jsii.String(\"MultiUserRotation\"), &rotationMultiUserOptions{\n\tsecret: user.secret,\n})",
          "version": "1"
        },
        "$": {
          "source": "\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.RotationMultiUserOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#addRotationMultiUser",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.RotationMultiUserOptions",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.User#secret",
        "@aws-cdk/aws-redshift.UserProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "310c4f872f1180a1518ae34083adf5238be9070ab7e629791e315e8215265b5e"
    },
    "8775c20b8fee2e544e454d4025bf48fd7befa57cf54141a08d9fbc53075e8928": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\", dist_key=True), Column(name=\"col2\", data_type=\"float\")\n    ],\n    cluster=cluster,\n    database_name=\"databaseName\",\n    dist_style=TableDistStyle.KEY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\", DistKey = true }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n    DistStyle = TableDistStyle.KEY\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").distKey(true).build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .distStyle(TableDistStyle.KEY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t\tdistKey: jsii.Boolean(true),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdistStyle: *awscdkawsredshift.TableDistStyle_KEY,\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.Table"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableDistStyle",
        "@aws-cdk/aws-redshift.TableDistStyle#KEY",
        "@aws-cdk/aws-redshift.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 9
      },
      "fqnsFingerprint": "07c674922559092dcd6aa380a2a95b5bf75336a05831b7421b82cff5b4275e8c"
    },
    "4b4cdd2a749e4ce5ac2d0996c9082cc2eb2cde0cc5c1d88a34f7b30ec3543fba": {
      "translations": {
        "python": {
          "source": "database_name = \"databaseName\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = User(self, \"User\",\n    username=username,\n    cluster=cluster,\n    database_name=database_name\n)\ntable = Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=database_name\n)\ntable.grant(user, TableAction.INSERT)",
          "version": "2"
        },
        "csharp": {
          "source": "string databaseName = \"databaseName\";\nstring username = \"myuser\";\nstring tableName = \"mytable\";\n\nUser user = new User(this, \"User\", new UserProps {\n    Username = username,\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\nTable table = new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\ntable.Grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "java": {
          "source": "String databaseName = \"databaseName\";\nString username = \"myuser\";\nString tableName = \"mytable\";\n\nUser user = User.Builder.create(this, \"User\")\n        .username(username)\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build();\nTable table = Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build();\ntable.grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "go": {
          "source": "databaseName := \"databaseName\"\nusername := \"myuser\"\ntableName := \"mytable\"\n\nuser := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tusername: username,\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable := awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable.grant(user, awscdkawsredshift.TableAction_INSERT)",
          "version": "1"
        },
        "$": {
          "source": "const databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = new User(this, 'User', {\n  username: username,\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: databaseName,\n});\ntable.grant(user, TableAction.INSERT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.TableAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.IUser",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableAction",
        "@aws-cdk/aws-redshift.TableAction#INSERT",
        "@aws-cdk/aws-redshift.TableProps",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.UserProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = new User(this, 'User', {\n  username: username,\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = new Table(this, 'Table', {\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: databaseName,\n});\ntable.grant(user, TableAction.INSERT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 27,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 10
      },
      "fqnsFingerprint": "c7abbae4c53a5cf59f64cc2877eb99889ce9f5888afd0aa196d5b9f225c9cc4e"
    },
    "26932627962dd625d24d6f76b1f8ac40f70913edcaf0eea8e56b8d8e355ed8c3": {
      "translations": {
        "python": {
          "source": "database_name = \"databaseName\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = User.from_user_attributes(self, \"User\",\n    username=username,\n    password=SecretValue.unsafe_plain_text(\"NOT_FOR_PRODUCTION\"),\n    cluster=cluster,\n    database_name=database_name\n)\ntable = Table.from_table_attributes(self, \"Table\",\n    table_name=table_name,\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ntable.grant(user, TableAction.INSERT)",
          "version": "2"
        },
        "csharp": {
          "source": "string databaseName = \"databaseName\";\nstring username = \"myuser\";\nstring tableName = \"mytable\";\n\nIUser user = User.FromUserAttributes(this, \"User\", new UserAttributes {\n    Username = username,\n    Password = SecretValue.UnsafePlainText(\"NOT_FOR_PRODUCTION\"),\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\nITable table = Table.FromTableAttributes(this, \"Table\", new TableAttributes {\n    TableName = tableName,\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ntable.Grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "java": {
          "source": "String databaseName = \"databaseName\";\nString username = \"myuser\";\nString tableName = \"mytable\";\n\nIUser user = User.fromUserAttributes(this, \"User\", UserAttributes.builder()\n        .username(username)\n        .password(SecretValue.unsafePlainText(\"NOT_FOR_PRODUCTION\"))\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build());\nITable table = Table.fromTableAttributes(this, \"Table\", TableAttributes.builder()\n        .tableName(tableName)\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build());\ntable.grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "go": {
          "source": "databaseName := \"databaseName\"\nusername := \"myuser\"\ntableName := \"mytable\"\n\nuser := awscdkawsredshift.User.fromUserAttributes(this, jsii.String(\"User\"), &userAttributes{\n\tusername: username,\n\tpassword: *awscdkcore.SecretValue.unsafePlainText(jsii.String(\"NOT_FOR_PRODUCTION\")),\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable := awscdkawsredshift.Table.fromTableAttributes(this, jsii.String(\"Table\"), &tableAttributes{\n\ttableName: tableName,\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ntable.grant(user, awscdkawsredshift.TableAction_INSERT)",
          "version": "1"
        },
        "$": {
          "source": "const databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = User.fromUserAttributes(this, 'User', {\n  username: username,\n  password: SecretValue.unsafePlainText('NOT_FOR_PRODUCTION'),\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = Table.fromTableAttributes(this, 'Table', {\n  tableName: tableName,\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ntable.grant(user, TableAction.INSERT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.TableAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.ITable",
        "@aws-cdk/aws-redshift.ITable#grant",
        "@aws-cdk/aws-redshift.IUser",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table#fromTableAttributes",
        "@aws-cdk/aws-redshift.TableAction",
        "@aws-cdk/aws-redshift.TableAction#INSERT",
        "@aws-cdk/aws-redshift.TableAttributes",
        "@aws-cdk/aws-redshift.User#fromUserAttributes",
        "@aws-cdk/aws-redshift.UserAttributes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#unsafePlainText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = User.fromUserAttributes(this, 'User', {\n  username: username,\n  password: SecretValue.unsafePlainText('NOT_FOR_PRODUCTION'),\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = Table.fromTableAttributes(this, 'Table', {\n  tableName: tableName,\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ntable.grant(user, TableAction.INSERT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 33,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 5,
        "196": 4,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 12
      },
      "fqnsFingerprint": "a36c21f5b99a3339e670351799bfa7f4b134284495d89d169ed6389dcd192540"
    },
    "8d34035404230cca930a75fc40187247de0993e8d8f6f98e8082cbc1eb0b7f90": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\", dist_key=True), Column(name=\"col2\", data_type=\"float\")\n    ],\n    cluster=cluster,\n    database_name=\"databaseName\",\n    dist_style=TableDistStyle.KEY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\", DistKey = true }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n    DistStyle = TableDistStyle.KEY\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").distKey(true).build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .distStyle(TableDistStyle.KEY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t\tdistKey: jsii.Boolean(true),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdistStyle: *awscdkawsredshift.TableDistStyle_KEY,\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.TableDistStyle"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableDistStyle",
        "@aws-cdk/aws-redshift.TableDistStyle#KEY",
        "@aws-cdk/aws-redshift.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 9
      },
      "fqnsFingerprint": "07c674922559092dcd6aa380a2a95b5bf75336a05831b7421b82cff5b4275e8c"
    },
    "2324b4c71338b057692178e0ad1d89fb578b022347eb7b96d0105009c99cd7cd": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\", dist_key=True), Column(name=\"col2\", data_type=\"float\")\n    ],\n    cluster=cluster,\n    database_name=\"databaseName\",\n    dist_style=TableDistStyle.KEY\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\", DistKey = true }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n    DistStyle = TableDistStyle.KEY\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").distKey(true).build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .distStyle(TableDistStyle.KEY)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t\tdistKey: jsii.Boolean(true),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tdistStyle: *awscdkawsredshift.TableDistStyle_KEY,\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.TableProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableDistStyle",
        "@aws-cdk/aws-redshift.TableDistStyle#KEY",
        "@aws-cdk/aws-redshift.TableProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', distKey: true },\n    { name: 'col2', dataType: 'float' },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  distStyle: TableDistStyle.KEY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 9
      },
      "fqnsFingerprint": "07c674922559092dcd6aa380a2a95b5bf75336a05831b7421b82cff5b4275e8c"
    },
    "50d2305ae70902411227c641d86bcb70aee1e6ea73f312eb542fe74325829807": {
      "translations": {
        "python": {
          "source": "Table(self, \"Table\",\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\", sort_key=True), Column(name=\"col2\", data_type=\"float\", sort_key=True)\n    ],\n    cluster=cluster,\n    database_name=\"databaseName\",\n    sort_style=TableSortStyle.COMPOUND\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Table(this, \"Table\", new TableProps {\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\", SortKey = true }, new Column { Name = \"col2\", DataType = \"float\", SortKey = true } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\",\n    SortStyle = TableSortStyle.COMPOUND\n});",
          "version": "1"
        },
        "java": {
          "source": "Table.Builder.create(this, \"Table\")\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").sortKey(true).build(), Column.builder().name(\"col2\").dataType(\"float\").sortKey(true).build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .sortStyle(TableSortStyle.COMPOUND)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawsredshift.NewTable(this, jsii.String(\"Table\"), &tableProps{\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t\tsortKey: jsii.Boolean(true),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t\tsortKey: jsii.Boolean(true),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n\tsortStyle: *awscdkawsredshift.TableSortStyle_COMPOUND,\n})",
          "version": "1"
        },
        "$": {
          "source": "new Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', sortKey: true },\n    { name: 'col2', dataType: 'float', sortKey: true },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  sortStyle: TableSortStyle.COMPOUND,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.TableSortStyle"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table",
        "@aws-cdk/aws-redshift.TableProps",
        "@aws-cdk/aws-redshift.TableSortStyle",
        "@aws-cdk/aws-redshift.TableSortStyle#COMPOUND",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew Table(this, 'Table', {\n  tableColumns: [\n    { name: 'col1', dataType: 'varchar(4)', sortKey: true },\n    { name: 'col2', dataType: 'float', sortKey: true },\n  ],\n  cluster: cluster,\n  databaseName: 'databaseName',\n  sortStyle: TableSortStyle.COMPOUND,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "4caef52a31bb9916f9182309c072288b961169a229ecebd99d042e4eb0966408"
    },
    "8c7c2500d81a3b5cc68a8667fee556fa8b859a2951367b19b636ea892ad5bf4d": {
      "translations": {
        "python": {
          "source": "user = User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ncluster.add_rotation_multi_user(\"MultiUserRotation\",\n    secret=user.secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ncluster.AddRotationMultiUser(\"MultiUserRotation\", new RotationMultiUserOptions {\n    Secret = user.Secret\n});",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\ncluster.addRotationMultiUser(\"MultiUserRotation\", RotationMultiUserOptions.builder()\n        .secret(user.getSecret())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "user := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ncluster.addRotationMultiUser(jsii.String(\"MultiUserRotation\"), &rotationMultiUserOptions{\n\tsecret: user.secret,\n})",
          "version": "1"
        },
        "$": {
          "source": "\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.User"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#addRotationMultiUser",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.RotationMultiUserOptions",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.User#secret",
        "@aws-cdk/aws-redshift.UserProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "310c4f872f1180a1518ae34083adf5238be9070ab7e629791e315e8215265b5e"
    },
    "e3fd5c81cb6a867da149368fae44c251d04dc903df4d264114d61b45ad71802f": {
      "translations": {
        "python": {
          "source": "database_name = \"databaseName\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = User.from_user_attributes(self, \"User\",\n    username=username,\n    password=SecretValue.unsafe_plain_text(\"NOT_FOR_PRODUCTION\"),\n    cluster=cluster,\n    database_name=database_name\n)\ntable = Table.from_table_attributes(self, \"Table\",\n    table_name=table_name,\n    table_columns=[Column(name=\"col1\", data_type=\"varchar(4)\"), Column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ntable.grant(user, TableAction.INSERT)",
          "version": "2"
        },
        "csharp": {
          "source": "string databaseName = \"databaseName\";\nstring username = \"myuser\";\nstring tableName = \"mytable\";\n\nIUser user = User.FromUserAttributes(this, \"User\", new UserAttributes {\n    Username = username,\n    Password = SecretValue.UnsafePlainText(\"NOT_FOR_PRODUCTION\"),\n    Cluster = cluster,\n    DatabaseName = databaseName\n});\nITable table = Table.FromTableAttributes(this, \"Table\", new TableAttributes {\n    TableName = tableName,\n    TableColumns = new [] { new Column { Name = \"col1\", DataType = \"varchar(4)\" }, new Column { Name = \"col2\", DataType = \"float\" } },\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ntable.Grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "java": {
          "source": "String databaseName = \"databaseName\";\nString username = \"myuser\";\nString tableName = \"mytable\";\n\nIUser user = User.fromUserAttributes(this, \"User\", UserAttributes.builder()\n        .username(username)\n        .password(SecretValue.unsafePlainText(\"NOT_FOR_PRODUCTION\"))\n        .cluster(cluster)\n        .databaseName(databaseName)\n        .build());\nITable table = Table.fromTableAttributes(this, \"Table\", TableAttributes.builder()\n        .tableName(tableName)\n        .tableColumns(List.of(Column.builder().name(\"col1\").dataType(\"varchar(4)\").build(), Column.builder().name(\"col2\").dataType(\"float\").build()))\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build());\ntable.grant(user, TableAction.INSERT);",
          "version": "1"
        },
        "go": {
          "source": "databaseName := \"databaseName\"\nusername := \"myuser\"\ntableName := \"mytable\"\n\nuser := awscdkawsredshift.User.fromUserAttributes(this, jsii.String(\"User\"), &userAttributes{\n\tusername: username,\n\tpassword: *awscdkcore.SecretValue.unsafePlainText(jsii.String(\"NOT_FOR_PRODUCTION\")),\n\tcluster: cluster,\n\tdatabaseName: databaseName,\n})\ntable := awscdkawsredshift.Table.fromTableAttributes(this, jsii.String(\"Table\"), &tableAttributes{\n\ttableName: tableName,\n\ttableColumns: []column{\n\t\t&column{\n\t\t\tname: jsii.String(\"col1\"),\n\t\t\tdataType: jsii.String(\"varchar(4)\"),\n\t\t},\n\t\t&column{\n\t\t\tname: jsii.String(\"col2\"),\n\t\t\tdataType: jsii.String(\"float\"),\n\t\t},\n\t},\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ntable.grant(user, awscdkawsredshift.TableAction_INSERT)",
          "version": "1"
        },
        "$": {
          "source": "const databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = User.fromUserAttributes(this, 'User', {\n  username: username,\n  password: SecretValue.unsafePlainText('NOT_FOR_PRODUCTION'),\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = Table.fromTableAttributes(this, 'Table', {\n  tableName: tableName,\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ntable.grant(user, TableAction.INSERT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.UserAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.ITable",
        "@aws-cdk/aws-redshift.ITable#grant",
        "@aws-cdk/aws-redshift.IUser",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.Table#fromTableAttributes",
        "@aws-cdk/aws-redshift.TableAction",
        "@aws-cdk/aws-redshift.TableAction#INSERT",
        "@aws-cdk/aws-redshift.TableAttributes",
        "@aws-cdk/aws-redshift.User#fromUserAttributes",
        "@aws-cdk/aws-redshift.UserAttributes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#unsafePlainText",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst databaseName = 'databaseName';\nconst username = 'myuser'\nconst tableName = 'mytable'\n\nconst user = User.fromUserAttributes(this, 'User', {\n  username: username,\n  password: SecretValue.unsafePlainText('NOT_FOR_PRODUCTION'),\n  cluster: cluster,\n  databaseName: databaseName,\n});\nconst table = Table.fromTableAttributes(this, 'Table', {\n  tableName: tableName,\n  tableColumns: [{ name: 'col1', dataType: 'varchar(4)' }, { name: 'col2', dataType: 'float' }],\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ntable.grant(user, TableAction.INSERT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 33,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 5,
        "196": 4,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 12
      },
      "fqnsFingerprint": "a36c21f5b99a3339e670351799bfa7f4b134284495d89d169ed6389dcd192540"
    },
    "0c53714e1a66ad8100b91226b807a842bdd1fbafdda031ac1561bbbd8dc070d2": {
      "translations": {
        "python": {
          "source": "user = User(self, \"User\",\n    cluster=cluster,\n    database_name=\"databaseName\"\n)\ncluster.add_rotation_multi_user(\"MultiUserRotation\",\n    secret=user.secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\", new UserProps {\n    Cluster = cluster,\n    DatabaseName = \"databaseName\"\n});\ncluster.AddRotationMultiUser(\"MultiUserRotation\", new RotationMultiUserOptions {\n    Secret = user.Secret\n});",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"User\")\n        .cluster(cluster)\n        .databaseName(\"databaseName\")\n        .build();\ncluster.addRotationMultiUser(\"MultiUserRotation\", RotationMultiUserOptions.builder()\n        .secret(user.getSecret())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "user := awscdkawsredshift.NewUser(this, jsii.String(\"User\"), &userProps{\n\tcluster: cluster,\n\tdatabaseName: jsii.String(\"databaseName\"),\n})\ncluster.addRotationMultiUser(jsii.String(\"MultiUserRotation\"), &rotationMultiUserOptions{\n\tsecret: user.secret,\n})",
          "version": "1"
        },
        "$": {
          "source": "\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-redshift.UserProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-redshift.Cluster#addRotationMultiUser",
        "@aws-cdk/aws-redshift.ICluster",
        "@aws-cdk/aws-redshift.Login",
        "@aws-cdk/aws-redshift.RotationMultiUserOptions",
        "@aws-cdk/aws-redshift.User",
        "@aws-cdk/aws-redshift.User#secret",
        "@aws-cdk/aws-redshift.UserProps",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with cluster already created\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport { Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster, Table, TableAction, TableDistStyle, TableSortStyle, User } from '@aws-cdk/aws-redshift';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new Vpc(this, 'Vpc');\n    const cluster = new Cluster(this, 'Cluster', {\n      vpc,\n      masterUser: {\n        masterUsername: 'admin',\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst user = new User(this, 'User', {\n  cluster: cluster,\n  databaseName: 'databaseName',\n});\ncluster.addRotationMultiUser('MultiUserRotation', {\n  secret: user.secret,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "310c4f872f1180a1518ae34083adf5238be9070ab7e629791e315e8215265b5e"
    }
  }
}