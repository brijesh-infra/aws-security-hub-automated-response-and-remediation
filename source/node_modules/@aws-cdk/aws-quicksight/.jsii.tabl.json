{
  "version": "2",
  "toolVersion": "1.63.2",
  "snippets": {
    "7545a7b116aa6ae3cfe4307920904e11ebbf299fa739f586c7e048c0f7cf642d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_quicksight as quicksight",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.QuickSight;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.quicksight.*;",
          "version": "1"
        },
        "go": {
          "source": "import quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"",
          "version": "1"
        },
        "$": {
          "source": "import * as quicksight from '@aws-cdk/aws-quicksight';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-quicksight"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as quicksight from '@aws-cdk/aws-quicksight';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "ea5bb9f57bc4e976c672e70c978b63b4e9284af57ba4034a4f91bfad438839ae": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_analysis = quicksight.CfnAnalysis(self, \"MyCfnAnalysis\",\n    analysis_id=\"analysisId\",\n    aws_account_id=\"awsAccountId\",\n    source_entity=quicksight.CfnAnalysis.AnalysisSourceEntityProperty(\n        source_template=quicksight.CfnAnalysis.AnalysisSourceTemplateProperty(\n            arn=\"arn\",\n            data_set_references=[quicksight.CfnAnalysis.DataSetReferenceProperty(\n                data_set_arn=\"dataSetArn\",\n                data_set_placeholder=\"dataSetPlaceholder\"\n            )]\n        )\n    ),\n\n    # the properties below are optional\n    errors=[quicksight.CfnAnalysis.AnalysisErrorProperty(\n        message=\"message\",\n        type=\"type\"\n    )],\n    name=\"name\",\n    parameters=quicksight.CfnAnalysis.ParametersProperty(\n        date_time_parameters=[quicksight.CfnAnalysis.DateTimeParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )],\n        decimal_parameters=[quicksight.CfnAnalysis.DecimalParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        integer_parameters=[quicksight.CfnAnalysis.IntegerParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        string_parameters=[quicksight.CfnAnalysis.StringParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )]\n    ),\n    permissions=[quicksight.CfnAnalysis.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    theme_arn=\"themeArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnAnalysis cfnAnalysis = new CfnAnalysis(this, \"MyCfnAnalysis\", new CfnAnalysisProps {\n    AnalysisId = \"analysisId\",\n    AwsAccountId = \"awsAccountId\",\n    SourceEntity = new AnalysisSourceEntityProperty {\n        SourceTemplate = new AnalysisSourceTemplateProperty {\n            Arn = \"arn\",\n            DataSetReferences = new [] { new DataSetReferenceProperty {\n                DataSetArn = \"dataSetArn\",\n                DataSetPlaceholder = \"dataSetPlaceholder\"\n            } }\n        }\n    },\n\n    // the properties below are optional\n    Errors = new [] { new AnalysisErrorProperty {\n        Message = \"message\",\n        Type = \"type\"\n    } },\n    Name = \"name\",\n    Parameters = new ParametersProperty {\n        DateTimeParameters = new [] { new DateTimeParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } },\n        DecimalParameters = new [] { new DecimalParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        IntegerParameters = new [] { new IntegerParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        StringParameters = new [] { new StringParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } }\n    },\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ThemeArn = \"themeArn\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnAnalysis cfnAnalysis = CfnAnalysis.Builder.create(this, \"MyCfnAnalysis\")\n        .analysisId(\"analysisId\")\n        .awsAccountId(\"awsAccountId\")\n        .sourceEntity(AnalysisSourceEntityProperty.builder()\n                .sourceTemplate(AnalysisSourceTemplateProperty.builder()\n                        .arn(\"arn\")\n                        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                                .build()))\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .errors(List.of(AnalysisErrorProperty.builder()\n                .message(\"message\")\n                .type(\"type\")\n                .build()))\n        .name(\"name\")\n        .parameters(ParametersProperty.builder()\n                .dateTimeParameters(List.of(DateTimeParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .decimalParameters(List.of(DecimalParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .integerParameters(List.of(IntegerParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .stringParameters(List.of(StringParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .build())\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .themeArn(\"themeArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnAnalysis := quicksight.NewCfnAnalysis(this, jsii.String(\"MyCfnAnalysis\"), &cfnAnalysisProps{\n\tanalysisId: jsii.String(\"analysisId\"),\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tsourceEntity: &analysisSourceEntityProperty{\n\t\tsourceTemplate: &analysisSourceTemplateProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tdataSetReferences: []interface{}{\n\t\t\t\t&dataSetReferenceProperty{\n\t\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\terrors: []interface{}{\n\t\t&analysisErrorProperty{\n\t\t\tmessage: jsii.String(\"message\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tparameters: &parametersProperty{\n\t\tdateTimeParameters: []interface{}{\n\t\t\t&dateTimeParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tdecimalParameters: []interface{}{\n\t\t\t&decimalParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tintegerParameters: []interface{}{\n\t\t\t&integerParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tstringParameters: []interface{}{\n\t\t\t&stringParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tthemeArn: jsii.String(\"themeArn\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnAnalysis = new quicksight.CfnAnalysis(this, 'MyCfnAnalysis', {\n  analysisId: 'analysisId',\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  errors: [{\n    message: 'message',\n    type: 'type',\n  }],\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis",
        "@aws-cdk/aws-quicksight.CfnAnalysisProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAnalysis = new quicksight.CfnAnalysis(this, 'MyCfnAnalysis', {\n  analysisId: 'analysisId',\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  errors: [{\n    message: 'message',\n    type: 'type',\n  }],\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 21,
        "75": 36,
        "104": 1,
        "192": 13,
        "193": 12,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 32,
        "290": 1
      },
      "fqnsFingerprint": "4f58c76bb2e37cc3c5904efdd807584d610969a31b2579969b2cb853f95e83e0"
    },
    "f300bb06632457998d852bb31a5aaf700b84a5f3cf30719a1a478e11aa94a5ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nanalysis_error_property = quicksight.CfnAnalysis.AnalysisErrorProperty(\n    message=\"message\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAnalysisErrorProperty analysisErrorProperty = new AnalysisErrorProperty {\n    Message = \"message\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAnalysisErrorProperty analysisErrorProperty = AnalysisErrorProperty.builder()\n        .message(\"message\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nanalysisErrorProperty := &analysisErrorProperty{\n\tmessage: jsii.String(\"message\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst analysisErrorProperty: quicksight.CfnAnalysis.AnalysisErrorProperty = {\n  message: 'message',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.AnalysisErrorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.AnalysisErrorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisErrorProperty: quicksight.CfnAnalysis.AnalysisErrorProperty = {\n  message: 'message',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4110a689907a98a51837c90abb4351492f42ca332afe6ab6319b4617dc718f93"
    },
    "8002d8f898c1e0a2fc0e424755ff335785021b0fec60b61a3b03f70a0a6c1c99": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nanalysis_source_entity_property = quicksight.CfnAnalysis.AnalysisSourceEntityProperty(\n    source_template=quicksight.CfnAnalysis.AnalysisSourceTemplateProperty(\n        arn=\"arn\",\n        data_set_references=[quicksight.CfnAnalysis.DataSetReferenceProperty(\n            data_set_arn=\"dataSetArn\",\n            data_set_placeholder=\"dataSetPlaceholder\"\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAnalysisSourceEntityProperty analysisSourceEntityProperty = new AnalysisSourceEntityProperty {\n    SourceTemplate = new AnalysisSourceTemplateProperty {\n        Arn = \"arn\",\n        DataSetReferences = new [] { new DataSetReferenceProperty {\n            DataSetArn = \"dataSetArn\",\n            DataSetPlaceholder = \"dataSetPlaceholder\"\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAnalysisSourceEntityProperty analysisSourceEntityProperty = AnalysisSourceEntityProperty.builder()\n        .sourceTemplate(AnalysisSourceTemplateProperty.builder()\n                .arn(\"arn\")\n                .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                        .dataSetArn(\"dataSetArn\")\n                        .dataSetPlaceholder(\"dataSetPlaceholder\")\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nanalysisSourceEntityProperty := &analysisSourceEntityProperty{\n\tsourceTemplate: &analysisSourceTemplateProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tdataSetReferences: []interface{}{\n\t\t\t&dataSetReferenceProperty{\n\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst analysisSourceEntityProperty: quicksight.CfnAnalysis.AnalysisSourceEntityProperty = {\n  sourceTemplate: {\n    arn: 'arn',\n    dataSetReferences: [{\n      dataSetArn: 'dataSetArn',\n      dataSetPlaceholder: 'dataSetPlaceholder',\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.AnalysisSourceEntityProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.AnalysisSourceEntityProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisSourceEntityProperty: quicksight.CfnAnalysis.AnalysisSourceEntityProperty = {\n  sourceTemplate: {\n    arn: 'arn',\n    dataSetReferences: [{\n      dataSetArn: 'dataSetArn',\n      dataSetPlaceholder: 'dataSetPlaceholder',\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f622405ac892bf9bc1725600d9969017396a4799f98e89d816c589d9fa645b50"
    },
    "0197c4ad8d9aab915f4fbf2137fdbd7392213b5f6c65e107a9a75c937e1cd266": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nanalysis_source_template_property = quicksight.CfnAnalysis.AnalysisSourceTemplateProperty(\n    arn=\"arn\",\n    data_set_references=[quicksight.CfnAnalysis.DataSetReferenceProperty(\n        data_set_arn=\"dataSetArn\",\n        data_set_placeholder=\"dataSetPlaceholder\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAnalysisSourceTemplateProperty analysisSourceTemplateProperty = new AnalysisSourceTemplateProperty {\n    Arn = \"arn\",\n    DataSetReferences = new [] { new DataSetReferenceProperty {\n        DataSetArn = \"dataSetArn\",\n        DataSetPlaceholder = \"dataSetPlaceholder\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAnalysisSourceTemplateProperty analysisSourceTemplateProperty = AnalysisSourceTemplateProperty.builder()\n        .arn(\"arn\")\n        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                .dataSetArn(\"dataSetArn\")\n                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nanalysisSourceTemplateProperty := &analysisSourceTemplateProperty{\n\tarn: jsii.String(\"arn\"),\n\tdataSetReferences: []interface{}{\n\t\t&dataSetReferenceProperty{\n\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst analysisSourceTemplateProperty: quicksight.CfnAnalysis.AnalysisSourceTemplateProperty = {\n  arn: 'arn',\n  dataSetReferences: [{\n    dataSetArn: 'dataSetArn',\n    dataSetPlaceholder: 'dataSetPlaceholder',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.AnalysisSourceTemplateProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.AnalysisSourceTemplateProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst analysisSourceTemplateProperty: quicksight.CfnAnalysis.AnalysisSourceTemplateProperty = {\n  arn: 'arn',\n  dataSetReferences: [{\n    dataSetArn: 'dataSetArn',\n    dataSetPlaceholder: 'dataSetPlaceholder',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d77457215cb2dedeebd0fdb505a345c9fc5c38f6fcead2d09b7e09fd63cd600b"
    },
    "a83dec45a54def3ec0ce9d5faaff88317162b38bab6c3ed59e45fe4f6427e862": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_set_reference_property = quicksight.CfnAnalysis.DataSetReferenceProperty(\n    data_set_arn=\"dataSetArn\",\n    data_set_placeholder=\"dataSetPlaceholder\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSetReferenceProperty dataSetReferenceProperty = new DataSetReferenceProperty {\n    DataSetArn = \"dataSetArn\",\n    DataSetPlaceholder = \"dataSetPlaceholder\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSetReferenceProperty dataSetReferenceProperty = DataSetReferenceProperty.builder()\n        .dataSetArn(\"dataSetArn\")\n        .dataSetPlaceholder(\"dataSetPlaceholder\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSetReferenceProperty := &dataSetReferenceProperty{\n\tdataSetArn: jsii.String(\"dataSetArn\"),\n\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSetReferenceProperty: quicksight.CfnAnalysis.DataSetReferenceProperty = {\n  dataSetArn: 'dataSetArn',\n  dataSetPlaceholder: 'dataSetPlaceholder',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.DataSetReferenceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.DataSetReferenceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSetReferenceProperty: quicksight.CfnAnalysis.DataSetReferenceProperty = {\n  dataSetArn: 'dataSetArn',\n  dataSetPlaceholder: 'dataSetPlaceholder',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9f0affa5316d77542ae85520bbbaa8a2515e66e92101d3e8dd4149b65abb8725"
    },
    "cc9c25f4607b11d1ba4de741ec51dd372d88af5eada2cabc5db03e4477691b5e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndate_time_parameter_property = quicksight.CfnAnalysis.DateTimeParameterProperty(\n    name=\"name\",\n    values=[\"values\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDateTimeParameterProperty dateTimeParameterProperty = new DateTimeParameterProperty {\n    Name = \"name\",\n    Values = new [] { \"values\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDateTimeParameterProperty dateTimeParameterProperty = DateTimeParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(\"values\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndateTimeParameterProperty := &dateTimeParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []*string{\n\t\tjsii.String(\"values\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dateTimeParameterProperty: quicksight.CfnAnalysis.DateTimeParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.DateTimeParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.DateTimeParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dateTimeParameterProperty: quicksight.CfnAnalysis.DateTimeParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a98fc9177c002fae494c91b72f79ab68447bc9cdd54b19698ee2a63507dcd83d"
    },
    "e73a14d8a0390fa1e395387f0c73398b9e529d4f0bac477a618b0bd10f869836": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndecimal_parameter_property = quicksight.CfnAnalysis.DecimalParameterProperty(\n    name=\"name\",\n    values=[123]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDecimalParameterProperty decimalParameterProperty = new DecimalParameterProperty {\n    Name = \"name\",\n    Values = new [] { 123 }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDecimalParameterProperty decimalParameterProperty = DecimalParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(123))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndecimalParameterProperty := &decimalParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []interface{}{\n\t\tjsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst decimalParameterProperty: quicksight.CfnAnalysis.DecimalParameterProperty = {\n  name: 'name',\n  values: [123],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.DecimalParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.DecimalParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst decimalParameterProperty: quicksight.CfnAnalysis.DecimalParameterProperty = {\n  name: 'name',\n  values: [123],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "dc15707fe7843c5ce3d899b2e2db688d763c7cbea4ff2147cf3d247e025b8f58"
    },
    "c5eb2aa9435a521ca3095b5151a9afc96797f39f4e436aa1065a3e610e8c7fd5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ninteger_parameter_property = quicksight.CfnAnalysis.IntegerParameterProperty(\n    name=\"name\",\n    values=[123]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nIntegerParameterProperty integerParameterProperty = new IntegerParameterProperty {\n    Name = \"name\",\n    Values = new [] { 123 }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nIntegerParameterProperty integerParameterProperty = IntegerParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(123))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nintegerParameterProperty := &integerParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []interface{}{\n\t\tjsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst integerParameterProperty: quicksight.CfnAnalysis.IntegerParameterProperty = {\n  name: 'name',\n  values: [123],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.IntegerParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.IntegerParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integerParameterProperty: quicksight.CfnAnalysis.IntegerParameterProperty = {\n  name: 'name',\n  values: [123],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5929fc932d9f72c26888dfa2f60ce7f4208486402a2c69a2253731b08aaab501"
    },
    "075cf77104a5029756271aa2fafa5916a9d228a199536b3f3ee3931d9e266974": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nparameters_property = quicksight.CfnAnalysis.ParametersProperty(\n    date_time_parameters=[quicksight.CfnAnalysis.DateTimeParameterProperty(\n        name=\"name\",\n        values=[\"values\"]\n    )],\n    decimal_parameters=[quicksight.CfnAnalysis.DecimalParameterProperty(\n        name=\"name\",\n        values=[123]\n    )],\n    integer_parameters=[quicksight.CfnAnalysis.IntegerParameterProperty(\n        name=\"name\",\n        values=[123]\n    )],\n    string_parameters=[quicksight.CfnAnalysis.StringParameterProperty(\n        name=\"name\",\n        values=[\"values\"]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nParametersProperty parametersProperty = new ParametersProperty {\n    DateTimeParameters = new [] { new DateTimeParameterProperty {\n        Name = \"name\",\n        Values = new [] { \"values\" }\n    } },\n    DecimalParameters = new [] { new DecimalParameterProperty {\n        Name = \"name\",\n        Values = new [] { 123 }\n    } },\n    IntegerParameters = new [] { new IntegerParameterProperty {\n        Name = \"name\",\n        Values = new [] { 123 }\n    } },\n    StringParameters = new [] { new StringParameterProperty {\n        Name = \"name\",\n        Values = new [] { \"values\" }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nParametersProperty parametersProperty = ParametersProperty.builder()\n        .dateTimeParameters(List.of(DateTimeParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(\"values\"))\n                .build()))\n        .decimalParameters(List.of(DecimalParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(123))\n                .build()))\n        .integerParameters(List.of(IntegerParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(123))\n                .build()))\n        .stringParameters(List.of(StringParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(\"values\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nparametersProperty := &parametersProperty{\n\tdateTimeParameters: []interface{}{\n\t\t&dateTimeParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []*string{\n\t\t\t\tjsii.String(\"values\"),\n\t\t\t},\n\t\t},\n\t},\n\tdecimalParameters: []interface{}{\n\t\t&decimalParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []interface{}{\n\t\t\t\tjsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tintegerParameters: []interface{}{\n\t\t&integerParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []interface{}{\n\t\t\t\tjsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tstringParameters: []interface{}{\n\t\t&stringParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []*string{\n\t\t\t\tjsii.String(\"values\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst parametersProperty: quicksight.CfnAnalysis.ParametersProperty = {\n  dateTimeParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n  decimalParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  integerParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  stringParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.ParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.ParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parametersProperty: quicksight.CfnAnalysis.ParametersProperty = {\n  dateTimeParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n  decimalParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  integerParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  stringParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 17,
        "153": 2,
        "169": 1,
        "192": 8,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "f81401de7a0e169a5bef79432aa83dcee6286b3de133922821b96e7610de1e57"
    },
    "25955470e49bb13f04ea4859ea52363645bb25d137a77523ae63c3099d177ae1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nresource_permission_property = quicksight.CfnAnalysis.ResourcePermissionProperty(\n    actions=[\"actions\"],\n    principal=\"principal\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nResourcePermissionProperty resourcePermissionProperty = new ResourcePermissionProperty {\n    Actions = new [] { \"actions\" },\n    Principal = \"principal\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()\n        .actions(List.of(\"actions\"))\n        .principal(\"principal\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nresourcePermissionProperty := &resourcePermissionProperty{\n\tactions: []*string{\n\t\tjsii.String(\"actions\"),\n\t},\n\tprincipal: jsii.String(\"principal\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst resourcePermissionProperty: quicksight.CfnAnalysis.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.ResourcePermissionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.ResourcePermissionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePermissionProperty: quicksight.CfnAnalysis.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0e75dbb1a60a813a79beb5f08cea0ad5362507026bda177d13224350b051425f"
    },
    "3ed0c0007ad3e1bbb244c482d85fc0e70f1c23d2eb17ee6f6311d7f0afab0d4e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nsheet_property = quicksight.CfnAnalysis.SheetProperty(\n    name=\"name\",\n    sheet_id=\"sheetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSheetProperty sheetProperty = new SheetProperty {\n    Name = \"name\",\n    SheetId = \"sheetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSheetProperty sheetProperty = SheetProperty.builder()\n        .name(\"name\")\n        .sheetId(\"sheetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsheetProperty := &sheetProperty{\n\tname: jsii.String(\"name\"),\n\tsheetId: jsii.String(\"sheetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst sheetProperty: quicksight.CfnAnalysis.SheetProperty = {\n  name: 'name',\n  sheetId: 'sheetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.SheetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.SheetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sheetProperty: quicksight.CfnAnalysis.SheetProperty = {\n  name: 'name',\n  sheetId: 'sheetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a6c30101075af12969e774949885c22fac553fb1de29b35d75fbeca08a6fa853"
    },
    "4cdfea4cc4deb87061a86bb9127e74b143bc2bb75c0a0a4f44c02ded94827089": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nstring_parameter_property = quicksight.CfnAnalysis.StringParameterProperty(\n    name=\"name\",\n    values=[\"values\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nStringParameterProperty stringParameterProperty = new StringParameterProperty {\n    Name = \"name\",\n    Values = new [] { \"values\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nStringParameterProperty stringParameterProperty = StringParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(\"values\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nstringParameterProperty := &stringParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []*string{\n\t\tjsii.String(\"values\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst stringParameterProperty: quicksight.CfnAnalysis.StringParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysis.StringParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysis.StringParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stringParameterProperty: quicksight.CfnAnalysis.StringParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1cd4313e66854b7e2a645b4bc923a6eac0614df5005d9d8fca06897e9b5aa3f0"
    },
    "ae89e16ec8c3496cbec310ba853822b3306ebb354f9427d84b1b0c15103f12ec": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_analysis_props = quicksight.CfnAnalysisProps(\n    analysis_id=\"analysisId\",\n    aws_account_id=\"awsAccountId\",\n    source_entity=quicksight.CfnAnalysis.AnalysisSourceEntityProperty(\n        source_template=quicksight.CfnAnalysis.AnalysisSourceTemplateProperty(\n            arn=\"arn\",\n            data_set_references=[quicksight.CfnAnalysis.DataSetReferenceProperty(\n                data_set_arn=\"dataSetArn\",\n                data_set_placeholder=\"dataSetPlaceholder\"\n            )]\n        )\n    ),\n\n    # the properties below are optional\n    errors=[quicksight.CfnAnalysis.AnalysisErrorProperty(\n        message=\"message\",\n        type=\"type\"\n    )],\n    name=\"name\",\n    parameters=quicksight.CfnAnalysis.ParametersProperty(\n        date_time_parameters=[quicksight.CfnAnalysis.DateTimeParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )],\n        decimal_parameters=[quicksight.CfnAnalysis.DecimalParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        integer_parameters=[quicksight.CfnAnalysis.IntegerParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        string_parameters=[quicksight.CfnAnalysis.StringParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )]\n    ),\n    permissions=[quicksight.CfnAnalysis.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    theme_arn=\"themeArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnAnalysisProps cfnAnalysisProps = new CfnAnalysisProps {\n    AnalysisId = \"analysisId\",\n    AwsAccountId = \"awsAccountId\",\n    SourceEntity = new AnalysisSourceEntityProperty {\n        SourceTemplate = new AnalysisSourceTemplateProperty {\n            Arn = \"arn\",\n            DataSetReferences = new [] { new DataSetReferenceProperty {\n                DataSetArn = \"dataSetArn\",\n                DataSetPlaceholder = \"dataSetPlaceholder\"\n            } }\n        }\n    },\n\n    // the properties below are optional\n    Errors = new [] { new AnalysisErrorProperty {\n        Message = \"message\",\n        Type = \"type\"\n    } },\n    Name = \"name\",\n    Parameters = new ParametersProperty {\n        DateTimeParameters = new [] { new DateTimeParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } },\n        DecimalParameters = new [] { new DecimalParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        IntegerParameters = new [] { new IntegerParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        StringParameters = new [] { new StringParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } }\n    },\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ThemeArn = \"themeArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnAnalysisProps cfnAnalysisProps = CfnAnalysisProps.builder()\n        .analysisId(\"analysisId\")\n        .awsAccountId(\"awsAccountId\")\n        .sourceEntity(AnalysisSourceEntityProperty.builder()\n                .sourceTemplate(AnalysisSourceTemplateProperty.builder()\n                        .arn(\"arn\")\n                        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                                .build()))\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .errors(List.of(AnalysisErrorProperty.builder()\n                .message(\"message\")\n                .type(\"type\")\n                .build()))\n        .name(\"name\")\n        .parameters(ParametersProperty.builder()\n                .dateTimeParameters(List.of(DateTimeParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .decimalParameters(List.of(DecimalParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .integerParameters(List.of(IntegerParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .stringParameters(List.of(StringParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .build())\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .themeArn(\"themeArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnAnalysisProps := &cfnAnalysisProps{\n\tanalysisId: jsii.String(\"analysisId\"),\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tsourceEntity: &analysisSourceEntityProperty{\n\t\tsourceTemplate: &analysisSourceTemplateProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tdataSetReferences: []interface{}{\n\t\t\t\t&dataSetReferenceProperty{\n\t\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\terrors: []interface{}{\n\t\t&analysisErrorProperty{\n\t\t\tmessage: jsii.String(\"message\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tparameters: &parametersProperty{\n\t\tdateTimeParameters: []interface{}{\n\t\t\t&dateTimeParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tdecimalParameters: []interface{}{\n\t\t\t&decimalParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tintegerParameters: []interface{}{\n\t\t\t&integerParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tstringParameters: []interface{}{\n\t\t\t&stringParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tthemeArn: jsii.String(\"themeArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnAnalysisProps: quicksight.CfnAnalysisProps = {\n  analysisId: 'analysisId',\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  errors: [{\n    message: 'message',\n    type: 'type',\n  }],\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnAnalysisProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnAnalysisProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAnalysisProps: quicksight.CfnAnalysisProps = {\n  analysisId: 'analysisId',\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  errors: [{\n    message: 'message',\n    type: 'type',\n  }],\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 20,
        "75": 36,
        "153": 1,
        "169": 1,
        "192": 13,
        "193": 12,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 32,
        "290": 1
      },
      "fqnsFingerprint": "ef216448a8e41908e407e433a0fbf40b0664e8e92a231597f6f129e4a1652ede"
    },
    "c84d5a511da045eca10fc45ffc7be05aecf7737c92a6f40714cc43ce283fbfaa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_dashboard = quicksight.CfnDashboard(self, \"MyCfnDashboard\",\n    aws_account_id=\"awsAccountId\",\n    dashboard_id=\"dashboardId\",\n    source_entity=quicksight.CfnDashboard.DashboardSourceEntityProperty(\n        source_template=quicksight.CfnDashboard.DashboardSourceTemplateProperty(\n            arn=\"arn\",\n            data_set_references=[quicksight.CfnDashboard.DataSetReferenceProperty(\n                data_set_arn=\"dataSetArn\",\n                data_set_placeholder=\"dataSetPlaceholder\"\n            )]\n        )\n    ),\n\n    # the properties below are optional\n    dashboard_publish_options=quicksight.CfnDashboard.DashboardPublishOptionsProperty(\n        ad_hoc_filtering_option=quicksight.CfnDashboard.AdHocFilteringOptionProperty(\n            availability_status=\"availabilityStatus\"\n        ),\n        export_to_csv_option=quicksight.CfnDashboard.ExportToCSVOptionProperty(\n            availability_status=\"availabilityStatus\"\n        ),\n        sheet_controls_option=quicksight.CfnDashboard.SheetControlsOptionProperty(\n            visibility_state=\"visibilityState\"\n        )\n    ),\n    name=\"name\",\n    parameters=quicksight.CfnDashboard.ParametersProperty(\n        date_time_parameters=[quicksight.CfnDashboard.DateTimeParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )],\n        decimal_parameters=[quicksight.CfnDashboard.DecimalParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        integer_parameters=[quicksight.CfnDashboard.IntegerParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        string_parameters=[quicksight.CfnDashboard.StringParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )]\n    ),\n    permissions=[quicksight.CfnDashboard.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    theme_arn=\"themeArn\",\n    version_description=\"versionDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnDashboard cfnDashboard = new CfnDashboard(this, \"MyCfnDashboard\", new CfnDashboardProps {\n    AwsAccountId = \"awsAccountId\",\n    DashboardId = \"dashboardId\",\n    SourceEntity = new DashboardSourceEntityProperty {\n        SourceTemplate = new DashboardSourceTemplateProperty {\n            Arn = \"arn\",\n            DataSetReferences = new [] { new DataSetReferenceProperty {\n                DataSetArn = \"dataSetArn\",\n                DataSetPlaceholder = \"dataSetPlaceholder\"\n            } }\n        }\n    },\n\n    // the properties below are optional\n    DashboardPublishOptions = new DashboardPublishOptionsProperty {\n        AdHocFilteringOption = new AdHocFilteringOptionProperty {\n            AvailabilityStatus = \"availabilityStatus\"\n        },\n        ExportToCsvOption = new ExportToCSVOptionProperty {\n            AvailabilityStatus = \"availabilityStatus\"\n        },\n        SheetControlsOption = new SheetControlsOptionProperty {\n            VisibilityState = \"visibilityState\"\n        }\n    },\n    Name = \"name\",\n    Parameters = new ParametersProperty {\n        DateTimeParameters = new [] { new DateTimeParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } },\n        DecimalParameters = new [] { new DecimalParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        IntegerParameters = new [] { new IntegerParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        StringParameters = new [] { new StringParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } }\n    },\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ThemeArn = \"themeArn\",\n    VersionDescription = \"versionDescription\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnDashboard cfnDashboard = CfnDashboard.Builder.create(this, \"MyCfnDashboard\")\n        .awsAccountId(\"awsAccountId\")\n        .dashboardId(\"dashboardId\")\n        .sourceEntity(DashboardSourceEntityProperty.builder()\n                .sourceTemplate(DashboardSourceTemplateProperty.builder()\n                        .arn(\"arn\")\n                        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                                .build()))\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .dashboardPublishOptions(DashboardPublishOptionsProperty.builder()\n                .adHocFilteringOption(AdHocFilteringOptionProperty.builder()\n                        .availabilityStatus(\"availabilityStatus\")\n                        .build())\n                .exportToCsvOption(ExportToCSVOptionProperty.builder()\n                        .availabilityStatus(\"availabilityStatus\")\n                        .build())\n                .sheetControlsOption(SheetControlsOptionProperty.builder()\n                        .visibilityState(\"visibilityState\")\n                        .build())\n                .build())\n        .name(\"name\")\n        .parameters(ParametersProperty.builder()\n                .dateTimeParameters(List.of(DateTimeParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .decimalParameters(List.of(DecimalParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .integerParameters(List.of(IntegerParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .stringParameters(List.of(StringParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .build())\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .themeArn(\"themeArn\")\n        .versionDescription(\"versionDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnDashboard := quicksight.NewCfnDashboard(this, jsii.String(\"MyCfnDashboard\"), &cfnDashboardProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tdashboardId: jsii.String(\"dashboardId\"),\n\tsourceEntity: &dashboardSourceEntityProperty{\n\t\tsourceTemplate: &dashboardSourceTemplateProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tdataSetReferences: []interface{}{\n\t\t\t\t&dataSetReferenceProperty{\n\t\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdashboardPublishOptions: &dashboardPublishOptionsProperty{\n\t\tadHocFilteringOption: &adHocFilteringOptionProperty{\n\t\t\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n\t\t},\n\t\texportToCsvOption: &exportToCSVOptionProperty{\n\t\t\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n\t\t},\n\t\tsheetControlsOption: &sheetControlsOptionProperty{\n\t\t\tvisibilityState: jsii.String(\"visibilityState\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tparameters: &parametersProperty{\n\t\tdateTimeParameters: []interface{}{\n\t\t\t&dateTimeParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tdecimalParameters: []interface{}{\n\t\t\t&decimalParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tintegerParameters: []interface{}{\n\t\t\t&integerParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tstringParameters: []interface{}{\n\t\t\t&stringParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tthemeArn: jsii.String(\"themeArn\"),\n\tversionDescription: jsii.String(\"versionDescription\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnDashboard = new quicksight.CfnDashboard(this, 'MyCfnDashboard', {\n  awsAccountId: 'awsAccountId',\n  dashboardId: 'dashboardId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  dashboardPublishOptions: {\n    adHocFilteringOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    exportToCsvOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    sheetControlsOption: {\n      visibilityState: 'visibilityState',\n    },\n  },\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n  versionDescription: 'versionDescription',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard",
        "@aws-cdk/aws-quicksight.CfnDashboardProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDashboard = new quicksight.CfnDashboard(this, 'MyCfnDashboard', {\n  awsAccountId: 'awsAccountId',\n  dashboardId: 'dashboardId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  dashboardPublishOptions: {\n    adHocFilteringOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    exportToCsvOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    sheetControlsOption: {\n      visibilityState: 'visibilityState',\n    },\n  },\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n  versionDescription: 'versionDescription',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 23,
        "75": 41,
        "104": 1,
        "192": 12,
        "193": 15,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "0b33a9b5a3820f281cb4fe2c73d7336b5687b0c533f5f53dc7ea85273e85d711"
    },
    "2eb886f682a597eb654b80fc57151c3060fc52a1330ef3c6f6530e6c4bbde14c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nad_hoc_filtering_option_property = quicksight.CfnDashboard.AdHocFilteringOptionProperty(\n    availability_status=\"availabilityStatus\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAdHocFilteringOptionProperty adHocFilteringOptionProperty = new AdHocFilteringOptionProperty {\n    AvailabilityStatus = \"availabilityStatus\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAdHocFilteringOptionProperty adHocFilteringOptionProperty = AdHocFilteringOptionProperty.builder()\n        .availabilityStatus(\"availabilityStatus\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nadHocFilteringOptionProperty := &adHocFilteringOptionProperty{\n\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst adHocFilteringOptionProperty: quicksight.CfnDashboard.AdHocFilteringOptionProperty = {\n  availabilityStatus: 'availabilityStatus',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.AdHocFilteringOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.AdHocFilteringOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst adHocFilteringOptionProperty: quicksight.CfnDashboard.AdHocFilteringOptionProperty = {\n  availabilityStatus: 'availabilityStatus',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "182796d0b5b15701a4b162676811133833198b2956a6739836f90d1f1ce0d561"
    },
    "f87460436a9a742182f9e546d669f6cb098b2a8574e2c52aef96db9d53ef3b79": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndashboard_publish_options_property = quicksight.CfnDashboard.DashboardPublishOptionsProperty(\n    ad_hoc_filtering_option=quicksight.CfnDashboard.AdHocFilteringOptionProperty(\n        availability_status=\"availabilityStatus\"\n    ),\n    export_to_csv_option=quicksight.CfnDashboard.ExportToCSVOptionProperty(\n        availability_status=\"availabilityStatus\"\n    ),\n    sheet_controls_option=quicksight.CfnDashboard.SheetControlsOptionProperty(\n        visibility_state=\"visibilityState\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDashboardPublishOptionsProperty dashboardPublishOptionsProperty = new DashboardPublishOptionsProperty {\n    AdHocFilteringOption = new AdHocFilteringOptionProperty {\n        AvailabilityStatus = \"availabilityStatus\"\n    },\n    ExportToCsvOption = new ExportToCSVOptionProperty {\n        AvailabilityStatus = \"availabilityStatus\"\n    },\n    SheetControlsOption = new SheetControlsOptionProperty {\n        VisibilityState = \"visibilityState\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDashboardPublishOptionsProperty dashboardPublishOptionsProperty = DashboardPublishOptionsProperty.builder()\n        .adHocFilteringOption(AdHocFilteringOptionProperty.builder()\n                .availabilityStatus(\"availabilityStatus\")\n                .build())\n        .exportToCsvOption(ExportToCSVOptionProperty.builder()\n                .availabilityStatus(\"availabilityStatus\")\n                .build())\n        .sheetControlsOption(SheetControlsOptionProperty.builder()\n                .visibilityState(\"visibilityState\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndashboardPublishOptionsProperty := &dashboardPublishOptionsProperty{\n\tadHocFilteringOption: &adHocFilteringOptionProperty{\n\t\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n\t},\n\texportToCsvOption: &exportToCSVOptionProperty{\n\t\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n\t},\n\tsheetControlsOption: &sheetControlsOptionProperty{\n\t\tvisibilityState: jsii.String(\"visibilityState\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dashboardPublishOptionsProperty: quicksight.CfnDashboard.DashboardPublishOptionsProperty = {\n  adHocFilteringOption: {\n    availabilityStatus: 'availabilityStatus',\n  },\n  exportToCsvOption: {\n    availabilityStatus: 'availabilityStatus',\n  },\n  sheetControlsOption: {\n    visibilityState: 'visibilityState',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.DashboardPublishOptionsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.DashboardPublishOptionsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dashboardPublishOptionsProperty: quicksight.CfnDashboard.DashboardPublishOptionsProperty = {\n  adHocFilteringOption: {\n    availabilityStatus: 'availabilityStatus',\n  },\n  exportToCsvOption: {\n    availabilityStatus: 'availabilityStatus',\n  },\n  sheetControlsOption: {\n    visibilityState: 'visibilityState',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "02940e298c5ea412e1488480f6ed7391a95b05de8816c3f490aba3303cf600bc"
    },
    "1567a675a4ec155bda348eda0334fd58ffc08b487c2f87c96c11b54addc565d0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndashboard_source_entity_property = quicksight.CfnDashboard.DashboardSourceEntityProperty(\n    source_template=quicksight.CfnDashboard.DashboardSourceTemplateProperty(\n        arn=\"arn\",\n        data_set_references=[quicksight.CfnDashboard.DataSetReferenceProperty(\n            data_set_arn=\"dataSetArn\",\n            data_set_placeholder=\"dataSetPlaceholder\"\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDashboardSourceEntityProperty dashboardSourceEntityProperty = new DashboardSourceEntityProperty {\n    SourceTemplate = new DashboardSourceTemplateProperty {\n        Arn = \"arn\",\n        DataSetReferences = new [] { new DataSetReferenceProperty {\n            DataSetArn = \"dataSetArn\",\n            DataSetPlaceholder = \"dataSetPlaceholder\"\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDashboardSourceEntityProperty dashboardSourceEntityProperty = DashboardSourceEntityProperty.builder()\n        .sourceTemplate(DashboardSourceTemplateProperty.builder()\n                .arn(\"arn\")\n                .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                        .dataSetArn(\"dataSetArn\")\n                        .dataSetPlaceholder(\"dataSetPlaceholder\")\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndashboardSourceEntityProperty := &dashboardSourceEntityProperty{\n\tsourceTemplate: &dashboardSourceTemplateProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tdataSetReferences: []interface{}{\n\t\t\t&dataSetReferenceProperty{\n\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dashboardSourceEntityProperty: quicksight.CfnDashboard.DashboardSourceEntityProperty = {\n  sourceTemplate: {\n    arn: 'arn',\n    dataSetReferences: [{\n      dataSetArn: 'dataSetArn',\n      dataSetPlaceholder: 'dataSetPlaceholder',\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.DashboardSourceEntityProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.DashboardSourceEntityProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dashboardSourceEntityProperty: quicksight.CfnDashboard.DashboardSourceEntityProperty = {\n  sourceTemplate: {\n    arn: 'arn',\n    dataSetReferences: [{\n      dataSetArn: 'dataSetArn',\n      dataSetPlaceholder: 'dataSetPlaceholder',\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0f6413d0815348460e687bf195062bd6a5d7cd8755ad141ae1b7512c4fe89690"
    },
    "9f55be5438e872f3b8f1a369262483dd53c833be2fe22df2081919235b95ef5a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndashboard_source_template_property = quicksight.CfnDashboard.DashboardSourceTemplateProperty(\n    arn=\"arn\",\n    data_set_references=[quicksight.CfnDashboard.DataSetReferenceProperty(\n        data_set_arn=\"dataSetArn\",\n        data_set_placeholder=\"dataSetPlaceholder\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDashboardSourceTemplateProperty dashboardSourceTemplateProperty = new DashboardSourceTemplateProperty {\n    Arn = \"arn\",\n    DataSetReferences = new [] { new DataSetReferenceProperty {\n        DataSetArn = \"dataSetArn\",\n        DataSetPlaceholder = \"dataSetPlaceholder\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDashboardSourceTemplateProperty dashboardSourceTemplateProperty = DashboardSourceTemplateProperty.builder()\n        .arn(\"arn\")\n        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                .dataSetArn(\"dataSetArn\")\n                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndashboardSourceTemplateProperty := &dashboardSourceTemplateProperty{\n\tarn: jsii.String(\"arn\"),\n\tdataSetReferences: []interface{}{\n\t\t&dataSetReferenceProperty{\n\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dashboardSourceTemplateProperty: quicksight.CfnDashboard.DashboardSourceTemplateProperty = {\n  arn: 'arn',\n  dataSetReferences: [{\n    dataSetArn: 'dataSetArn',\n    dataSetPlaceholder: 'dataSetPlaceholder',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.DashboardSourceTemplateProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.DashboardSourceTemplateProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dashboardSourceTemplateProperty: quicksight.CfnDashboard.DashboardSourceTemplateProperty = {\n  arn: 'arn',\n  dataSetReferences: [{\n    dataSetArn: 'dataSetArn',\n    dataSetPlaceholder: 'dataSetPlaceholder',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "71b0160dc51377e43b1de912466acde9ac7f1d0acf9f74e725aa85fb222da720"
    },
    "28f4d303f37913789ea151998ef80b035e5e77a822fe6ae5494d131ea57179fa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_set_reference_property = quicksight.CfnDashboard.DataSetReferenceProperty(\n    data_set_arn=\"dataSetArn\",\n    data_set_placeholder=\"dataSetPlaceholder\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSetReferenceProperty dataSetReferenceProperty = new DataSetReferenceProperty {\n    DataSetArn = \"dataSetArn\",\n    DataSetPlaceholder = \"dataSetPlaceholder\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSetReferenceProperty dataSetReferenceProperty = DataSetReferenceProperty.builder()\n        .dataSetArn(\"dataSetArn\")\n        .dataSetPlaceholder(\"dataSetPlaceholder\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSetReferenceProperty := &dataSetReferenceProperty{\n\tdataSetArn: jsii.String(\"dataSetArn\"),\n\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSetReferenceProperty: quicksight.CfnDashboard.DataSetReferenceProperty = {\n  dataSetArn: 'dataSetArn',\n  dataSetPlaceholder: 'dataSetPlaceholder',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.DataSetReferenceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.DataSetReferenceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSetReferenceProperty: quicksight.CfnDashboard.DataSetReferenceProperty = {\n  dataSetArn: 'dataSetArn',\n  dataSetPlaceholder: 'dataSetPlaceholder',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f24ecae4036948f2f783e09ca88f0d83c4edeafc04677a6aed1e76b4c4ae90b5"
    },
    "7aa7164c29f54d38fb028903ee0edcaea21ea7c21e3b10e5cc4e8ae6d53f3ccc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndate_time_parameter_property = quicksight.CfnDashboard.DateTimeParameterProperty(\n    name=\"name\",\n    values=[\"values\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDateTimeParameterProperty dateTimeParameterProperty = new DateTimeParameterProperty {\n    Name = \"name\",\n    Values = new [] { \"values\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDateTimeParameterProperty dateTimeParameterProperty = DateTimeParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(\"values\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndateTimeParameterProperty := &dateTimeParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []*string{\n\t\tjsii.String(\"values\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dateTimeParameterProperty: quicksight.CfnDashboard.DateTimeParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.DateTimeParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.DateTimeParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dateTimeParameterProperty: quicksight.CfnDashboard.DateTimeParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0ef363a2d2fd65f141d4f13b39083b0435ea352918c689042a90475a36f7673c"
    },
    "1be47ab9a3ff4a6902a46f5afdc1f638c606ef4097e2de0931a3fff1fb7b571a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndecimal_parameter_property = quicksight.CfnDashboard.DecimalParameterProperty(\n    name=\"name\",\n    values=[123]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDecimalParameterProperty decimalParameterProperty = new DecimalParameterProperty {\n    Name = \"name\",\n    Values = new [] { 123 }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDecimalParameterProperty decimalParameterProperty = DecimalParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(123))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndecimalParameterProperty := &decimalParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []interface{}{\n\t\tjsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst decimalParameterProperty: quicksight.CfnDashboard.DecimalParameterProperty = {\n  name: 'name',\n  values: [123],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.DecimalParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.DecimalParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst decimalParameterProperty: quicksight.CfnDashboard.DecimalParameterProperty = {\n  name: 'name',\n  values: [123],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a69dc00f478772e837d084d96aa9d283ff9dbb2e1b755545460e868c241a8f4b"
    },
    "33778eed63f6534ad157f178d11ff80382b29d8b5a03d63b92514cb2c18d12bb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nexport_to_cSVOption_property = quicksight.CfnDashboard.ExportToCSVOptionProperty(\n    availability_status=\"availabilityStatus\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nExportToCSVOptionProperty exportToCSVOptionProperty = new ExportToCSVOptionProperty {\n    AvailabilityStatus = \"availabilityStatus\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nExportToCSVOptionProperty exportToCSVOptionProperty = ExportToCSVOptionProperty.builder()\n        .availabilityStatus(\"availabilityStatus\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nexportToCSVOptionProperty := &exportToCSVOptionProperty{\n\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst exportToCSVOptionProperty: quicksight.CfnDashboard.ExportToCSVOptionProperty = {\n  availabilityStatus: 'availabilityStatus',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.ExportToCSVOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.ExportToCSVOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst exportToCSVOptionProperty: quicksight.CfnDashboard.ExportToCSVOptionProperty = {\n  availabilityStatus: 'availabilityStatus',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d668cde65f09760eb895451642740943ffbd1f640eaa2c94a0663fefdc6182d8"
    },
    "0b7d5547207b2f361eeabae46a9f009e68fc316e16f9dbd28f710590c76b1352": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ninteger_parameter_property = quicksight.CfnDashboard.IntegerParameterProperty(\n    name=\"name\",\n    values=[123]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nIntegerParameterProperty integerParameterProperty = new IntegerParameterProperty {\n    Name = \"name\",\n    Values = new [] { 123 }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nIntegerParameterProperty integerParameterProperty = IntegerParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(123))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nintegerParameterProperty := &integerParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []interface{}{\n\t\tjsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst integerParameterProperty: quicksight.CfnDashboard.IntegerParameterProperty = {\n  name: 'name',\n  values: [123],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.IntegerParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.IntegerParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst integerParameterProperty: quicksight.CfnDashboard.IntegerParameterProperty = {\n  name: 'name',\n  values: [123],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "eea49330d60b52b88b698c63f55ce20169732add73ccadf9aa2073a9fdcf0ac7"
    },
    "67c414435cb45e8f8ada5852017fdc8e3c772b3c777826f4c72b5241b4ac5ffc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nparameters_property = quicksight.CfnDashboard.ParametersProperty(\n    date_time_parameters=[quicksight.CfnDashboard.DateTimeParameterProperty(\n        name=\"name\",\n        values=[\"values\"]\n    )],\n    decimal_parameters=[quicksight.CfnDashboard.DecimalParameterProperty(\n        name=\"name\",\n        values=[123]\n    )],\n    integer_parameters=[quicksight.CfnDashboard.IntegerParameterProperty(\n        name=\"name\",\n        values=[123]\n    )],\n    string_parameters=[quicksight.CfnDashboard.StringParameterProperty(\n        name=\"name\",\n        values=[\"values\"]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nParametersProperty parametersProperty = new ParametersProperty {\n    DateTimeParameters = new [] { new DateTimeParameterProperty {\n        Name = \"name\",\n        Values = new [] { \"values\" }\n    } },\n    DecimalParameters = new [] { new DecimalParameterProperty {\n        Name = \"name\",\n        Values = new [] { 123 }\n    } },\n    IntegerParameters = new [] { new IntegerParameterProperty {\n        Name = \"name\",\n        Values = new [] { 123 }\n    } },\n    StringParameters = new [] { new StringParameterProperty {\n        Name = \"name\",\n        Values = new [] { \"values\" }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nParametersProperty parametersProperty = ParametersProperty.builder()\n        .dateTimeParameters(List.of(DateTimeParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(\"values\"))\n                .build()))\n        .decimalParameters(List.of(DecimalParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(123))\n                .build()))\n        .integerParameters(List.of(IntegerParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(123))\n                .build()))\n        .stringParameters(List.of(StringParameterProperty.builder()\n                .name(\"name\")\n                .values(List.of(\"values\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nparametersProperty := &parametersProperty{\n\tdateTimeParameters: []interface{}{\n\t\t&dateTimeParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []*string{\n\t\t\t\tjsii.String(\"values\"),\n\t\t\t},\n\t\t},\n\t},\n\tdecimalParameters: []interface{}{\n\t\t&decimalParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []interface{}{\n\t\t\t\tjsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tintegerParameters: []interface{}{\n\t\t&integerParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []interface{}{\n\t\t\t\tjsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tstringParameters: []interface{}{\n\t\t&stringParameterProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalues: []*string{\n\t\t\t\tjsii.String(\"values\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst parametersProperty: quicksight.CfnDashboard.ParametersProperty = {\n  dateTimeParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n  decimalParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  integerParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  stringParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.ParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.ParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst parametersProperty: quicksight.CfnDashboard.ParametersProperty = {\n  dateTimeParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n  decimalParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  integerParameters: [{\n    name: 'name',\n    values: [123],\n  }],\n  stringParameters: [{\n    name: 'name',\n    values: ['values'],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 17,
        "153": 2,
        "169": 1,
        "192": 8,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "fff03e0bbf8fa72da503cb84d27647eee748b5b2b7d32a7ac70b2dd23366b025"
    },
    "fd3a2e930a65dcc00a11b4cf34ab87c81e005add435dab0c65af1139e946ee81": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nresource_permission_property = quicksight.CfnDashboard.ResourcePermissionProperty(\n    actions=[\"actions\"],\n    principal=\"principal\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nResourcePermissionProperty resourcePermissionProperty = new ResourcePermissionProperty {\n    Actions = new [] { \"actions\" },\n    Principal = \"principal\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()\n        .actions(List.of(\"actions\"))\n        .principal(\"principal\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nresourcePermissionProperty := &resourcePermissionProperty{\n\tactions: []*string{\n\t\tjsii.String(\"actions\"),\n\t},\n\tprincipal: jsii.String(\"principal\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst resourcePermissionProperty: quicksight.CfnDashboard.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.ResourcePermissionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.ResourcePermissionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePermissionProperty: quicksight.CfnDashboard.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "202437a73445c6f6667104ff31b4219ee103310f9b6069a6c465f9a2f5e8e058"
    },
    "c734df59b588053472f8fa5d2f23956636011d040b0f475fe0871a2f1446240a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nsheet_controls_option_property = quicksight.CfnDashboard.SheetControlsOptionProperty(\n    visibility_state=\"visibilityState\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSheetControlsOptionProperty sheetControlsOptionProperty = new SheetControlsOptionProperty {\n    VisibilityState = \"visibilityState\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSheetControlsOptionProperty sheetControlsOptionProperty = SheetControlsOptionProperty.builder()\n        .visibilityState(\"visibilityState\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsheetControlsOptionProperty := &sheetControlsOptionProperty{\n\tvisibilityState: jsii.String(\"visibilityState\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst sheetControlsOptionProperty: quicksight.CfnDashboard.SheetControlsOptionProperty = {\n  visibilityState: 'visibilityState',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.SheetControlsOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.SheetControlsOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sheetControlsOptionProperty: quicksight.CfnDashboard.SheetControlsOptionProperty = {\n  visibilityState: 'visibilityState',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0e7cfa203ef29b1def5585c025d669c952731783bef6206f62cc75c3c0c0db1c"
    },
    "d924eb4a86d0d3439c2f6a450dd8cbd452ec0e309071334939e86b86ecd8e474": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nstring_parameter_property = quicksight.CfnDashboard.StringParameterProperty(\n    name=\"name\",\n    values=[\"values\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nStringParameterProperty stringParameterProperty = new StringParameterProperty {\n    Name = \"name\",\n    Values = new [] { \"values\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nStringParameterProperty stringParameterProperty = StringParameterProperty.builder()\n        .name(\"name\")\n        .values(List.of(\"values\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nstringParameterProperty := &stringParameterProperty{\n\tname: jsii.String(\"name\"),\n\tvalues: []*string{\n\t\tjsii.String(\"values\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst stringParameterProperty: quicksight.CfnDashboard.StringParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboard.StringParameterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboard.StringParameterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stringParameterProperty: quicksight.CfnDashboard.StringParameterProperty = {\n  name: 'name',\n  values: ['values'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "81b4429d59380bfda9e6e02ee630d2a2fddd649ae0a7ad1421722cf34c3ff17c"
    },
    "a811230c1ece9181f8c55b8232aca0f79d60588966321da3a9404afe4e724a74": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_dashboard_props = quicksight.CfnDashboardProps(\n    aws_account_id=\"awsAccountId\",\n    dashboard_id=\"dashboardId\",\n    source_entity=quicksight.CfnDashboard.DashboardSourceEntityProperty(\n        source_template=quicksight.CfnDashboard.DashboardSourceTemplateProperty(\n            arn=\"arn\",\n            data_set_references=[quicksight.CfnDashboard.DataSetReferenceProperty(\n                data_set_arn=\"dataSetArn\",\n                data_set_placeholder=\"dataSetPlaceholder\"\n            )]\n        )\n    ),\n\n    # the properties below are optional\n    dashboard_publish_options=quicksight.CfnDashboard.DashboardPublishOptionsProperty(\n        ad_hoc_filtering_option=quicksight.CfnDashboard.AdHocFilteringOptionProperty(\n            availability_status=\"availabilityStatus\"\n        ),\n        export_to_csv_option=quicksight.CfnDashboard.ExportToCSVOptionProperty(\n            availability_status=\"availabilityStatus\"\n        ),\n        sheet_controls_option=quicksight.CfnDashboard.SheetControlsOptionProperty(\n            visibility_state=\"visibilityState\"\n        )\n    ),\n    name=\"name\",\n    parameters=quicksight.CfnDashboard.ParametersProperty(\n        date_time_parameters=[quicksight.CfnDashboard.DateTimeParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )],\n        decimal_parameters=[quicksight.CfnDashboard.DecimalParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        integer_parameters=[quicksight.CfnDashboard.IntegerParameterProperty(\n            name=\"name\",\n            values=[123]\n        )],\n        string_parameters=[quicksight.CfnDashboard.StringParameterProperty(\n            name=\"name\",\n            values=[\"values\"]\n        )]\n    ),\n    permissions=[quicksight.CfnDashboard.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    theme_arn=\"themeArn\",\n    version_description=\"versionDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnDashboardProps cfnDashboardProps = new CfnDashboardProps {\n    AwsAccountId = \"awsAccountId\",\n    DashboardId = \"dashboardId\",\n    SourceEntity = new DashboardSourceEntityProperty {\n        SourceTemplate = new DashboardSourceTemplateProperty {\n            Arn = \"arn\",\n            DataSetReferences = new [] { new DataSetReferenceProperty {\n                DataSetArn = \"dataSetArn\",\n                DataSetPlaceholder = \"dataSetPlaceholder\"\n            } }\n        }\n    },\n\n    // the properties below are optional\n    DashboardPublishOptions = new DashboardPublishOptionsProperty {\n        AdHocFilteringOption = new AdHocFilteringOptionProperty {\n            AvailabilityStatus = \"availabilityStatus\"\n        },\n        ExportToCsvOption = new ExportToCSVOptionProperty {\n            AvailabilityStatus = \"availabilityStatus\"\n        },\n        SheetControlsOption = new SheetControlsOptionProperty {\n            VisibilityState = \"visibilityState\"\n        }\n    },\n    Name = \"name\",\n    Parameters = new ParametersProperty {\n        DateTimeParameters = new [] { new DateTimeParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } },\n        DecimalParameters = new [] { new DecimalParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        IntegerParameters = new [] { new IntegerParameterProperty {\n            Name = \"name\",\n            Values = new [] { 123 }\n        } },\n        StringParameters = new [] { new StringParameterProperty {\n            Name = \"name\",\n            Values = new [] { \"values\" }\n        } }\n    },\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    ThemeArn = \"themeArn\",\n    VersionDescription = \"versionDescription\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnDashboardProps cfnDashboardProps = CfnDashboardProps.builder()\n        .awsAccountId(\"awsAccountId\")\n        .dashboardId(\"dashboardId\")\n        .sourceEntity(DashboardSourceEntityProperty.builder()\n                .sourceTemplate(DashboardSourceTemplateProperty.builder()\n                        .arn(\"arn\")\n                        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                                .build()))\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .dashboardPublishOptions(DashboardPublishOptionsProperty.builder()\n                .adHocFilteringOption(AdHocFilteringOptionProperty.builder()\n                        .availabilityStatus(\"availabilityStatus\")\n                        .build())\n                .exportToCsvOption(ExportToCSVOptionProperty.builder()\n                        .availabilityStatus(\"availabilityStatus\")\n                        .build())\n                .sheetControlsOption(SheetControlsOptionProperty.builder()\n                        .visibilityState(\"visibilityState\")\n                        .build())\n                .build())\n        .name(\"name\")\n        .parameters(ParametersProperty.builder()\n                .dateTimeParameters(List.of(DateTimeParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .decimalParameters(List.of(DecimalParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .integerParameters(List.of(IntegerParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(123))\n                        .build()))\n                .stringParameters(List.of(StringParameterProperty.builder()\n                        .name(\"name\")\n                        .values(List.of(\"values\"))\n                        .build()))\n                .build())\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .themeArn(\"themeArn\")\n        .versionDescription(\"versionDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnDashboardProps := &cfnDashboardProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tdashboardId: jsii.String(\"dashboardId\"),\n\tsourceEntity: &dashboardSourceEntityProperty{\n\t\tsourceTemplate: &dashboardSourceTemplateProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tdataSetReferences: []interface{}{\n\t\t\t\t&dataSetReferenceProperty{\n\t\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tdashboardPublishOptions: &dashboardPublishOptionsProperty{\n\t\tadHocFilteringOption: &adHocFilteringOptionProperty{\n\t\t\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n\t\t},\n\t\texportToCsvOption: &exportToCSVOptionProperty{\n\t\t\tavailabilityStatus: jsii.String(\"availabilityStatus\"),\n\t\t},\n\t\tsheetControlsOption: &sheetControlsOptionProperty{\n\t\t\tvisibilityState: jsii.String(\"visibilityState\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tparameters: &parametersProperty{\n\t\tdateTimeParameters: []interface{}{\n\t\t\t&dateTimeParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tdecimalParameters: []interface{}{\n\t\t\t&decimalParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tintegerParameters: []interface{}{\n\t\t\t&integerParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []interface{}{\n\t\t\t\t\tjsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tstringParameters: []interface{}{\n\t\t\t&stringParameterProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalues: []*string{\n\t\t\t\t\tjsii.String(\"values\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tthemeArn: jsii.String(\"themeArn\"),\n\tversionDescription: jsii.String(\"versionDescription\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnDashboardProps: quicksight.CfnDashboardProps = {\n  awsAccountId: 'awsAccountId',\n  dashboardId: 'dashboardId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  dashboardPublishOptions: {\n    adHocFilteringOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    exportToCsvOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    sheetControlsOption: {\n      visibilityState: 'visibilityState',\n    },\n  },\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n  versionDescription: 'versionDescription',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDashboardProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDashboardProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDashboardProps: quicksight.CfnDashboardProps = {\n  awsAccountId: 'awsAccountId',\n  dashboardId: 'dashboardId',\n  sourceEntity: {\n    sourceTemplate: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n  },\n\n  // the properties below are optional\n  dashboardPublishOptions: {\n    adHocFilteringOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    exportToCsvOption: {\n      availabilityStatus: 'availabilityStatus',\n    },\n    sheetControlsOption: {\n      visibilityState: 'visibilityState',\n    },\n  },\n  name: 'name',\n  parameters: {\n    dateTimeParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n    decimalParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    integerParameters: [{\n      name: 'name',\n      values: [123],\n    }],\n    stringParameters: [{\n      name: 'name',\n      values: ['values'],\n    }],\n  },\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  themeArn: 'themeArn',\n  versionDescription: 'versionDescription',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 22,
        "75": 41,
        "153": 1,
        "169": 1,
        "192": 12,
        "193": 15,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 37,
        "290": 1
      },
      "fqnsFingerprint": "39650414a44d1768074a319650e1bb386a9fe886b6c67b39e32782f38da5162e"
    },
    "ade85a3dca4dafa5c259ed001f128b58cb8103d1f053dcf6a669d2c969e7320a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_data_set = quicksight.CfnDataSet(self, \"MyCfnDataSet\",\n    aws_account_id=\"awsAccountId\",\n    column_groups=[quicksight.CfnDataSet.ColumnGroupProperty(\n        geo_spatial_column_group=quicksight.CfnDataSet.GeoSpatialColumnGroupProperty(\n            columns=[\"columns\"],\n            name=\"name\",\n\n            # the properties below are optional\n            country_code=\"countryCode\"\n        )\n    )],\n    column_level_permission_rules=[quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty(\n        column_names=[\"columnNames\"],\n        principals=[\"principals\"]\n    )],\n    data_set_id=\"dataSetId\",\n    data_set_usage_configuration=quicksight.CfnDataSet.DataSetUsageConfigurationProperty(\n        disable_use_as_direct_query_source=False,\n        disable_use_as_imported_source=False\n    ),\n    field_folders={\n        \"field_folders_key\": quicksight.CfnDataSet.FieldFolderProperty(\n            columns=[\"columns\"],\n            description=\"description\"\n        )\n    },\n    import_mode=\"importMode\",\n    ingestion_wait_policy=quicksight.CfnDataSet.IngestionWaitPolicyProperty(\n        ingestion_wait_time_in_hours=123,\n        wait_for_spice_ingestion=False\n    ),\n    logical_table_map={\n        \"logical_table_map_key\": quicksight.CfnDataSet.LogicalTableProperty(\n            alias=\"alias\",\n            source=quicksight.CfnDataSet.LogicalTableSourceProperty(\n                data_set_arn=\"dataSetArn\",\n                join_instruction=quicksight.CfnDataSet.JoinInstructionProperty(\n                    left_operand=\"leftOperand\",\n                    on_clause=\"onClause\",\n                    right_operand=\"rightOperand\",\n                    type=\"type\",\n\n                    # the properties below are optional\n                    left_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n                        unique_key=False\n                    ),\n                    right_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n                        unique_key=False\n                    )\n                ),\n                physical_table_id=\"physicalTableId\"\n            ),\n\n            # the properties below are optional\n            data_transforms=[quicksight.CfnDataSet.TransformOperationProperty(\n                cast_column_type_operation=quicksight.CfnDataSet.CastColumnTypeOperationProperty(\n                    column_name=\"columnName\",\n                    new_column_type=\"newColumnType\",\n\n                    # the properties below are optional\n                    format=\"format\"\n                ),\n                create_columns_operation=quicksight.CfnDataSet.CreateColumnsOperationProperty(\n                    columns=[quicksight.CfnDataSet.CalculatedColumnProperty(\n                        column_id=\"columnId\",\n                        column_name=\"columnName\",\n                        expression=\"expression\"\n                    )]\n                ),\n                filter_operation=quicksight.CfnDataSet.FilterOperationProperty(\n                    condition_expression=\"conditionExpression\"\n                ),\n                project_operation=quicksight.CfnDataSet.ProjectOperationProperty(\n                    projected_columns=[\"projectedColumns\"]\n                ),\n                rename_column_operation=quicksight.CfnDataSet.RenameColumnOperationProperty(\n                    column_name=\"columnName\",\n                    new_column_name=\"newColumnName\"\n                ),\n                tag_column_operation=quicksight.CfnDataSet.TagColumnOperationProperty(\n                    column_name=\"columnName\",\n                    tags=[quicksight.CfnDataSet.ColumnTagProperty(\n                        column_description=quicksight.CfnDataSet.ColumnDescriptionProperty(\n                            text=\"text\"\n                        ),\n                        column_geographic_role=\"columnGeographicRole\"\n                    )]\n                )\n            )]\n        )\n    },\n    name=\"name\",\n    permissions=[quicksight.CfnDataSet.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    physical_table_map={\n        \"physical_table_map_key\": quicksight.CfnDataSet.PhysicalTableProperty(\n            custom_sql=quicksight.CfnDataSet.CustomSqlProperty(\n                columns=[quicksight.CfnDataSet.InputColumnProperty(\n                    name=\"name\",\n                    type=\"type\"\n                )],\n                data_source_arn=\"dataSourceArn\",\n                name=\"name\",\n                sql_query=\"sqlQuery\"\n            ),\n            relational_table=quicksight.CfnDataSet.RelationalTableProperty(\n                data_source_arn=\"dataSourceArn\",\n                input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n                    name=\"name\",\n                    type=\"type\"\n                )],\n                name=\"name\",\n\n                # the properties below are optional\n                catalog=\"catalog\",\n                schema=\"schema\"\n            ),\n            s3_source=quicksight.CfnDataSet.S3SourceProperty(\n                data_source_arn=\"dataSourceArn\",\n                input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n                    name=\"name\",\n                    type=\"type\"\n                )],\n\n                # the properties below are optional\n                upload_settings=quicksight.CfnDataSet.UploadSettingsProperty(\n                    contains_header=False,\n                    delimiter=\"delimiter\",\n                    format=\"format\",\n                    start_from_row=123,\n                    text_qualifier=\"textQualifier\"\n                )\n            )\n        )\n    },\n    row_level_permission_data_set=quicksight.CfnDataSet.RowLevelPermissionDataSetProperty(\n        arn=\"arn\",\n        permission_policy=\"permissionPolicy\",\n\n        # the properties below are optional\n        format_version=\"formatVersion\",\n        namespace=\"namespace\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnDataSet cfnDataSet = new CfnDataSet(this, \"MyCfnDataSet\", new CfnDataSetProps {\n    AwsAccountId = \"awsAccountId\",\n    ColumnGroups = new [] { new ColumnGroupProperty {\n        GeoSpatialColumnGroup = new GeoSpatialColumnGroupProperty {\n            Columns = new [] { \"columns\" },\n            Name = \"name\",\n\n            // the properties below are optional\n            CountryCode = \"countryCode\"\n        }\n    } },\n    ColumnLevelPermissionRules = new [] { new ColumnLevelPermissionRuleProperty {\n        ColumnNames = new [] { \"columnNames\" },\n        Principals = new [] { \"principals\" }\n    } },\n    DataSetId = \"dataSetId\",\n    DataSetUsageConfiguration = new DataSetUsageConfigurationProperty {\n        DisableUseAsDirectQuerySource = false,\n        DisableUseAsImportedSource = false\n    },\n    FieldFolders = new Dictionary<string, object> {\n        { \"fieldFoldersKey\", new FieldFolderProperty {\n            Columns = new [] { \"columns\" },\n            Description = \"description\"\n        } }\n    },\n    ImportMode = \"importMode\",\n    IngestionWaitPolicy = new IngestionWaitPolicyProperty {\n        IngestionWaitTimeInHours = 123,\n        WaitForSpiceIngestion = false\n    },\n    LogicalTableMap = new Dictionary<string, object> {\n        { \"logicalTableMapKey\", new LogicalTableProperty {\n            Alias = \"alias\",\n            Source = new LogicalTableSourceProperty {\n                DataSetArn = \"dataSetArn\",\n                JoinInstruction = new JoinInstructionProperty {\n                    LeftOperand = \"leftOperand\",\n                    OnClause = \"onClause\",\n                    RightOperand = \"rightOperand\",\n                    Type = \"type\",\n\n                    // the properties below are optional\n                    LeftJoinKeyProperties = new JoinKeyPropertiesProperty {\n                        UniqueKey = false\n                    },\n                    RightJoinKeyProperties = new JoinKeyPropertiesProperty {\n                        UniqueKey = false\n                    }\n                },\n                PhysicalTableId = \"physicalTableId\"\n            },\n\n            // the properties below are optional\n            DataTransforms = new [] { new TransformOperationProperty {\n                CastColumnTypeOperation = new CastColumnTypeOperationProperty {\n                    ColumnName = \"columnName\",\n                    NewColumnType = \"newColumnType\",\n\n                    // the properties below are optional\n                    Format = \"format\"\n                },\n                CreateColumnsOperation = new CreateColumnsOperationProperty {\n                    Columns = new [] { new CalculatedColumnProperty {\n                        ColumnId = \"columnId\",\n                        ColumnName = \"columnName\",\n                        Expression = \"expression\"\n                    } }\n                },\n                FilterOperation = new FilterOperationProperty {\n                    ConditionExpression = \"conditionExpression\"\n                },\n                ProjectOperation = new ProjectOperationProperty {\n                    ProjectedColumns = new [] { \"projectedColumns\" }\n                },\n                RenameColumnOperation = new RenameColumnOperationProperty {\n                    ColumnName = \"columnName\",\n                    NewColumnName = \"newColumnName\"\n                },\n                TagColumnOperation = new TagColumnOperationProperty {\n                    ColumnName = \"columnName\",\n                    Tags = new [] { new ColumnTagProperty {\n                        ColumnDescription = new ColumnDescriptionProperty {\n                            Text = \"text\"\n                        },\n                        ColumnGeographicRole = \"columnGeographicRole\"\n                    } }\n                }\n            } }\n        } }\n    },\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    PhysicalTableMap = new Dictionary<string, object> {\n        { \"physicalTableMapKey\", new PhysicalTableProperty {\n            CustomSql = new CustomSqlProperty {\n                Columns = new [] { new InputColumnProperty {\n                    Name = \"name\",\n                    Type = \"type\"\n                } },\n                DataSourceArn = \"dataSourceArn\",\n                Name = \"name\",\n                SqlQuery = \"sqlQuery\"\n            },\n            RelationalTable = new RelationalTableProperty {\n                DataSourceArn = \"dataSourceArn\",\n                InputColumns = new [] { new InputColumnProperty {\n                    Name = \"name\",\n                    Type = \"type\"\n                } },\n                Name = \"name\",\n\n                // the properties below are optional\n                Catalog = \"catalog\",\n                Schema = \"schema\"\n            },\n            S3Source = new S3SourceProperty {\n                DataSourceArn = \"dataSourceArn\",\n                InputColumns = new [] { new InputColumnProperty {\n                    Name = \"name\",\n                    Type = \"type\"\n                } },\n\n                // the properties below are optional\n                UploadSettings = new UploadSettingsProperty {\n                    ContainsHeader = false,\n                    Delimiter = \"delimiter\",\n                    Format = \"format\",\n                    StartFromRow = 123,\n                    TextQualifier = \"textQualifier\"\n                }\n            }\n        } }\n    },\n    RowLevelPermissionDataSet = new RowLevelPermissionDataSetProperty {\n        Arn = \"arn\",\n        PermissionPolicy = \"permissionPolicy\",\n\n        // the properties below are optional\n        FormatVersion = \"formatVersion\",\n        Namespace = \"namespace\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnDataSet cfnDataSet = CfnDataSet.Builder.create(this, \"MyCfnDataSet\")\n        .awsAccountId(\"awsAccountId\")\n        .columnGroups(List.of(ColumnGroupProperty.builder()\n                .geoSpatialColumnGroup(GeoSpatialColumnGroupProperty.builder()\n                        .columns(List.of(\"columns\"))\n                        .name(\"name\")\n\n                        // the properties below are optional\n                        .countryCode(\"countryCode\")\n                        .build())\n                .build()))\n        .columnLevelPermissionRules(List.of(ColumnLevelPermissionRuleProperty.builder()\n                .columnNames(List.of(\"columnNames\"))\n                .principals(List.of(\"principals\"))\n                .build()))\n        .dataSetId(\"dataSetId\")\n        .dataSetUsageConfiguration(DataSetUsageConfigurationProperty.builder()\n                .disableUseAsDirectQuerySource(false)\n                .disableUseAsImportedSource(false)\n                .build())\n        .fieldFolders(Map.of(\n                \"fieldFoldersKey\", FieldFolderProperty.builder()\n                        .columns(List.of(\"columns\"))\n                        .description(\"description\")\n                        .build()))\n        .importMode(\"importMode\")\n        .ingestionWaitPolicy(IngestionWaitPolicyProperty.builder()\n                .ingestionWaitTimeInHours(123)\n                .waitForSpiceIngestion(false)\n                .build())\n        .logicalTableMap(Map.of(\n                \"logicalTableMapKey\", LogicalTableProperty.builder()\n                        .alias(\"alias\")\n                        .source(LogicalTableSourceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .joinInstruction(JoinInstructionProperty.builder()\n                                        .leftOperand(\"leftOperand\")\n                                        .onClause(\"onClause\")\n                                        .rightOperand(\"rightOperand\")\n                                        .type(\"type\")\n\n                                        // the properties below are optional\n                                        .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                                                .uniqueKey(false)\n                                                .build())\n                                        .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                                                .uniqueKey(false)\n                                                .build())\n                                        .build())\n                                .physicalTableId(\"physicalTableId\")\n                                .build())\n\n                        // the properties below are optional\n                        .dataTransforms(List.of(TransformOperationProperty.builder()\n                                .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()\n                                        .columnName(\"columnName\")\n                                        .newColumnType(\"newColumnType\")\n\n                                        // the properties below are optional\n                                        .format(\"format\")\n                                        .build())\n                                .createColumnsOperation(CreateColumnsOperationProperty.builder()\n                                        .columns(List.of(CalculatedColumnProperty.builder()\n                                                .columnId(\"columnId\")\n                                                .columnName(\"columnName\")\n                                                .expression(\"expression\")\n                                                .build()))\n                                        .build())\n                                .filterOperation(FilterOperationProperty.builder()\n                                        .conditionExpression(\"conditionExpression\")\n                                        .build())\n                                .projectOperation(ProjectOperationProperty.builder()\n                                        .projectedColumns(List.of(\"projectedColumns\"))\n                                        .build())\n                                .renameColumnOperation(RenameColumnOperationProperty.builder()\n                                        .columnName(\"columnName\")\n                                        .newColumnName(\"newColumnName\")\n                                        .build())\n                                .tagColumnOperation(TagColumnOperationProperty.builder()\n                                        .columnName(\"columnName\")\n                                        .tags(List.of(ColumnTagProperty.builder()\n                                                .columnDescription(ColumnDescriptionProperty.builder()\n                                                        .text(\"text\")\n                                                        .build())\n                                                .columnGeographicRole(\"columnGeographicRole\")\n                                                .build()))\n                                        .build())\n                                .build()))\n                        .build()))\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .physicalTableMap(Map.of(\n                \"physicalTableMapKey\", PhysicalTableProperty.builder()\n                        .customSql(CustomSqlProperty.builder()\n                                .columns(List.of(InputColumnProperty.builder()\n                                        .name(\"name\")\n                                        .type(\"type\")\n                                        .build()))\n                                .dataSourceArn(\"dataSourceArn\")\n                                .name(\"name\")\n                                .sqlQuery(\"sqlQuery\")\n                                .build())\n                        .relationalTable(RelationalTableProperty.builder()\n                                .dataSourceArn(\"dataSourceArn\")\n                                .inputColumns(List.of(InputColumnProperty.builder()\n                                        .name(\"name\")\n                                        .type(\"type\")\n                                        .build()))\n                                .name(\"name\")\n\n                                // the properties below are optional\n                                .catalog(\"catalog\")\n                                .schema(\"schema\")\n                                .build())\n                        .s3Source(S3SourceProperty.builder()\n                                .dataSourceArn(\"dataSourceArn\")\n                                .inputColumns(List.of(InputColumnProperty.builder()\n                                        .name(\"name\")\n                                        .type(\"type\")\n                                        .build()))\n\n                                // the properties below are optional\n                                .uploadSettings(UploadSettingsProperty.builder()\n                                        .containsHeader(false)\n                                        .delimiter(\"delimiter\")\n                                        .format(\"format\")\n                                        .startFromRow(123)\n                                        .textQualifier(\"textQualifier\")\n                                        .build())\n                                .build())\n                        .build()))\n        .rowLevelPermissionDataSet(RowLevelPermissionDataSetProperty.builder()\n                .arn(\"arn\")\n                .permissionPolicy(\"permissionPolicy\")\n\n                // the properties below are optional\n                .formatVersion(\"formatVersion\")\n                .namespace(\"namespace\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnDataSet := quicksight.NewCfnDataSet(this, jsii.String(\"MyCfnDataSet\"), &cfnDataSetProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tcolumnGroups: []interface{}{\n\t\t&columnGroupProperty{\n\t\t\tgeoSpatialColumnGroup: &geoSpatialColumnGroupProperty{\n\t\t\t\tcolumns: []*string{\n\t\t\t\t\tjsii.String(\"columns\"),\n\t\t\t\t},\n\t\t\t\tname: jsii.String(\"name\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\t\t},\n\t\t},\n\t},\n\tcolumnLevelPermissionRules: []interface{}{\n\t\t&columnLevelPermissionRuleProperty{\n\t\t\tcolumnNames: []*string{\n\t\t\t\tjsii.String(\"columnNames\"),\n\t\t\t},\n\t\t\tprincipals: []*string{\n\t\t\t\tjsii.String(\"principals\"),\n\t\t\t},\n\t\t},\n\t},\n\tdataSetId: jsii.String(\"dataSetId\"),\n\tdataSetUsageConfiguration: &dataSetUsageConfigurationProperty{\n\t\tdisableUseAsDirectQuerySource: jsii.Boolean(false),\n\t\tdisableUseAsImportedSource: jsii.Boolean(false),\n\t},\n\tfieldFolders: map[string]interface{}{\n\t\t\"fieldFoldersKey\": &FieldFolderProperty{\n\t\t\t\"columns\": []*string{\n\t\t\t\tjsii.String(\"columns\"),\n\t\t\t},\n\t\t\t\"description\": jsii.String(\"description\"),\n\t\t},\n\t},\n\timportMode: jsii.String(\"importMode\"),\n\tingestionWaitPolicy: &ingestionWaitPolicyProperty{\n\t\tingestionWaitTimeInHours: jsii.Number(123),\n\t\twaitForSpiceIngestion: jsii.Boolean(false),\n\t},\n\tlogicalTableMap: map[string]interface{}{\n\t\t\"logicalTableMapKey\": &LogicalTableProperty{\n\t\t\t\"alias\": jsii.String(\"alias\"),\n\t\t\t\"source\": &LogicalTableSourceProperty{\n\t\t\t\t\"dataSetArn\": jsii.String(\"dataSetArn\"),\n\t\t\t\t\"joinInstruction\": &JoinInstructionProperty{\n\t\t\t\t\t\"leftOperand\": jsii.String(\"leftOperand\"),\n\t\t\t\t\t\"onClause\": jsii.String(\"onClause\"),\n\t\t\t\t\t\"rightOperand\": jsii.String(\"rightOperand\"),\n\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\"leftJoinKeyProperties\": &JoinKeyPropertiesProperty{\n\t\t\t\t\t\t\"uniqueKey\": jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t\t\"rightJoinKeyProperties\": &JoinKeyPropertiesProperty{\n\t\t\t\t\t\t\"uniqueKey\": jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"physicalTableId\": jsii.String(\"physicalTableId\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\t\"dataTransforms\": []interface{}{\n\t\t\t\t&TransformOperationProperty{\n\t\t\t\t\t\"castColumnTypeOperation\": &CastColumnTypeOperationProperty{\n\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\"newColumnType\": jsii.String(\"newColumnType\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\t\"format\": jsii.String(\"format\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"createColumnsOperation\": &CreateColumnsOperationProperty{\n\t\t\t\t\t\t\"columns\": []interface{}{\n\t\t\t\t\t\t\t&CalculatedColumnProperty{\n\t\t\t\t\t\t\t\t\"columnId\": jsii.String(\"columnId\"),\n\t\t\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\t\t\"expression\": jsii.String(\"expression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"filterOperation\": &FilterOperationProperty{\n\t\t\t\t\t\t\"conditionExpression\": jsii.String(\"conditionExpression\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"projectOperation\": &ProjectOperationProperty{\n\t\t\t\t\t\t\"projectedColumns\": []*string{\n\t\t\t\t\t\t\tjsii.String(\"projectedColumns\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"renameColumnOperation\": &RenameColumnOperationProperty{\n\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\"newColumnName\": jsii.String(\"newColumnName\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"tagColumnOperation\": &TagColumnOperationProperty{\n\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\"tags\": []ColumnTagProperty{\n\t\t\t\t\t\t\t&ColumnTagProperty{\n\t\t\t\t\t\t\t\t\"columnDescription\": &ColumnDescriptionProperty{\n\t\t\t\t\t\t\t\t\t\"text\": jsii.String(\"text\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"columnGeographicRole\": jsii.String(\"columnGeographicRole\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\tphysicalTableMap: map[string]interface{}{\n\t\t\"physicalTableMapKey\": &PhysicalTableProperty{\n\t\t\t\"customSql\": &CustomSqlProperty{\n\t\t\t\t\"columns\": []interface{}{\n\t\t\t\t\t&InputColumnProperty{\n\t\t\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"dataSourceArn\": jsii.String(\"dataSourceArn\"),\n\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\"sqlQuery\": jsii.String(\"sqlQuery\"),\n\t\t\t},\n\t\t\t\"relationalTable\": &RelationalTableProperty{\n\t\t\t\t\"dataSourceArn\": jsii.String(\"dataSourceArn\"),\n\t\t\t\t\"inputColumns\": []interface{}{\n\t\t\t\t\t&InputColumnProperty{\n\t\t\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"name\": jsii.String(\"name\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\t\"catalog\": jsii.String(\"catalog\"),\n\t\t\t\t\"schema\": jsii.String(\"schema\"),\n\t\t\t},\n\t\t\t\"s3Source\": &S3SourceProperty{\n\t\t\t\t\"dataSourceArn\": jsii.String(\"dataSourceArn\"),\n\t\t\t\t\"inputColumns\": []interface{}{\n\t\t\t\t\t&InputColumnProperty{\n\t\t\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\t\"uploadSettings\": &UploadSettingsProperty{\n\t\t\t\t\t\"containsHeader\": jsii.Boolean(false),\n\t\t\t\t\t\"delimiter\": jsii.String(\"delimiter\"),\n\t\t\t\t\t\"format\": jsii.String(\"format\"),\n\t\t\t\t\t\"startFromRow\": jsii.Number(123),\n\t\t\t\t\t\"textQualifier\": jsii.String(\"textQualifier\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\trowLevelPermissionDataSet: &rowLevelPermissionDataSetProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tpermissionPolicy: jsii.String(\"permissionPolicy\"),\n\n\t\t// the properties below are optional\n\t\tformatVersion: jsii.String(\"formatVersion\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnDataSet = new quicksight.CfnDataSet(this, 'MyCfnDataSet', /* all optional props */ {\n  awsAccountId: 'awsAccountId',\n  columnGroups: [{\n    geoSpatialColumnGroup: {\n      columns: ['columns'],\n      name: 'name',\n\n      // the properties below are optional\n      countryCode: 'countryCode',\n    },\n  }],\n  columnLevelPermissionRules: [{\n    columnNames: ['columnNames'],\n    principals: ['principals'],\n  }],\n  dataSetId: 'dataSetId',\n  dataSetUsageConfiguration: {\n    disableUseAsDirectQuerySource: false,\n    disableUseAsImportedSource: false,\n  },\n  fieldFolders: {\n    fieldFoldersKey: {\n      columns: ['columns'],\n      description: 'description',\n    },\n  },\n  importMode: 'importMode',\n  ingestionWaitPolicy: {\n    ingestionWaitTimeInHours: 123,\n    waitForSpiceIngestion: false,\n  },\n  logicalTableMap: {\n    logicalTableMapKey: {\n      alias: 'alias',\n      source: {\n        dataSetArn: 'dataSetArn',\n        joinInstruction: {\n          leftOperand: 'leftOperand',\n          onClause: 'onClause',\n          rightOperand: 'rightOperand',\n          type: 'type',\n\n          // the properties below are optional\n          leftJoinKeyProperties: {\n            uniqueKey: false,\n          },\n          rightJoinKeyProperties: {\n            uniqueKey: false,\n          },\n        },\n        physicalTableId: 'physicalTableId',\n      },\n\n      // the properties below are optional\n      dataTransforms: [{\n        castColumnTypeOperation: {\n          columnName: 'columnName',\n          newColumnType: 'newColumnType',\n\n          // the properties below are optional\n          format: 'format',\n        },\n        createColumnsOperation: {\n          columns: [{\n            columnId: 'columnId',\n            columnName: 'columnName',\n            expression: 'expression',\n          }],\n        },\n        filterOperation: {\n          conditionExpression: 'conditionExpression',\n        },\n        projectOperation: {\n          projectedColumns: ['projectedColumns'],\n        },\n        renameColumnOperation: {\n          columnName: 'columnName',\n          newColumnName: 'newColumnName',\n        },\n        tagColumnOperation: {\n          columnName: 'columnName',\n          tags: [{\n            columnDescription: {\n              text: 'text',\n            },\n            columnGeographicRole: 'columnGeographicRole',\n          }],\n        },\n      }],\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  physicalTableMap: {\n    physicalTableMapKey: {\n      customSql: {\n        columns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        dataSourceArn: 'dataSourceArn',\n        name: 'name',\n        sqlQuery: 'sqlQuery',\n      },\n      relationalTable: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        name: 'name',\n\n        // the properties below are optional\n        catalog: 'catalog',\n        schema: 'schema',\n      },\n      s3Source: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n\n        // the properties below are optional\n        uploadSettings: {\n          containsHeader: false,\n          delimiter: 'delimiter',\n          format: 'format',\n          startFromRow: 123,\n          textQualifier: 'textQualifier',\n        },\n      },\n    },\n  },\n  rowLevelPermissionDataSet: {\n    arn: 'arn',\n    permissionPolicy: 'permissionPolicy',\n\n    // the properties below are optional\n    formatVersion: 'formatVersion',\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet",
        "@aws-cdk/aws-quicksight.CfnDataSetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDataSet = new quicksight.CfnDataSet(this, 'MyCfnDataSet', /* all optional props */ {\n  awsAccountId: 'awsAccountId',\n  columnGroups: [{\n    geoSpatialColumnGroup: {\n      columns: ['columns'],\n      name: 'name',\n\n      // the properties below are optional\n      countryCode: 'countryCode',\n    },\n  }],\n  columnLevelPermissionRules: [{\n    columnNames: ['columnNames'],\n    principals: ['principals'],\n  }],\n  dataSetId: 'dataSetId',\n  dataSetUsageConfiguration: {\n    disableUseAsDirectQuerySource: false,\n    disableUseAsImportedSource: false,\n  },\n  fieldFolders: {\n    fieldFoldersKey: {\n      columns: ['columns'],\n      description: 'description',\n    },\n  },\n  importMode: 'importMode',\n  ingestionWaitPolicy: {\n    ingestionWaitTimeInHours: 123,\n    waitForSpiceIngestion: false,\n  },\n  logicalTableMap: {\n    logicalTableMapKey: {\n      alias: 'alias',\n      source: {\n        dataSetArn: 'dataSetArn',\n        joinInstruction: {\n          leftOperand: 'leftOperand',\n          onClause: 'onClause',\n          rightOperand: 'rightOperand',\n          type: 'type',\n\n          // the properties below are optional\n          leftJoinKeyProperties: {\n            uniqueKey: false,\n          },\n          rightJoinKeyProperties: {\n            uniqueKey: false,\n          },\n        },\n        physicalTableId: 'physicalTableId',\n      },\n\n      // the properties below are optional\n      dataTransforms: [{\n        castColumnTypeOperation: {\n          columnName: 'columnName',\n          newColumnType: 'newColumnType',\n\n          // the properties below are optional\n          format: 'format',\n        },\n        createColumnsOperation: {\n          columns: [{\n            columnId: 'columnId',\n            columnName: 'columnName',\n            expression: 'expression',\n          }],\n        },\n        filterOperation: {\n          conditionExpression: 'conditionExpression',\n        },\n        projectOperation: {\n          projectedColumns: ['projectedColumns'],\n        },\n        renameColumnOperation: {\n          columnName: 'columnName',\n          newColumnName: 'newColumnName',\n        },\n        tagColumnOperation: {\n          columnName: 'columnName',\n          tags: [{\n            columnDescription: {\n              text: 'text',\n            },\n            columnGeographicRole: 'columnGeographicRole',\n          }],\n        },\n      }],\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  physicalTableMap: {\n    physicalTableMapKey: {\n      customSql: {\n        columns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        dataSourceArn: 'dataSourceArn',\n        name: 'name',\n        sqlQuery: 'sqlQuery',\n      },\n      relationalTable: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        name: 'name',\n\n        // the properties below are optional\n        catalog: 'catalog',\n        schema: 'schema',\n      },\n      s3Source: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n\n        // the properties below are optional\n        uploadSettings: {\n          containsHeader: false,\n          delimiter: 'delimiter',\n          format: 'format',\n          startFromRow: 123,\n          textQualifier: 'textQualifier',\n        },\n      },\n    },\n  },\n  rowLevelPermissionDataSet: {\n    arn: 'arn',\n    permissionPolicy: 'permissionPolicy',\n\n    // the properties below are optional\n    formatVersion: 'formatVersion',\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 58,
        "75": 103,
        "91": 6,
        "104": 1,
        "192": 16,
        "193": 36,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 99,
        "290": 1
      },
      "fqnsFingerprint": "0f82dda8c06c6cd927f388008c17a1988fa015e96a8ccc1915e660be10a835ea"
    },
    "0f4887fa7df31b1c183a611ed63b1ca0397cb48299c93231ef02b65aeba481df": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncalculated_column_property = quicksight.CfnDataSet.CalculatedColumnProperty(\n    column_id=\"columnId\",\n    column_name=\"columnName\",\n    expression=\"expression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCalculatedColumnProperty calculatedColumnProperty = new CalculatedColumnProperty {\n    ColumnId = \"columnId\",\n    ColumnName = \"columnName\",\n    Expression = \"expression\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCalculatedColumnProperty calculatedColumnProperty = CalculatedColumnProperty.builder()\n        .columnId(\"columnId\")\n        .columnName(\"columnName\")\n        .expression(\"expression\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncalculatedColumnProperty := &calculatedColumnProperty{\n\tcolumnId: jsii.String(\"columnId\"),\n\tcolumnName: jsii.String(\"columnName\"),\n\texpression: jsii.String(\"expression\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst calculatedColumnProperty: quicksight.CfnDataSet.CalculatedColumnProperty = {\n  columnId: 'columnId',\n  columnName: 'columnName',\n  expression: 'expression',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.CalculatedColumnProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.CalculatedColumnProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst calculatedColumnProperty: quicksight.CfnDataSet.CalculatedColumnProperty = {\n  columnId: 'columnId',\n  columnName: 'columnName',\n  expression: 'expression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1693e98c6ad9b125ee42dbfdbea53fe413454c3bad4f8876504bf9900d35a5b7"
    },
    "aa253196a407a19dbeb1de96471c5613c9e2feb503c18cbeec04db0b78a675f6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncast_column_type_operation_property = quicksight.CfnDataSet.CastColumnTypeOperationProperty(\n    column_name=\"columnName\",\n    new_column_type=\"newColumnType\",\n\n    # the properties below are optional\n    format=\"format\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCastColumnTypeOperationProperty castColumnTypeOperationProperty = new CastColumnTypeOperationProperty {\n    ColumnName = \"columnName\",\n    NewColumnType = \"newColumnType\",\n\n    // the properties below are optional\n    Format = \"format\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCastColumnTypeOperationProperty castColumnTypeOperationProperty = CastColumnTypeOperationProperty.builder()\n        .columnName(\"columnName\")\n        .newColumnType(\"newColumnType\")\n\n        // the properties below are optional\n        .format(\"format\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncastColumnTypeOperationProperty := &castColumnTypeOperationProperty{\n\tcolumnName: jsii.String(\"columnName\"),\n\tnewColumnType: jsii.String(\"newColumnType\"),\n\n\t// the properties below are optional\n\tformat: jsii.String(\"format\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst castColumnTypeOperationProperty: quicksight.CfnDataSet.CastColumnTypeOperationProperty = {\n  columnName: 'columnName',\n  newColumnType: 'newColumnType',\n\n  // the properties below are optional\n  format: 'format',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.CastColumnTypeOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.CastColumnTypeOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst castColumnTypeOperationProperty: quicksight.CfnDataSet.CastColumnTypeOperationProperty = {\n  columnName: 'columnName',\n  newColumnType: 'newColumnType',\n\n  // the properties below are optional\n  format: 'format',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "292fcf4821848bb1683fb03513d79678ced4ae4c9e7a4d78bdb9a0df92d0d888"
    },
    "c7396671acb0f5d3c3726a9bff544af3bb0f7eecfda625412d80fa483a4e101c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncolumn_description_property = quicksight.CfnDataSet.ColumnDescriptionProperty(\n    text=\"text\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nColumnDescriptionProperty columnDescriptionProperty = new ColumnDescriptionProperty {\n    Text = \"text\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nColumnDescriptionProperty columnDescriptionProperty = ColumnDescriptionProperty.builder()\n        .text(\"text\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncolumnDescriptionProperty := &columnDescriptionProperty{\n\ttext: jsii.String(\"text\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst columnDescriptionProperty: quicksight.CfnDataSet.ColumnDescriptionProperty = {\n  text: 'text',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.ColumnDescriptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.ColumnDescriptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst columnDescriptionProperty: quicksight.CfnDataSet.ColumnDescriptionProperty = {\n  text: 'text',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "218a1d745855d03fb77e699cf38d7ed8731adb4b89dd4866ac444db08e905841"
    },
    "251b7745e08be0314908326c42325910471ffcad714a132ca2e91ade8d75f37d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncolumn_group_property = quicksight.CfnDataSet.ColumnGroupProperty(\n    geo_spatial_column_group=quicksight.CfnDataSet.GeoSpatialColumnGroupProperty(\n        columns=[\"columns\"],\n        name=\"name\",\n\n        # the properties below are optional\n        country_code=\"countryCode\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nColumnGroupProperty columnGroupProperty = new ColumnGroupProperty {\n    GeoSpatialColumnGroup = new GeoSpatialColumnGroupProperty {\n        Columns = new [] { \"columns\" },\n        Name = \"name\",\n\n        // the properties below are optional\n        CountryCode = \"countryCode\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nColumnGroupProperty columnGroupProperty = ColumnGroupProperty.builder()\n        .geoSpatialColumnGroup(GeoSpatialColumnGroupProperty.builder()\n                .columns(List.of(\"columns\"))\n                .name(\"name\")\n\n                // the properties below are optional\n                .countryCode(\"countryCode\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncolumnGroupProperty := &columnGroupProperty{\n\tgeoSpatialColumnGroup: &geoSpatialColumnGroupProperty{\n\t\tcolumns: []*string{\n\t\t\tjsii.String(\"columns\"),\n\t\t},\n\t\tname: jsii.String(\"name\"),\n\n\t\t// the properties below are optional\n\t\tcountryCode: jsii.String(\"countryCode\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst columnGroupProperty: quicksight.CfnDataSet.ColumnGroupProperty = {\n  geoSpatialColumnGroup: {\n    columns: ['columns'],\n    name: 'name',\n\n    // the properties below are optional\n    countryCode: 'countryCode',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.ColumnGroupProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.ColumnGroupProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst columnGroupProperty: quicksight.CfnDataSet.ColumnGroupProperty = {\n  geoSpatialColumnGroup: {\n    columns: ['columns'],\n    name: 'name',\n\n    // the properties below are optional\n    countryCode: 'countryCode',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0c290b4187b6d4a464c0d328ad34041628981a7a7c58573b7d94bcd0088491d0"
    },
    "9d052bedc5449680df629afaec218bfc79db5ab8de5a077b6b20bec95af2fcde": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncolumn_level_permission_rule_property = quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty(\n    column_names=[\"columnNames\"],\n    principals=[\"principals\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nColumnLevelPermissionRuleProperty columnLevelPermissionRuleProperty = new ColumnLevelPermissionRuleProperty {\n    ColumnNames = new [] { \"columnNames\" },\n    Principals = new [] { \"principals\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nColumnLevelPermissionRuleProperty columnLevelPermissionRuleProperty = ColumnLevelPermissionRuleProperty.builder()\n        .columnNames(List.of(\"columnNames\"))\n        .principals(List.of(\"principals\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncolumnLevelPermissionRuleProperty := &columnLevelPermissionRuleProperty{\n\tcolumnNames: []*string{\n\t\tjsii.String(\"columnNames\"),\n\t},\n\tprincipals: []*string{\n\t\tjsii.String(\"principals\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst columnLevelPermissionRuleProperty: quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty = {\n  columnNames: ['columnNames'],\n  principals: ['principals'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst columnLevelPermissionRuleProperty: quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty = {\n  columnNames: ['columnNames'],\n  principals: ['principals'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8ccd106e81358ff36e0e54923410175a1e7aa077196efda0d2816ed4b166b448"
    },
    "16f2cd6077af580974837835d9c930cdbfb50554e5a81d511dcbfdb97214fc1a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncolumn_tag_property = quicksight.CfnDataSet.ColumnTagProperty(\n    column_description=quicksight.CfnDataSet.ColumnDescriptionProperty(\n        text=\"text\"\n    ),\n    column_geographic_role=\"columnGeographicRole\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nColumnTagProperty columnTagProperty = new ColumnTagProperty {\n    ColumnDescription = new ColumnDescriptionProperty {\n        Text = \"text\"\n    },\n    ColumnGeographicRole = \"columnGeographicRole\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nColumnTagProperty columnTagProperty = ColumnTagProperty.builder()\n        .columnDescription(ColumnDescriptionProperty.builder()\n                .text(\"text\")\n                .build())\n        .columnGeographicRole(\"columnGeographicRole\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncolumnTagProperty := &columnTagProperty{\n\tcolumnDescription: &columnDescriptionProperty{\n\t\ttext: jsii.String(\"text\"),\n\t},\n\tcolumnGeographicRole: jsii.String(\"columnGeographicRole\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst columnTagProperty: quicksight.CfnDataSet.ColumnTagProperty = {\n  columnDescription: {\n    text: 'text',\n  },\n  columnGeographicRole: 'columnGeographicRole',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.ColumnTagProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.ColumnTagProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst columnTagProperty: quicksight.CfnDataSet.ColumnTagProperty = {\n  columnDescription: {\n    text: 'text',\n  },\n  columnGeographicRole: 'columnGeographicRole',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1940e2471e6cee1f1f87739ec2505c7feb02df3e4f8cc07ca7d852f8df862e02"
    },
    "830a1da47c42d1a0c9ad3cffb992c2ee2f2041d33c4a228035c4939cc323e083": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncreate_columns_operation_property = quicksight.CfnDataSet.CreateColumnsOperationProperty(\n    columns=[quicksight.CfnDataSet.CalculatedColumnProperty(\n        column_id=\"columnId\",\n        column_name=\"columnName\",\n        expression=\"expression\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCreateColumnsOperationProperty createColumnsOperationProperty = new CreateColumnsOperationProperty {\n    Columns = new [] { new CalculatedColumnProperty {\n        ColumnId = \"columnId\",\n        ColumnName = \"columnName\",\n        Expression = \"expression\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCreateColumnsOperationProperty createColumnsOperationProperty = CreateColumnsOperationProperty.builder()\n        .columns(List.of(CalculatedColumnProperty.builder()\n                .columnId(\"columnId\")\n                .columnName(\"columnName\")\n                .expression(\"expression\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncreateColumnsOperationProperty := &createColumnsOperationProperty{\n\tcolumns: []interface{}{\n\t\t&calculatedColumnProperty{\n\t\t\tcolumnId: jsii.String(\"columnId\"),\n\t\t\tcolumnName: jsii.String(\"columnName\"),\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst createColumnsOperationProperty: quicksight.CfnDataSet.CreateColumnsOperationProperty = {\n  columns: [{\n    columnId: 'columnId',\n    columnName: 'columnName',\n    expression: 'expression',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.CreateColumnsOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.CreateColumnsOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst createColumnsOperationProperty: quicksight.CfnDataSet.CreateColumnsOperationProperty = {\n  columns: [{\n    columnId: 'columnId',\n    columnName: 'columnName',\n    expression: 'expression',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "692fbfade3af41033e9a8747d5d5a267bdb17b2bedf52f977e67f59d7686d693"
    },
    "b59244e3a0d7401fb64d08a69930b72ff5af249260c1ed94b83ef6bf69dfc0c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncustom_sql_property = quicksight.CfnDataSet.CustomSqlProperty(\n    columns=[quicksight.CfnDataSet.InputColumnProperty(\n        name=\"name\",\n        type=\"type\"\n    )],\n    data_source_arn=\"dataSourceArn\",\n    name=\"name\",\n    sql_query=\"sqlQuery\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCustomSqlProperty customSqlProperty = new CustomSqlProperty {\n    Columns = new [] { new InputColumnProperty {\n        Name = \"name\",\n        Type = \"type\"\n    } },\n    DataSourceArn = \"dataSourceArn\",\n    Name = \"name\",\n    SqlQuery = \"sqlQuery\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCustomSqlProperty customSqlProperty = CustomSqlProperty.builder()\n        .columns(List.of(InputColumnProperty.builder()\n                .name(\"name\")\n                .type(\"type\")\n                .build()))\n        .dataSourceArn(\"dataSourceArn\")\n        .name(\"name\")\n        .sqlQuery(\"sqlQuery\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncustomSqlProperty := &customSqlProperty{\n\tcolumns: []interface{}{\n\t\t&inputColumnProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tdataSourceArn: jsii.String(\"dataSourceArn\"),\n\tname: jsii.String(\"name\"),\n\tsqlQuery: jsii.String(\"sqlQuery\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst customSqlProperty: quicksight.CfnDataSet.CustomSqlProperty = {\n  columns: [{\n    name: 'name',\n    type: 'type',\n  }],\n  dataSourceArn: 'dataSourceArn',\n  name: 'name',\n  sqlQuery: 'sqlQuery',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.CustomSqlProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.CustomSqlProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst customSqlProperty: quicksight.CfnDataSet.CustomSqlProperty = {\n  columns: [{\n    name: 'name',\n    type: 'type',\n  }],\n  dataSourceArn: 'dataSourceArn',\n  name: 'name',\n  sqlQuery: 'sqlQuery',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "576cdc3a8baff794fe711313b64776aca54796ba6b5932006225e968e29fe3ca"
    },
    "a40e286046e24bdf8002e741bf1c1acaae5240268faa717d6f2616aed5d2523d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_set_usage_configuration_property = quicksight.CfnDataSet.DataSetUsageConfigurationProperty(\n    disable_use_as_direct_query_source=False,\n    disable_use_as_imported_source=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSetUsageConfigurationProperty dataSetUsageConfigurationProperty = new DataSetUsageConfigurationProperty {\n    DisableUseAsDirectQuerySource = false,\n    DisableUseAsImportedSource = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSetUsageConfigurationProperty dataSetUsageConfigurationProperty = DataSetUsageConfigurationProperty.builder()\n        .disableUseAsDirectQuerySource(false)\n        .disableUseAsImportedSource(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSetUsageConfigurationProperty := &dataSetUsageConfigurationProperty{\n\tdisableUseAsDirectQuerySource: jsii.Boolean(false),\n\tdisableUseAsImportedSource: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSetUsageConfigurationProperty: quicksight.CfnDataSet.DataSetUsageConfigurationProperty = {\n  disableUseAsDirectQuerySource: false,\n  disableUseAsImportedSource: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.DataSetUsageConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.DataSetUsageConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSetUsageConfigurationProperty: quicksight.CfnDataSet.DataSetUsageConfigurationProperty = {\n  disableUseAsDirectQuerySource: false,\n  disableUseAsImportedSource: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "c44151da18f964c81f94790085117cae49684dd428aa214cbeaf23c9bc0ac842"
    },
    "058664515e25589ab22d44fa99a1d113ff07b3891044fea389c1fef47a669984": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nfield_folder_property = quicksight.CfnDataSet.FieldFolderProperty(\n    columns=[\"columns\"],\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nFieldFolderProperty fieldFolderProperty = new FieldFolderProperty {\n    Columns = new [] { \"columns\" },\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nFieldFolderProperty fieldFolderProperty = FieldFolderProperty.builder()\n        .columns(List.of(\"columns\"))\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nfieldFolderProperty := &fieldFolderProperty{\n\tcolumns: []*string{\n\t\tjsii.String(\"columns\"),\n\t},\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst fieldFolderProperty: quicksight.CfnDataSet.FieldFolderProperty = {\n  columns: ['columns'],\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.FieldFolderProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.FieldFolderProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fieldFolderProperty: quicksight.CfnDataSet.FieldFolderProperty = {\n  columns: ['columns'],\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "78d4f8a6d1bbaeedd3b1b8b3ee615d1802d4c7582d42a3a37e232c2e232e5b55"
    },
    "24338ccdeadfe7faa52a4fb8157d5aef01e346d38ff307982918031104c3be25": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nfilter_operation_property = quicksight.CfnDataSet.FilterOperationProperty(\n    condition_expression=\"conditionExpression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nFilterOperationProperty filterOperationProperty = new FilterOperationProperty {\n    ConditionExpression = \"conditionExpression\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nFilterOperationProperty filterOperationProperty = FilterOperationProperty.builder()\n        .conditionExpression(\"conditionExpression\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nfilterOperationProperty := &filterOperationProperty{\n\tconditionExpression: jsii.String(\"conditionExpression\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst filterOperationProperty: quicksight.CfnDataSet.FilterOperationProperty = {\n  conditionExpression: 'conditionExpression',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.FilterOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.FilterOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst filterOperationProperty: quicksight.CfnDataSet.FilterOperationProperty = {\n  conditionExpression: 'conditionExpression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9509b75b28e71a24242dc9fa6aa12d06292ab7a095694156d9efddd7d44731c5"
    },
    "60451d04526dbc5e14324922c2363dff841468a8ccb175457de25ece1a72383e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ngeo_spatial_column_group_property = quicksight.CfnDataSet.GeoSpatialColumnGroupProperty(\n    columns=[\"columns\"],\n    name=\"name\",\n\n    # the properties below are optional\n    country_code=\"countryCode\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nGeoSpatialColumnGroupProperty geoSpatialColumnGroupProperty = new GeoSpatialColumnGroupProperty {\n    Columns = new [] { \"columns\" },\n    Name = \"name\",\n\n    // the properties below are optional\n    CountryCode = \"countryCode\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nGeoSpatialColumnGroupProperty geoSpatialColumnGroupProperty = GeoSpatialColumnGroupProperty.builder()\n        .columns(List.of(\"columns\"))\n        .name(\"name\")\n\n        // the properties below are optional\n        .countryCode(\"countryCode\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ngeoSpatialColumnGroupProperty := &geoSpatialColumnGroupProperty{\n\tcolumns: []*string{\n\t\tjsii.String(\"columns\"),\n\t},\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tcountryCode: jsii.String(\"countryCode\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst geoSpatialColumnGroupProperty: quicksight.CfnDataSet.GeoSpatialColumnGroupProperty = {\n  columns: ['columns'],\n  name: 'name',\n\n  // the properties below are optional\n  countryCode: 'countryCode',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.GeoSpatialColumnGroupProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.GeoSpatialColumnGroupProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst geoSpatialColumnGroupProperty: quicksight.CfnDataSet.GeoSpatialColumnGroupProperty = {\n  columns: ['columns'],\n  name: 'name',\n\n  // the properties below are optional\n  countryCode: 'countryCode',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7897d3a9e0cbbb0e622ca6167e68828e8f5420fc4bd23cd9444babd458d7d53e"
    },
    "2981e63f0a92b7ab43399f8bf46ac8f96212b6095874dae6ff0c1ba353c8b401": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ningestion_wait_policy_property = quicksight.CfnDataSet.IngestionWaitPolicyProperty(\n    ingestion_wait_time_in_hours=123,\n    wait_for_spice_ingestion=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nIngestionWaitPolicyProperty ingestionWaitPolicyProperty = new IngestionWaitPolicyProperty {\n    IngestionWaitTimeInHours = 123,\n    WaitForSpiceIngestion = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nIngestionWaitPolicyProperty ingestionWaitPolicyProperty = IngestionWaitPolicyProperty.builder()\n        .ingestionWaitTimeInHours(123)\n        .waitForSpiceIngestion(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ningestionWaitPolicyProperty := &ingestionWaitPolicyProperty{\n\tingestionWaitTimeInHours: jsii.Number(123),\n\twaitForSpiceIngestion: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst ingestionWaitPolicyProperty: quicksight.CfnDataSet.IngestionWaitPolicyProperty = {\n  ingestionWaitTimeInHours: 123,\n  waitForSpiceIngestion: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.IngestionWaitPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.IngestionWaitPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ingestionWaitPolicyProperty: quicksight.CfnDataSet.IngestionWaitPolicyProperty = {\n  ingestionWaitTimeInHours: 123,\n  waitForSpiceIngestion: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "898099ac5878668530353139721df461157809f8f1c7c526fda60f3cfe8782ce"
    },
    "534487035432cbd49dcee5954ac02409f6603d6667cfb3d5204eca9fc07f199d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ninput_column_property = quicksight.CfnDataSet.InputColumnProperty(\n    name=\"name\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nInputColumnProperty inputColumnProperty = new InputColumnProperty {\n    Name = \"name\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nInputColumnProperty inputColumnProperty = InputColumnProperty.builder()\n        .name(\"name\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ninputColumnProperty := &inputColumnProperty{\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst inputColumnProperty: quicksight.CfnDataSet.InputColumnProperty = {\n  name: 'name',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.InputColumnProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.InputColumnProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst inputColumnProperty: quicksight.CfnDataSet.InputColumnProperty = {\n  name: 'name',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "76c0ede29734f8149bd6d3bc3c4d5ffab0f4b49f557c9bef41e834ebe9467496"
    },
    "768c64f1ea9b9e1b0feccbb15f3aef17c338d0ac51438e5e04f481c4b91c33a2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\njoin_instruction_property = quicksight.CfnDataSet.JoinInstructionProperty(\n    left_operand=\"leftOperand\",\n    on_clause=\"onClause\",\n    right_operand=\"rightOperand\",\n    type=\"type\",\n\n    # the properties below are optional\n    left_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n        unique_key=False\n    ),\n    right_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n        unique_key=False\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nJoinInstructionProperty joinInstructionProperty = new JoinInstructionProperty {\n    LeftOperand = \"leftOperand\",\n    OnClause = \"onClause\",\n    RightOperand = \"rightOperand\",\n    Type = \"type\",\n\n    // the properties below are optional\n    LeftJoinKeyProperties = new JoinKeyPropertiesProperty {\n        UniqueKey = false\n    },\n    RightJoinKeyProperties = new JoinKeyPropertiesProperty {\n        UniqueKey = false\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nJoinInstructionProperty joinInstructionProperty = JoinInstructionProperty.builder()\n        .leftOperand(\"leftOperand\")\n        .onClause(\"onClause\")\n        .rightOperand(\"rightOperand\")\n        .type(\"type\")\n\n        // the properties below are optional\n        .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                .uniqueKey(false)\n                .build())\n        .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                .uniqueKey(false)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\njoinInstructionProperty := &joinInstructionProperty{\n\tleftOperand: jsii.String(\"leftOperand\"),\n\tonClause: jsii.String(\"onClause\"),\n\trightOperand: jsii.String(\"rightOperand\"),\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tleftJoinKeyProperties: &joinKeyPropertiesProperty{\n\t\tuniqueKey: jsii.Boolean(false),\n\t},\n\trightJoinKeyProperties: &joinKeyPropertiesProperty{\n\t\tuniqueKey: jsii.Boolean(false),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst joinInstructionProperty: quicksight.CfnDataSet.JoinInstructionProperty = {\n  leftOperand: 'leftOperand',\n  onClause: 'onClause',\n  rightOperand: 'rightOperand',\n  type: 'type',\n\n  // the properties below are optional\n  leftJoinKeyProperties: {\n    uniqueKey: false,\n  },\n  rightJoinKeyProperties: {\n    uniqueKey: false,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.JoinInstructionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.JoinInstructionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst joinInstructionProperty: quicksight.CfnDataSet.JoinInstructionProperty = {\n  leftOperand: 'leftOperand',\n  onClause: 'onClause',\n  rightOperand: 'rightOperand',\n  type: 'type',\n\n  // the properties below are optional\n  leftJoinKeyProperties: {\n    uniqueKey: false,\n  },\n  rightJoinKeyProperties: {\n    uniqueKey: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "9d6ba1c5ab17aabb39d37bb4d435b63653bf733720592aa769bce5aa8d3a6105"
    },
    "69f7a4235de3095f7eca30e9cfc8c844991ad0d0de536d6fb675b580c5cce37b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\njoin_key_properties_property = quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n    unique_key=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nJoinKeyPropertiesProperty joinKeyPropertiesProperty = new JoinKeyPropertiesProperty {\n    UniqueKey = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nJoinKeyPropertiesProperty joinKeyPropertiesProperty = JoinKeyPropertiesProperty.builder()\n        .uniqueKey(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\njoinKeyPropertiesProperty := &joinKeyPropertiesProperty{\n\tuniqueKey: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst joinKeyPropertiesProperty: quicksight.CfnDataSet.JoinKeyPropertiesProperty = {\n  uniqueKey: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.JoinKeyPropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.JoinKeyPropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst joinKeyPropertiesProperty: quicksight.CfnDataSet.JoinKeyPropertiesProperty = {\n  uniqueKey: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "82cc2b3c0ca5cfd56a11a0900af380ff9738e8dde3d0b47ca1f313db626f55bc"
    },
    "850607d369d7e4ca94bdb7473a1e3bf9a225d5e77fac1ca99a566302a50ffe6d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nlogical_table_property = quicksight.CfnDataSet.LogicalTableProperty(\n    alias=\"alias\",\n    source=quicksight.CfnDataSet.LogicalTableSourceProperty(\n        data_set_arn=\"dataSetArn\",\n        join_instruction=quicksight.CfnDataSet.JoinInstructionProperty(\n            left_operand=\"leftOperand\",\n            on_clause=\"onClause\",\n            right_operand=\"rightOperand\",\n            type=\"type\",\n\n            # the properties below are optional\n            left_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n                unique_key=False\n            ),\n            right_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n                unique_key=False\n            )\n        ),\n        physical_table_id=\"physicalTableId\"\n    ),\n\n    # the properties below are optional\n    data_transforms=[quicksight.CfnDataSet.TransformOperationProperty(\n        cast_column_type_operation=quicksight.CfnDataSet.CastColumnTypeOperationProperty(\n            column_name=\"columnName\",\n            new_column_type=\"newColumnType\",\n\n            # the properties below are optional\n            format=\"format\"\n        ),\n        create_columns_operation=quicksight.CfnDataSet.CreateColumnsOperationProperty(\n            columns=[quicksight.CfnDataSet.CalculatedColumnProperty(\n                column_id=\"columnId\",\n                column_name=\"columnName\",\n                expression=\"expression\"\n            )]\n        ),\n        filter_operation=quicksight.CfnDataSet.FilterOperationProperty(\n            condition_expression=\"conditionExpression\"\n        ),\n        project_operation=quicksight.CfnDataSet.ProjectOperationProperty(\n            projected_columns=[\"projectedColumns\"]\n        ),\n        rename_column_operation=quicksight.CfnDataSet.RenameColumnOperationProperty(\n            column_name=\"columnName\",\n            new_column_name=\"newColumnName\"\n        ),\n        tag_column_operation=quicksight.CfnDataSet.TagColumnOperationProperty(\n            column_name=\"columnName\",\n            tags=[quicksight.CfnDataSet.ColumnTagProperty(\n                column_description=quicksight.CfnDataSet.ColumnDescriptionProperty(\n                    text=\"text\"\n                ),\n                column_geographic_role=\"columnGeographicRole\"\n            )]\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nLogicalTableProperty logicalTableProperty = new LogicalTableProperty {\n    Alias = \"alias\",\n    Source = new LogicalTableSourceProperty {\n        DataSetArn = \"dataSetArn\",\n        JoinInstruction = new JoinInstructionProperty {\n            LeftOperand = \"leftOperand\",\n            OnClause = \"onClause\",\n            RightOperand = \"rightOperand\",\n            Type = \"type\",\n\n            // the properties below are optional\n            LeftJoinKeyProperties = new JoinKeyPropertiesProperty {\n                UniqueKey = false\n            },\n            RightJoinKeyProperties = new JoinKeyPropertiesProperty {\n                UniqueKey = false\n            }\n        },\n        PhysicalTableId = \"physicalTableId\"\n    },\n\n    // the properties below are optional\n    DataTransforms = new [] { new TransformOperationProperty {\n        CastColumnTypeOperation = new CastColumnTypeOperationProperty {\n            ColumnName = \"columnName\",\n            NewColumnType = \"newColumnType\",\n\n            // the properties below are optional\n            Format = \"format\"\n        },\n        CreateColumnsOperation = new CreateColumnsOperationProperty {\n            Columns = new [] { new CalculatedColumnProperty {\n                ColumnId = \"columnId\",\n                ColumnName = \"columnName\",\n                Expression = \"expression\"\n            } }\n        },\n        FilterOperation = new FilterOperationProperty {\n            ConditionExpression = \"conditionExpression\"\n        },\n        ProjectOperation = new ProjectOperationProperty {\n            ProjectedColumns = new [] { \"projectedColumns\" }\n        },\n        RenameColumnOperation = new RenameColumnOperationProperty {\n            ColumnName = \"columnName\",\n            NewColumnName = \"newColumnName\"\n        },\n        TagColumnOperation = new TagColumnOperationProperty {\n            ColumnName = \"columnName\",\n            Tags = new [] { new ColumnTagProperty {\n                ColumnDescription = new ColumnDescriptionProperty {\n                    Text = \"text\"\n                },\n                ColumnGeographicRole = \"columnGeographicRole\"\n            } }\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nLogicalTableProperty logicalTableProperty = LogicalTableProperty.builder()\n        .alias(\"alias\")\n        .source(LogicalTableSourceProperty.builder()\n                .dataSetArn(\"dataSetArn\")\n                .joinInstruction(JoinInstructionProperty.builder()\n                        .leftOperand(\"leftOperand\")\n                        .onClause(\"onClause\")\n                        .rightOperand(\"rightOperand\")\n                        .type(\"type\")\n\n                        // the properties below are optional\n                        .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                                .uniqueKey(false)\n                                .build())\n                        .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                                .uniqueKey(false)\n                                .build())\n                        .build())\n                .physicalTableId(\"physicalTableId\")\n                .build())\n\n        // the properties below are optional\n        .dataTransforms(List.of(TransformOperationProperty.builder()\n                .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()\n                        .columnName(\"columnName\")\n                        .newColumnType(\"newColumnType\")\n\n                        // the properties below are optional\n                        .format(\"format\")\n                        .build())\n                .createColumnsOperation(CreateColumnsOperationProperty.builder()\n                        .columns(List.of(CalculatedColumnProperty.builder()\n                                .columnId(\"columnId\")\n                                .columnName(\"columnName\")\n                                .expression(\"expression\")\n                                .build()))\n                        .build())\n                .filterOperation(FilterOperationProperty.builder()\n                        .conditionExpression(\"conditionExpression\")\n                        .build())\n                .projectOperation(ProjectOperationProperty.builder()\n                        .projectedColumns(List.of(\"projectedColumns\"))\n                        .build())\n                .renameColumnOperation(RenameColumnOperationProperty.builder()\n                        .columnName(\"columnName\")\n                        .newColumnName(\"newColumnName\")\n                        .build())\n                .tagColumnOperation(TagColumnOperationProperty.builder()\n                        .columnName(\"columnName\")\n                        .tags(List.of(ColumnTagProperty.builder()\n                                .columnDescription(ColumnDescriptionProperty.builder()\n                                        .text(\"text\")\n                                        .build())\n                                .columnGeographicRole(\"columnGeographicRole\")\n                                .build()))\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nlogicalTableProperty := &logicalTableProperty{\n\talias: jsii.String(\"alias\"),\n\tsource: &logicalTableSourceProperty{\n\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\tjoinInstruction: &joinInstructionProperty{\n\t\t\tleftOperand: jsii.String(\"leftOperand\"),\n\t\t\tonClause: jsii.String(\"onClause\"),\n\t\t\trightOperand: jsii.String(\"rightOperand\"),\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tleftJoinKeyProperties: &joinKeyPropertiesProperty{\n\t\t\t\tuniqueKey: jsii.Boolean(false),\n\t\t\t},\n\t\t\trightJoinKeyProperties: &joinKeyPropertiesProperty{\n\t\t\t\tuniqueKey: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t\tphysicalTableId: jsii.String(\"physicalTableId\"),\n\t},\n\n\t// the properties below are optional\n\tdataTransforms: []interface{}{\n\t\t&transformOperationProperty{\n\t\t\tcastColumnTypeOperation: &castColumnTypeOperationProperty{\n\t\t\t\tcolumnName: jsii.String(\"columnName\"),\n\t\t\t\tnewColumnType: jsii.String(\"newColumnType\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tformat: jsii.String(\"format\"),\n\t\t\t},\n\t\t\tcreateColumnsOperation: &createColumnsOperationProperty{\n\t\t\t\tcolumns: []interface{}{\n\t\t\t\t\t&calculatedColumnProperty{\n\t\t\t\t\t\tcolumnId: jsii.String(\"columnId\"),\n\t\t\t\t\t\tcolumnName: jsii.String(\"columnName\"),\n\t\t\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tfilterOperation: &filterOperationProperty{\n\t\t\t\tconditionExpression: jsii.String(\"conditionExpression\"),\n\t\t\t},\n\t\t\tprojectOperation: &projectOperationProperty{\n\t\t\t\tprojectedColumns: []*string{\n\t\t\t\t\tjsii.String(\"projectedColumns\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\trenameColumnOperation: &renameColumnOperationProperty{\n\t\t\t\tcolumnName: jsii.String(\"columnName\"),\n\t\t\t\tnewColumnName: jsii.String(\"newColumnName\"),\n\t\t\t},\n\t\t\ttagColumnOperation: &tagColumnOperationProperty{\n\t\t\t\tcolumnName: jsii.String(\"columnName\"),\n\t\t\t\ttags: []columnTagProperty{\n\t\t\t\t\t&columnTagProperty{\n\t\t\t\t\t\tcolumnDescription: &columnDescriptionProperty{\n\t\t\t\t\t\t\ttext: jsii.String(\"text\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcolumnGeographicRole: jsii.String(\"columnGeographicRole\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst logicalTableProperty: quicksight.CfnDataSet.LogicalTableProperty = {\n  alias: 'alias',\n  source: {\n    dataSetArn: 'dataSetArn',\n    joinInstruction: {\n      leftOperand: 'leftOperand',\n      onClause: 'onClause',\n      rightOperand: 'rightOperand',\n      type: 'type',\n\n      // the properties below are optional\n      leftJoinKeyProperties: {\n        uniqueKey: false,\n      },\n      rightJoinKeyProperties: {\n        uniqueKey: false,\n      },\n    },\n    physicalTableId: 'physicalTableId',\n  },\n\n  // the properties below are optional\n  dataTransforms: [{\n    castColumnTypeOperation: {\n      columnName: 'columnName',\n      newColumnType: 'newColumnType',\n\n      // the properties below are optional\n      format: 'format',\n    },\n    createColumnsOperation: {\n      columns: [{\n        columnId: 'columnId',\n        columnName: 'columnName',\n        expression: 'expression',\n      }],\n    },\n    filterOperation: {\n      conditionExpression: 'conditionExpression',\n    },\n    projectOperation: {\n      projectedColumns: ['projectedColumns'],\n    },\n    renameColumnOperation: {\n      columnName: 'columnName',\n      newColumnName: 'newColumnName',\n    },\n    tagColumnOperation: {\n      columnName: 'columnName',\n      tags: [{\n        columnDescription: {\n          text: 'text',\n        },\n        columnGeographicRole: 'columnGeographicRole',\n      }],\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.LogicalTableProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.LogicalTableProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logicalTableProperty: quicksight.CfnDataSet.LogicalTableProperty = {\n  alias: 'alias',\n  source: {\n    dataSetArn: 'dataSetArn',\n    joinInstruction: {\n      leftOperand: 'leftOperand',\n      onClause: 'onClause',\n      rightOperand: 'rightOperand',\n      type: 'type',\n\n      // the properties below are optional\n      leftJoinKeyProperties: {\n        uniqueKey: false,\n      },\n      rightJoinKeyProperties: {\n        uniqueKey: false,\n      },\n    },\n    physicalTableId: 'physicalTableId',\n  },\n\n  // the properties below are optional\n  dataTransforms: [{\n    castColumnTypeOperation: {\n      columnName: 'columnName',\n      newColumnType: 'newColumnType',\n\n      // the properties below are optional\n      format: 'format',\n    },\n    createColumnsOperation: {\n      columns: [{\n        columnId: 'columnId',\n        columnName: 'columnName',\n        expression: 'expression',\n      }],\n    },\n    filterOperation: {\n      conditionExpression: 'conditionExpression',\n    },\n    projectOperation: {\n      projectedColumns: ['projectedColumns'],\n    },\n    renameColumnOperation: {\n      columnName: 'columnName',\n      newColumnName: 'newColumnName',\n    },\n    tagColumnOperation: {\n      columnName: 'columnName',\n      tags: [{\n        columnDescription: {\n          text: 'text',\n        },\n        columnGeographicRole: 'columnGeographicRole',\n      }],\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 21,
        "75": 41,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 4,
        "193": 15,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 36,
        "290": 1
      },
      "fqnsFingerprint": "41d0e93dcbd69524c2bddd5c1a8c37b4cedca0a3a9cd8801268abe29f23a6696"
    },
    "ec3da2ff6989f8f324a96258eaab0fed59bcbf42f4554833af2e2052a13e4454": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nlogical_table_source_property = quicksight.CfnDataSet.LogicalTableSourceProperty(\n    data_set_arn=\"dataSetArn\",\n    join_instruction=quicksight.CfnDataSet.JoinInstructionProperty(\n        left_operand=\"leftOperand\",\n        on_clause=\"onClause\",\n        right_operand=\"rightOperand\",\n        type=\"type\",\n\n        # the properties below are optional\n        left_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n            unique_key=False\n        ),\n        right_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n            unique_key=False\n        )\n    ),\n    physical_table_id=\"physicalTableId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nLogicalTableSourceProperty logicalTableSourceProperty = new LogicalTableSourceProperty {\n    DataSetArn = \"dataSetArn\",\n    JoinInstruction = new JoinInstructionProperty {\n        LeftOperand = \"leftOperand\",\n        OnClause = \"onClause\",\n        RightOperand = \"rightOperand\",\n        Type = \"type\",\n\n        // the properties below are optional\n        LeftJoinKeyProperties = new JoinKeyPropertiesProperty {\n            UniqueKey = false\n        },\n        RightJoinKeyProperties = new JoinKeyPropertiesProperty {\n            UniqueKey = false\n        }\n    },\n    PhysicalTableId = \"physicalTableId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nLogicalTableSourceProperty logicalTableSourceProperty = LogicalTableSourceProperty.builder()\n        .dataSetArn(\"dataSetArn\")\n        .joinInstruction(JoinInstructionProperty.builder()\n                .leftOperand(\"leftOperand\")\n                .onClause(\"onClause\")\n                .rightOperand(\"rightOperand\")\n                .type(\"type\")\n\n                // the properties below are optional\n                .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                        .uniqueKey(false)\n                        .build())\n                .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                        .uniqueKey(false)\n                        .build())\n                .build())\n        .physicalTableId(\"physicalTableId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nlogicalTableSourceProperty := &logicalTableSourceProperty{\n\tdataSetArn: jsii.String(\"dataSetArn\"),\n\tjoinInstruction: &joinInstructionProperty{\n\t\tleftOperand: jsii.String(\"leftOperand\"),\n\t\tonClause: jsii.String(\"onClause\"),\n\t\trightOperand: jsii.String(\"rightOperand\"),\n\t\ttype: jsii.String(\"type\"),\n\n\t\t// the properties below are optional\n\t\tleftJoinKeyProperties: &joinKeyPropertiesProperty{\n\t\t\tuniqueKey: jsii.Boolean(false),\n\t\t},\n\t\trightJoinKeyProperties: &joinKeyPropertiesProperty{\n\t\t\tuniqueKey: jsii.Boolean(false),\n\t\t},\n\t},\n\tphysicalTableId: jsii.String(\"physicalTableId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst logicalTableSourceProperty: quicksight.CfnDataSet.LogicalTableSourceProperty = {\n  dataSetArn: 'dataSetArn',\n  joinInstruction: {\n    leftOperand: 'leftOperand',\n    onClause: 'onClause',\n    rightOperand: 'rightOperand',\n    type: 'type',\n\n    // the properties below are optional\n    leftJoinKeyProperties: {\n      uniqueKey: false,\n    },\n    rightJoinKeyProperties: {\n      uniqueKey: false,\n    },\n  },\n  physicalTableId: 'physicalTableId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.LogicalTableSourceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.LogicalTableSourceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logicalTableSourceProperty: quicksight.CfnDataSet.LogicalTableSourceProperty = {\n  dataSetArn: 'dataSetArn',\n  joinInstruction: {\n    leftOperand: 'leftOperand',\n    onClause: 'onClause',\n    rightOperand: 'rightOperand',\n    type: 'type',\n\n    // the properties below are optional\n    leftJoinKeyProperties: {\n      uniqueKey: false,\n    },\n    rightJoinKeyProperties: {\n      uniqueKey: false,\n    },\n  },\n  physicalTableId: 'physicalTableId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 16,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "e9e4df5cb63031ff4d14eaad0e8d1ad6e04490994797f9e8307433c56668347c"
    },
    "5a0e6d35eda6cb25ea93515db0f66df65fa38bee05ae25a1ddf68eb75a745ec4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\noutput_column_property = quicksight.CfnDataSet.OutputColumnProperty(\n    description=\"description\",\n    name=\"name\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nOutputColumnProperty outputColumnProperty = new OutputColumnProperty {\n    Description = \"description\",\n    Name = \"name\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nOutputColumnProperty outputColumnProperty = OutputColumnProperty.builder()\n        .description(\"description\")\n        .name(\"name\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\noutputColumnProperty := &outputColumnProperty{\n\tdescription: jsii.String(\"description\"),\n\tname: jsii.String(\"name\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst outputColumnProperty: quicksight.CfnDataSet.OutputColumnProperty = {\n  description: 'description',\n  name: 'name',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.OutputColumnProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.OutputColumnProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst outputColumnProperty: quicksight.CfnDataSet.OutputColumnProperty = {\n  description: 'description',\n  name: 'name',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2eaa99d4ff0944a6c0da5fa7c718b699242ab7f9b50e411339aba17f901741c9"
    },
    "c99a419bb14f0ced65e2489b8533c591c343711fa0e3e07874ea09b6608b98f1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nphysical_table_property = quicksight.CfnDataSet.PhysicalTableProperty(\n    custom_sql=quicksight.CfnDataSet.CustomSqlProperty(\n        columns=[quicksight.CfnDataSet.InputColumnProperty(\n            name=\"name\",\n            type=\"type\"\n        )],\n        data_source_arn=\"dataSourceArn\",\n        name=\"name\",\n        sql_query=\"sqlQuery\"\n    ),\n    relational_table=quicksight.CfnDataSet.RelationalTableProperty(\n        data_source_arn=\"dataSourceArn\",\n        input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n            name=\"name\",\n            type=\"type\"\n        )],\n        name=\"name\",\n\n        # the properties below are optional\n        catalog=\"catalog\",\n        schema=\"schema\"\n    ),\n    s3_source=quicksight.CfnDataSet.S3SourceProperty(\n        data_source_arn=\"dataSourceArn\",\n        input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n            name=\"name\",\n            type=\"type\"\n        )],\n\n        # the properties below are optional\n        upload_settings=quicksight.CfnDataSet.UploadSettingsProperty(\n            contains_header=False,\n            delimiter=\"delimiter\",\n            format=\"format\",\n            start_from_row=123,\n            text_qualifier=\"textQualifier\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nPhysicalTableProperty physicalTableProperty = new PhysicalTableProperty {\n    CustomSql = new CustomSqlProperty {\n        Columns = new [] { new InputColumnProperty {\n            Name = \"name\",\n            Type = \"type\"\n        } },\n        DataSourceArn = \"dataSourceArn\",\n        Name = \"name\",\n        SqlQuery = \"sqlQuery\"\n    },\n    RelationalTable = new RelationalTableProperty {\n        DataSourceArn = \"dataSourceArn\",\n        InputColumns = new [] { new InputColumnProperty {\n            Name = \"name\",\n            Type = \"type\"\n        } },\n        Name = \"name\",\n\n        // the properties below are optional\n        Catalog = \"catalog\",\n        Schema = \"schema\"\n    },\n    S3Source = new S3SourceProperty {\n        DataSourceArn = \"dataSourceArn\",\n        InputColumns = new [] { new InputColumnProperty {\n            Name = \"name\",\n            Type = \"type\"\n        } },\n\n        // the properties below are optional\n        UploadSettings = new UploadSettingsProperty {\n            ContainsHeader = false,\n            Delimiter = \"delimiter\",\n            Format = \"format\",\n            StartFromRow = 123,\n            TextQualifier = \"textQualifier\"\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nPhysicalTableProperty physicalTableProperty = PhysicalTableProperty.builder()\n        .customSql(CustomSqlProperty.builder()\n                .columns(List.of(InputColumnProperty.builder()\n                        .name(\"name\")\n                        .type(\"type\")\n                        .build()))\n                .dataSourceArn(\"dataSourceArn\")\n                .name(\"name\")\n                .sqlQuery(\"sqlQuery\")\n                .build())\n        .relationalTable(RelationalTableProperty.builder()\n                .dataSourceArn(\"dataSourceArn\")\n                .inputColumns(List.of(InputColumnProperty.builder()\n                        .name(\"name\")\n                        .type(\"type\")\n                        .build()))\n                .name(\"name\")\n\n                // the properties below are optional\n                .catalog(\"catalog\")\n                .schema(\"schema\")\n                .build())\n        .s3Source(S3SourceProperty.builder()\n                .dataSourceArn(\"dataSourceArn\")\n                .inputColumns(List.of(InputColumnProperty.builder()\n                        .name(\"name\")\n                        .type(\"type\")\n                        .build()))\n\n                // the properties below are optional\n                .uploadSettings(UploadSettingsProperty.builder()\n                        .containsHeader(false)\n                        .delimiter(\"delimiter\")\n                        .format(\"format\")\n                        .startFromRow(123)\n                        .textQualifier(\"textQualifier\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nphysicalTableProperty := &physicalTableProperty{\n\tcustomSql: &customSqlProperty{\n\t\tcolumns: []interface{}{\n\t\t\t&inputColumnProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t\tdataSourceArn: jsii.String(\"dataSourceArn\"),\n\t\tname: jsii.String(\"name\"),\n\t\tsqlQuery: jsii.String(\"sqlQuery\"),\n\t},\n\trelationalTable: &relationalTableProperty{\n\t\tdataSourceArn: jsii.String(\"dataSourceArn\"),\n\t\tinputColumns: []interface{}{\n\t\t\t&inputColumnProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\t\tname: jsii.String(\"name\"),\n\n\t\t// the properties below are optional\n\t\tcatalog: jsii.String(\"catalog\"),\n\t\tschema: jsii.String(\"schema\"),\n\t},\n\ts3Source: &s3SourceProperty{\n\t\tdataSourceArn: jsii.String(\"dataSourceArn\"),\n\t\tinputColumns: []interface{}{\n\t\t\t&inputColumnProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\n\t\t// the properties below are optional\n\t\tuploadSettings: &uploadSettingsProperty{\n\t\t\tcontainsHeader: jsii.Boolean(false),\n\t\t\tdelimiter: jsii.String(\"delimiter\"),\n\t\t\tformat: jsii.String(\"format\"),\n\t\t\tstartFromRow: jsii.Number(123),\n\t\t\ttextQualifier: jsii.String(\"textQualifier\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst physicalTableProperty: quicksight.CfnDataSet.PhysicalTableProperty = {\n  customSql: {\n    columns: [{\n      name: 'name',\n      type: 'type',\n    }],\n    dataSourceArn: 'dataSourceArn',\n    name: 'name',\n    sqlQuery: 'sqlQuery',\n  },\n  relationalTable: {\n    dataSourceArn: 'dataSourceArn',\n    inputColumns: [{\n      name: 'name',\n      type: 'type',\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    catalog: 'catalog',\n    schema: 'schema',\n  },\n  s3Source: {\n    dataSourceArn: 'dataSourceArn',\n    inputColumns: [{\n      name: 'name',\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    uploadSettings: {\n      containsHeader: false,\n      delimiter: 'delimiter',\n      format: 'format',\n      startFromRow: 123,\n      textQualifier: 'textQualifier',\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.PhysicalTableProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.PhysicalTableProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst physicalTableProperty: quicksight.CfnDataSet.PhysicalTableProperty = {\n  customSql: {\n    columns: [{\n      name: 'name',\n      type: 'type',\n    }],\n    dataSourceArn: 'dataSourceArn',\n    name: 'name',\n    sqlQuery: 'sqlQuery',\n  },\n  relationalTable: {\n    dataSourceArn: 'dataSourceArn',\n    inputColumns: [{\n      name: 'name',\n      type: 'type',\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    catalog: 'catalog',\n    schema: 'schema',\n  },\n  s3Source: {\n    dataSourceArn: 'dataSourceArn',\n    inputColumns: [{\n      name: 'name',\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    uploadSettings: {\n      containsHeader: false,\n      delimiter: 'delimiter',\n      format: 'format',\n      startFromRow: 123,\n      textQualifier: 'textQualifier',\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 18,
        "75": 31,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 8,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "1ade2ab3207cbd1594ed1fb05ce1bb6cbf7db9eca1795c6c85292a927388000c"
    },
    "d621bd79336d4b5b35b39f2b56f7dcd78c4b210de1b162d25058afea094335e2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nproject_operation_property = quicksight.CfnDataSet.ProjectOperationProperty(\n    projected_columns=[\"projectedColumns\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nProjectOperationProperty projectOperationProperty = new ProjectOperationProperty {\n    ProjectedColumns = new [] { \"projectedColumns\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nProjectOperationProperty projectOperationProperty = ProjectOperationProperty.builder()\n        .projectedColumns(List.of(\"projectedColumns\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nprojectOperationProperty := &projectOperationProperty{\n\tprojectedColumns: []*string{\n\t\tjsii.String(\"projectedColumns\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst projectOperationProperty: quicksight.CfnDataSet.ProjectOperationProperty = {\n  projectedColumns: ['projectedColumns'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.ProjectOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.ProjectOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst projectOperationProperty: quicksight.CfnDataSet.ProjectOperationProperty = {\n  projectedColumns: ['projectedColumns'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "7c22c0db2f5d6a1098ad26a271eaa8dbc35b92d34daa13ea3b3dcd52831f260a"
    },
    "b13ae35e4b87a88d45e9567d1e1ca1fde4575acf54867750b9c8e438e8db6b0a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nrelational_table_property = quicksight.CfnDataSet.RelationalTableProperty(\n    data_source_arn=\"dataSourceArn\",\n    input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n        name=\"name\",\n        type=\"type\"\n    )],\n    name=\"name\",\n\n    # the properties below are optional\n    catalog=\"catalog\",\n    schema=\"schema\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nRelationalTableProperty relationalTableProperty = new RelationalTableProperty {\n    DataSourceArn = \"dataSourceArn\",\n    InputColumns = new [] { new InputColumnProperty {\n        Name = \"name\",\n        Type = \"type\"\n    } },\n    Name = \"name\",\n\n    // the properties below are optional\n    Catalog = \"catalog\",\n    Schema = \"schema\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nRelationalTableProperty relationalTableProperty = RelationalTableProperty.builder()\n        .dataSourceArn(\"dataSourceArn\")\n        .inputColumns(List.of(InputColumnProperty.builder()\n                .name(\"name\")\n                .type(\"type\")\n                .build()))\n        .name(\"name\")\n\n        // the properties below are optional\n        .catalog(\"catalog\")\n        .schema(\"schema\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nrelationalTableProperty := &relationalTableProperty{\n\tdataSourceArn: jsii.String(\"dataSourceArn\"),\n\tinputColumns: []interface{}{\n\t\t&inputColumnProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tcatalog: jsii.String(\"catalog\"),\n\tschema: jsii.String(\"schema\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst relationalTableProperty: quicksight.CfnDataSet.RelationalTableProperty = {\n  dataSourceArn: 'dataSourceArn',\n  inputColumns: [{\n    name: 'name',\n    type: 'type',\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  catalog: 'catalog',\n  schema: 'schema',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.RelationalTableProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.RelationalTableProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst relationalTableProperty: quicksight.CfnDataSet.RelationalTableProperty = {\n  dataSourceArn: 'dataSourceArn',\n  inputColumns: [{\n    name: 'name',\n    type: 'type',\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  catalog: 'catalog',\n  schema: 'schema',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 12,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "0e588523bac0ec15db0db52306f0fd783942810da6848132a1ff51cbd622c39a"
    },
    "c99c41fac756b057203c6ad80ad0c1656dea1bf9442cba887cedb23d87db47fd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nrename_column_operation_property = quicksight.CfnDataSet.RenameColumnOperationProperty(\n    column_name=\"columnName\",\n    new_column_name=\"newColumnName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nRenameColumnOperationProperty renameColumnOperationProperty = new RenameColumnOperationProperty {\n    ColumnName = \"columnName\",\n    NewColumnName = \"newColumnName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nRenameColumnOperationProperty renameColumnOperationProperty = RenameColumnOperationProperty.builder()\n        .columnName(\"columnName\")\n        .newColumnName(\"newColumnName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nrenameColumnOperationProperty := &renameColumnOperationProperty{\n\tcolumnName: jsii.String(\"columnName\"),\n\tnewColumnName: jsii.String(\"newColumnName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst renameColumnOperationProperty: quicksight.CfnDataSet.RenameColumnOperationProperty = {\n  columnName: 'columnName',\n  newColumnName: 'newColumnName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.RenameColumnOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.RenameColumnOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst renameColumnOperationProperty: quicksight.CfnDataSet.RenameColumnOperationProperty = {\n  columnName: 'columnName',\n  newColumnName: 'newColumnName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "59e8d6fa4251339ffc6afd15d06e48c2ad79d7bef2423b962d2113c8fe3f4bee"
    },
    "55d2ac532718830e527a9e77612ff32eae187e7a985b4f27e9c35a97f6998f6b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nresource_permission_property = quicksight.CfnDataSet.ResourcePermissionProperty(\n    actions=[\"actions\"],\n    principal=\"principal\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nResourcePermissionProperty resourcePermissionProperty = new ResourcePermissionProperty {\n    Actions = new [] { \"actions\" },\n    Principal = \"principal\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()\n        .actions(List.of(\"actions\"))\n        .principal(\"principal\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nresourcePermissionProperty := &resourcePermissionProperty{\n\tactions: []*string{\n\t\tjsii.String(\"actions\"),\n\t},\n\tprincipal: jsii.String(\"principal\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst resourcePermissionProperty: quicksight.CfnDataSet.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.ResourcePermissionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.ResourcePermissionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePermissionProperty: quicksight.CfnDataSet.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d0376d5ea362433b614a144e6f8e60d9537b31a0110534f90ba7100a9c8b92a0"
    },
    "8a09f570c1e73912aeb9ac4ed044e95f8517b44e09196a1679eb851b9d02b80d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nrow_level_permission_data_set_property = quicksight.CfnDataSet.RowLevelPermissionDataSetProperty(\n    arn=\"arn\",\n    permission_policy=\"permissionPolicy\",\n\n    # the properties below are optional\n    format_version=\"formatVersion\",\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nRowLevelPermissionDataSetProperty rowLevelPermissionDataSetProperty = new RowLevelPermissionDataSetProperty {\n    Arn = \"arn\",\n    PermissionPolicy = \"permissionPolicy\",\n\n    // the properties below are optional\n    FormatVersion = \"formatVersion\",\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nRowLevelPermissionDataSetProperty rowLevelPermissionDataSetProperty = RowLevelPermissionDataSetProperty.builder()\n        .arn(\"arn\")\n        .permissionPolicy(\"permissionPolicy\")\n\n        // the properties below are optional\n        .formatVersion(\"formatVersion\")\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nrowLevelPermissionDataSetProperty := &rowLevelPermissionDataSetProperty{\n\tarn: jsii.String(\"arn\"),\n\tpermissionPolicy: jsii.String(\"permissionPolicy\"),\n\n\t// the properties below are optional\n\tformatVersion: jsii.String(\"formatVersion\"),\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst rowLevelPermissionDataSetProperty: quicksight.CfnDataSet.RowLevelPermissionDataSetProperty = {\n  arn: 'arn',\n  permissionPolicy: 'permissionPolicy',\n\n  // the properties below are optional\n  formatVersion: 'formatVersion',\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.RowLevelPermissionDataSetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.RowLevelPermissionDataSetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rowLevelPermissionDataSetProperty: quicksight.CfnDataSet.RowLevelPermissionDataSetProperty = {\n  arn: 'arn',\n  permissionPolicy: 'permissionPolicy',\n\n  // the properties below are optional\n  formatVersion: 'formatVersion',\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "dafb102892a497d299917d58752d245f5c82a0d70d68de8faaaa39e8154da627"
    },
    "44a511bcb9af5afdf57cef2a3c42521a67273eb9f8f7811779a1eb12fef20eca": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ns3_source_property = quicksight.CfnDataSet.S3SourceProperty(\n    data_source_arn=\"dataSourceArn\",\n    input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n        name=\"name\",\n        type=\"type\"\n    )],\n\n    # the properties below are optional\n    upload_settings=quicksight.CfnDataSet.UploadSettingsProperty(\n        contains_header=False,\n        delimiter=\"delimiter\",\n        format=\"format\",\n        start_from_row=123,\n        text_qualifier=\"textQualifier\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nS3SourceProperty s3SourceProperty = new S3SourceProperty {\n    DataSourceArn = \"dataSourceArn\",\n    InputColumns = new [] { new InputColumnProperty {\n        Name = \"name\",\n        Type = \"type\"\n    } },\n\n    // the properties below are optional\n    UploadSettings = new UploadSettingsProperty {\n        ContainsHeader = false,\n        Delimiter = \"delimiter\",\n        Format = \"format\",\n        StartFromRow = 123,\n        TextQualifier = \"textQualifier\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nS3SourceProperty s3SourceProperty = S3SourceProperty.builder()\n        .dataSourceArn(\"dataSourceArn\")\n        .inputColumns(List.of(InputColumnProperty.builder()\n                .name(\"name\")\n                .type(\"type\")\n                .build()))\n\n        // the properties below are optional\n        .uploadSettings(UploadSettingsProperty.builder()\n                .containsHeader(false)\n                .delimiter(\"delimiter\")\n                .format(\"format\")\n                .startFromRow(123)\n                .textQualifier(\"textQualifier\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ns3SourceProperty := &s3SourceProperty{\n\tdataSourceArn: jsii.String(\"dataSourceArn\"),\n\tinputColumns: []interface{}{\n\t\t&inputColumnProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tuploadSettings: &uploadSettingsProperty{\n\t\tcontainsHeader: jsii.Boolean(false),\n\t\tdelimiter: jsii.String(\"delimiter\"),\n\t\tformat: jsii.String(\"format\"),\n\t\tstartFromRow: jsii.Number(123),\n\t\ttextQualifier: jsii.String(\"textQualifier\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst s3SourceProperty: quicksight.CfnDataSet.S3SourceProperty = {\n  dataSourceArn: 'dataSourceArn',\n  inputColumns: [{\n    name: 'name',\n    type: 'type',\n  }],\n\n  // the properties below are optional\n  uploadSettings: {\n    containsHeader: false,\n    delimiter: 'delimiter',\n    format: 'format',\n    startFromRow: 123,\n    textQualifier: 'textQualifier',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.S3SourceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.S3SourceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3SourceProperty: quicksight.CfnDataSet.S3SourceProperty = {\n  dataSourceArn: 'dataSourceArn',\n  inputColumns: [{\n    name: 'name',\n    type: 'type',\n  }],\n\n  // the properties below are optional\n  uploadSettings: {\n    containsHeader: false,\n    delimiter: 'delimiter',\n    format: 'format',\n    startFromRow: 123,\n    textQualifier: 'textQualifier',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 15,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "8ac437e349817ccdbfd7764184e5fa92b95ba5924241358201a236521c982dac"
    },
    "8bff3128eb3153370ac2989797f665ae47819a6b1866337b925e3be1a296e7e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntag_column_operation_property = quicksight.CfnDataSet.TagColumnOperationProperty(\n    column_name=\"columnName\",\n    tags=[quicksight.CfnDataSet.ColumnTagProperty(\n        column_description=quicksight.CfnDataSet.ColumnDescriptionProperty(\n            text=\"text\"\n        ),\n        column_geographic_role=\"columnGeographicRole\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTagColumnOperationProperty tagColumnOperationProperty = new TagColumnOperationProperty {\n    ColumnName = \"columnName\",\n    Tags = new [] { new ColumnTagProperty {\n        ColumnDescription = new ColumnDescriptionProperty {\n            Text = \"text\"\n        },\n        ColumnGeographicRole = \"columnGeographicRole\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTagColumnOperationProperty tagColumnOperationProperty = TagColumnOperationProperty.builder()\n        .columnName(\"columnName\")\n        .tags(List.of(ColumnTagProperty.builder()\n                .columnDescription(ColumnDescriptionProperty.builder()\n                        .text(\"text\")\n                        .build())\n                .columnGeographicRole(\"columnGeographicRole\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntagColumnOperationProperty := &tagColumnOperationProperty{\n\tcolumnName: jsii.String(\"columnName\"),\n\ttags: []columnTagProperty{\n\t\t&columnTagProperty{\n\t\t\tcolumnDescription: &columnDescriptionProperty{\n\t\t\t\ttext: jsii.String(\"text\"),\n\t\t\t},\n\t\t\tcolumnGeographicRole: jsii.String(\"columnGeographicRole\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst tagColumnOperationProperty: quicksight.CfnDataSet.TagColumnOperationProperty = {\n  columnName: 'columnName',\n  tags: [{\n    columnDescription: {\n      text: 'text',\n    },\n    columnGeographicRole: 'columnGeographicRole',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.TagColumnOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.TagColumnOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagColumnOperationProperty: quicksight.CfnDataSet.TagColumnOperationProperty = {\n  columnName: 'columnName',\n  tags: [{\n    columnDescription: {\n      text: 'text',\n    },\n    columnGeographicRole: 'columnGeographicRole',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8800d635e756f7b36bc6ba3e25325222c2107705edc124f256415c47762c7b97"
    },
    "698cfd584372e5d6bb480196146bc1012e1b9130dc9ea7834f47ba3211f2bc77": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntransform_operation_property = quicksight.CfnDataSet.TransformOperationProperty(\n    cast_column_type_operation=quicksight.CfnDataSet.CastColumnTypeOperationProperty(\n        column_name=\"columnName\",\n        new_column_type=\"newColumnType\",\n\n        # the properties below are optional\n        format=\"format\"\n    ),\n    create_columns_operation=quicksight.CfnDataSet.CreateColumnsOperationProperty(\n        columns=[quicksight.CfnDataSet.CalculatedColumnProperty(\n            column_id=\"columnId\",\n            column_name=\"columnName\",\n            expression=\"expression\"\n        )]\n    ),\n    filter_operation=quicksight.CfnDataSet.FilterOperationProperty(\n        condition_expression=\"conditionExpression\"\n    ),\n    project_operation=quicksight.CfnDataSet.ProjectOperationProperty(\n        projected_columns=[\"projectedColumns\"]\n    ),\n    rename_column_operation=quicksight.CfnDataSet.RenameColumnOperationProperty(\n        column_name=\"columnName\",\n        new_column_name=\"newColumnName\"\n    ),\n    tag_column_operation=quicksight.CfnDataSet.TagColumnOperationProperty(\n        column_name=\"columnName\",\n        tags=[quicksight.CfnDataSet.ColumnTagProperty(\n            column_description=quicksight.CfnDataSet.ColumnDescriptionProperty(\n                text=\"text\"\n            ),\n            column_geographic_role=\"columnGeographicRole\"\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTransformOperationProperty transformOperationProperty = new TransformOperationProperty {\n    CastColumnTypeOperation = new CastColumnTypeOperationProperty {\n        ColumnName = \"columnName\",\n        NewColumnType = \"newColumnType\",\n\n        // the properties below are optional\n        Format = \"format\"\n    },\n    CreateColumnsOperation = new CreateColumnsOperationProperty {\n        Columns = new [] { new CalculatedColumnProperty {\n            ColumnId = \"columnId\",\n            ColumnName = \"columnName\",\n            Expression = \"expression\"\n        } }\n    },\n    FilterOperation = new FilterOperationProperty {\n        ConditionExpression = \"conditionExpression\"\n    },\n    ProjectOperation = new ProjectOperationProperty {\n        ProjectedColumns = new [] { \"projectedColumns\" }\n    },\n    RenameColumnOperation = new RenameColumnOperationProperty {\n        ColumnName = \"columnName\",\n        NewColumnName = \"newColumnName\"\n    },\n    TagColumnOperation = new TagColumnOperationProperty {\n        ColumnName = \"columnName\",\n        Tags = new [] { new ColumnTagProperty {\n            ColumnDescription = new ColumnDescriptionProperty {\n                Text = \"text\"\n            },\n            ColumnGeographicRole = \"columnGeographicRole\"\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTransformOperationProperty transformOperationProperty = TransformOperationProperty.builder()\n        .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()\n                .columnName(\"columnName\")\n                .newColumnType(\"newColumnType\")\n\n                // the properties below are optional\n                .format(\"format\")\n                .build())\n        .createColumnsOperation(CreateColumnsOperationProperty.builder()\n                .columns(List.of(CalculatedColumnProperty.builder()\n                        .columnId(\"columnId\")\n                        .columnName(\"columnName\")\n                        .expression(\"expression\")\n                        .build()))\n                .build())\n        .filterOperation(FilterOperationProperty.builder()\n                .conditionExpression(\"conditionExpression\")\n                .build())\n        .projectOperation(ProjectOperationProperty.builder()\n                .projectedColumns(List.of(\"projectedColumns\"))\n                .build())\n        .renameColumnOperation(RenameColumnOperationProperty.builder()\n                .columnName(\"columnName\")\n                .newColumnName(\"newColumnName\")\n                .build())\n        .tagColumnOperation(TagColumnOperationProperty.builder()\n                .columnName(\"columnName\")\n                .tags(List.of(ColumnTagProperty.builder()\n                        .columnDescription(ColumnDescriptionProperty.builder()\n                                .text(\"text\")\n                                .build())\n                        .columnGeographicRole(\"columnGeographicRole\")\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntransformOperationProperty := &transformOperationProperty{\n\tcastColumnTypeOperation: &castColumnTypeOperationProperty{\n\t\tcolumnName: jsii.String(\"columnName\"),\n\t\tnewColumnType: jsii.String(\"newColumnType\"),\n\n\t\t// the properties below are optional\n\t\tformat: jsii.String(\"format\"),\n\t},\n\tcreateColumnsOperation: &createColumnsOperationProperty{\n\t\tcolumns: []interface{}{\n\t\t\t&calculatedColumnProperty{\n\t\t\t\tcolumnId: jsii.String(\"columnId\"),\n\t\t\t\tcolumnName: jsii.String(\"columnName\"),\n\t\t\t\texpression: jsii.String(\"expression\"),\n\t\t\t},\n\t\t},\n\t},\n\tfilterOperation: &filterOperationProperty{\n\t\tconditionExpression: jsii.String(\"conditionExpression\"),\n\t},\n\tprojectOperation: &projectOperationProperty{\n\t\tprojectedColumns: []*string{\n\t\t\tjsii.String(\"projectedColumns\"),\n\t\t},\n\t},\n\trenameColumnOperation: &renameColumnOperationProperty{\n\t\tcolumnName: jsii.String(\"columnName\"),\n\t\tnewColumnName: jsii.String(\"newColumnName\"),\n\t},\n\ttagColumnOperation: &tagColumnOperationProperty{\n\t\tcolumnName: jsii.String(\"columnName\"),\n\t\ttags: []columnTagProperty{\n\t\t\t&columnTagProperty{\n\t\t\t\tcolumnDescription: &columnDescriptionProperty{\n\t\t\t\t\ttext: jsii.String(\"text\"),\n\t\t\t\t},\n\t\t\t\tcolumnGeographicRole: jsii.String(\"columnGeographicRole\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst transformOperationProperty: quicksight.CfnDataSet.TransformOperationProperty = {\n  castColumnTypeOperation: {\n    columnName: 'columnName',\n    newColumnType: 'newColumnType',\n\n    // the properties below are optional\n    format: 'format',\n  },\n  createColumnsOperation: {\n    columns: [{\n      columnId: 'columnId',\n      columnName: 'columnName',\n      expression: 'expression',\n    }],\n  },\n  filterOperation: {\n    conditionExpression: 'conditionExpression',\n  },\n  projectOperation: {\n    projectedColumns: ['projectedColumns'],\n  },\n  renameColumnOperation: {\n    columnName: 'columnName',\n    newColumnName: 'newColumnName',\n  },\n  tagColumnOperation: {\n    columnName: 'columnName',\n    tags: [{\n      columnDescription: {\n        text: 'text',\n      },\n      columnGeographicRole: 'columnGeographicRole',\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.TransformOperationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.TransformOperationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst transformOperationProperty: quicksight.CfnDataSet.TransformOperationProperty = {\n  castColumnTypeOperation: {\n    columnName: 'columnName',\n    newColumnType: 'newColumnType',\n\n    // the properties below are optional\n    format: 'format',\n  },\n  createColumnsOperation: {\n    columns: [{\n      columnId: 'columnId',\n      columnName: 'columnName',\n      expression: 'expression',\n    }],\n  },\n  filterOperation: {\n    conditionExpression: 'conditionExpression',\n  },\n  projectOperation: {\n    projectedColumns: ['projectedColumns'],\n  },\n  renameColumnOperation: {\n    columnName: 'columnName',\n    newColumnName: 'newColumnName',\n  },\n  tagColumnOperation: {\n    columnName: 'columnName',\n    tags: [{\n      columnDescription: {\n        text: 'text',\n      },\n      columnGeographicRole: 'columnGeographicRole',\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 27,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 10,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "2697eca495abd66186bdd4e939c5f8a358725c8b08bd681be2da83fc5a2a330f"
    },
    "a861111152fb2bc5f2acd930a1fa722a17d8e39c7542f80cb257dafa5dcfeaa4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nupload_settings_property = quicksight.CfnDataSet.UploadSettingsProperty(\n    contains_header=False,\n    delimiter=\"delimiter\",\n    format=\"format\",\n    start_from_row=123,\n    text_qualifier=\"textQualifier\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nUploadSettingsProperty uploadSettingsProperty = new UploadSettingsProperty {\n    ContainsHeader = false,\n    Delimiter = \"delimiter\",\n    Format = \"format\",\n    StartFromRow = 123,\n    TextQualifier = \"textQualifier\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nUploadSettingsProperty uploadSettingsProperty = UploadSettingsProperty.builder()\n        .containsHeader(false)\n        .delimiter(\"delimiter\")\n        .format(\"format\")\n        .startFromRow(123)\n        .textQualifier(\"textQualifier\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nuploadSettingsProperty := &uploadSettingsProperty{\n\tcontainsHeader: jsii.Boolean(false),\n\tdelimiter: jsii.String(\"delimiter\"),\n\tformat: jsii.String(\"format\"),\n\tstartFromRow: jsii.Number(123),\n\ttextQualifier: jsii.String(\"textQualifier\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst uploadSettingsProperty: quicksight.CfnDataSet.UploadSettingsProperty = {\n  containsHeader: false,\n  delimiter: 'delimiter',\n  format: 'format',\n  startFromRow: 123,\n  textQualifier: 'textQualifier',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSet.UploadSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSet.UploadSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst uploadSettingsProperty: quicksight.CfnDataSet.UploadSettingsProperty = {\n  containsHeader: false,\n  delimiter: 'delimiter',\n  format: 'format',\n  startFromRow: 123,\n  textQualifier: 'textQualifier',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 10,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8efddfe4abbfe0a474422f6181f35289810072149f3f85a5abacb2513ce05020"
    },
    "0ae2b3a74cf53975cb7f04ea167c0780d507e85a4398d60281b003cc88064d4e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_data_set_props = quicksight.CfnDataSetProps(\n    aws_account_id=\"awsAccountId\",\n    column_groups=[quicksight.CfnDataSet.ColumnGroupProperty(\n        geo_spatial_column_group=quicksight.CfnDataSet.GeoSpatialColumnGroupProperty(\n            columns=[\"columns\"],\n            name=\"name\",\n\n            # the properties below are optional\n            country_code=\"countryCode\"\n        )\n    )],\n    column_level_permission_rules=[quicksight.CfnDataSet.ColumnLevelPermissionRuleProperty(\n        column_names=[\"columnNames\"],\n        principals=[\"principals\"]\n    )],\n    data_set_id=\"dataSetId\",\n    data_set_usage_configuration=quicksight.CfnDataSet.DataSetUsageConfigurationProperty(\n        disable_use_as_direct_query_source=False,\n        disable_use_as_imported_source=False\n    ),\n    field_folders={\n        \"field_folders_key\": quicksight.CfnDataSet.FieldFolderProperty(\n            columns=[\"columns\"],\n            description=\"description\"\n        )\n    },\n    import_mode=\"importMode\",\n    ingestion_wait_policy=quicksight.CfnDataSet.IngestionWaitPolicyProperty(\n        ingestion_wait_time_in_hours=123,\n        wait_for_spice_ingestion=False\n    ),\n    logical_table_map={\n        \"logical_table_map_key\": quicksight.CfnDataSet.LogicalTableProperty(\n            alias=\"alias\",\n            source=quicksight.CfnDataSet.LogicalTableSourceProperty(\n                data_set_arn=\"dataSetArn\",\n                join_instruction=quicksight.CfnDataSet.JoinInstructionProperty(\n                    left_operand=\"leftOperand\",\n                    on_clause=\"onClause\",\n                    right_operand=\"rightOperand\",\n                    type=\"type\",\n\n                    # the properties below are optional\n                    left_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n                        unique_key=False\n                    ),\n                    right_join_key_properties=quicksight.CfnDataSet.JoinKeyPropertiesProperty(\n                        unique_key=False\n                    )\n                ),\n                physical_table_id=\"physicalTableId\"\n            ),\n\n            # the properties below are optional\n            data_transforms=[quicksight.CfnDataSet.TransformOperationProperty(\n                cast_column_type_operation=quicksight.CfnDataSet.CastColumnTypeOperationProperty(\n                    column_name=\"columnName\",\n                    new_column_type=\"newColumnType\",\n\n                    # the properties below are optional\n                    format=\"format\"\n                ),\n                create_columns_operation=quicksight.CfnDataSet.CreateColumnsOperationProperty(\n                    columns=[quicksight.CfnDataSet.CalculatedColumnProperty(\n                        column_id=\"columnId\",\n                        column_name=\"columnName\",\n                        expression=\"expression\"\n                    )]\n                ),\n                filter_operation=quicksight.CfnDataSet.FilterOperationProperty(\n                    condition_expression=\"conditionExpression\"\n                ),\n                project_operation=quicksight.CfnDataSet.ProjectOperationProperty(\n                    projected_columns=[\"projectedColumns\"]\n                ),\n                rename_column_operation=quicksight.CfnDataSet.RenameColumnOperationProperty(\n                    column_name=\"columnName\",\n                    new_column_name=\"newColumnName\"\n                ),\n                tag_column_operation=quicksight.CfnDataSet.TagColumnOperationProperty(\n                    column_name=\"columnName\",\n                    tags=[quicksight.CfnDataSet.ColumnTagProperty(\n                        column_description=quicksight.CfnDataSet.ColumnDescriptionProperty(\n                            text=\"text\"\n                        ),\n                        column_geographic_role=\"columnGeographicRole\"\n                    )]\n                )\n            )]\n        )\n    },\n    name=\"name\",\n    permissions=[quicksight.CfnDataSet.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    physical_table_map={\n        \"physical_table_map_key\": quicksight.CfnDataSet.PhysicalTableProperty(\n            custom_sql=quicksight.CfnDataSet.CustomSqlProperty(\n                columns=[quicksight.CfnDataSet.InputColumnProperty(\n                    name=\"name\",\n                    type=\"type\"\n                )],\n                data_source_arn=\"dataSourceArn\",\n                name=\"name\",\n                sql_query=\"sqlQuery\"\n            ),\n            relational_table=quicksight.CfnDataSet.RelationalTableProperty(\n                data_source_arn=\"dataSourceArn\",\n                input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n                    name=\"name\",\n                    type=\"type\"\n                )],\n                name=\"name\",\n\n                # the properties below are optional\n                catalog=\"catalog\",\n                schema=\"schema\"\n            ),\n            s3_source=quicksight.CfnDataSet.S3SourceProperty(\n                data_source_arn=\"dataSourceArn\",\n                input_columns=[quicksight.CfnDataSet.InputColumnProperty(\n                    name=\"name\",\n                    type=\"type\"\n                )],\n\n                # the properties below are optional\n                upload_settings=quicksight.CfnDataSet.UploadSettingsProperty(\n                    contains_header=False,\n                    delimiter=\"delimiter\",\n                    format=\"format\",\n                    start_from_row=123,\n                    text_qualifier=\"textQualifier\"\n                )\n            )\n        )\n    },\n    row_level_permission_data_set=quicksight.CfnDataSet.RowLevelPermissionDataSetProperty(\n        arn=\"arn\",\n        permission_policy=\"permissionPolicy\",\n\n        # the properties below are optional\n        format_version=\"formatVersion\",\n        namespace=\"namespace\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnDataSetProps cfnDataSetProps = new CfnDataSetProps {\n    AwsAccountId = \"awsAccountId\",\n    ColumnGroups = new [] { new ColumnGroupProperty {\n        GeoSpatialColumnGroup = new GeoSpatialColumnGroupProperty {\n            Columns = new [] { \"columns\" },\n            Name = \"name\",\n\n            // the properties below are optional\n            CountryCode = \"countryCode\"\n        }\n    } },\n    ColumnLevelPermissionRules = new [] { new ColumnLevelPermissionRuleProperty {\n        ColumnNames = new [] { \"columnNames\" },\n        Principals = new [] { \"principals\" }\n    } },\n    DataSetId = \"dataSetId\",\n    DataSetUsageConfiguration = new DataSetUsageConfigurationProperty {\n        DisableUseAsDirectQuerySource = false,\n        DisableUseAsImportedSource = false\n    },\n    FieldFolders = new Dictionary<string, object> {\n        { \"fieldFoldersKey\", new FieldFolderProperty {\n            Columns = new [] { \"columns\" },\n            Description = \"description\"\n        } }\n    },\n    ImportMode = \"importMode\",\n    IngestionWaitPolicy = new IngestionWaitPolicyProperty {\n        IngestionWaitTimeInHours = 123,\n        WaitForSpiceIngestion = false\n    },\n    LogicalTableMap = new Dictionary<string, object> {\n        { \"logicalTableMapKey\", new LogicalTableProperty {\n            Alias = \"alias\",\n            Source = new LogicalTableSourceProperty {\n                DataSetArn = \"dataSetArn\",\n                JoinInstruction = new JoinInstructionProperty {\n                    LeftOperand = \"leftOperand\",\n                    OnClause = \"onClause\",\n                    RightOperand = \"rightOperand\",\n                    Type = \"type\",\n\n                    // the properties below are optional\n                    LeftJoinKeyProperties = new JoinKeyPropertiesProperty {\n                        UniqueKey = false\n                    },\n                    RightJoinKeyProperties = new JoinKeyPropertiesProperty {\n                        UniqueKey = false\n                    }\n                },\n                PhysicalTableId = \"physicalTableId\"\n            },\n\n            // the properties below are optional\n            DataTransforms = new [] { new TransformOperationProperty {\n                CastColumnTypeOperation = new CastColumnTypeOperationProperty {\n                    ColumnName = \"columnName\",\n                    NewColumnType = \"newColumnType\",\n\n                    // the properties below are optional\n                    Format = \"format\"\n                },\n                CreateColumnsOperation = new CreateColumnsOperationProperty {\n                    Columns = new [] { new CalculatedColumnProperty {\n                        ColumnId = \"columnId\",\n                        ColumnName = \"columnName\",\n                        Expression = \"expression\"\n                    } }\n                },\n                FilterOperation = new FilterOperationProperty {\n                    ConditionExpression = \"conditionExpression\"\n                },\n                ProjectOperation = new ProjectOperationProperty {\n                    ProjectedColumns = new [] { \"projectedColumns\" }\n                },\n                RenameColumnOperation = new RenameColumnOperationProperty {\n                    ColumnName = \"columnName\",\n                    NewColumnName = \"newColumnName\"\n                },\n                TagColumnOperation = new TagColumnOperationProperty {\n                    ColumnName = \"columnName\",\n                    Tags = new [] { new ColumnTagProperty {\n                        ColumnDescription = new ColumnDescriptionProperty {\n                            Text = \"text\"\n                        },\n                        ColumnGeographicRole = \"columnGeographicRole\"\n                    } }\n                }\n            } }\n        } }\n    },\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    PhysicalTableMap = new Dictionary<string, object> {\n        { \"physicalTableMapKey\", new PhysicalTableProperty {\n            CustomSql = new CustomSqlProperty {\n                Columns = new [] { new InputColumnProperty {\n                    Name = \"name\",\n                    Type = \"type\"\n                } },\n                DataSourceArn = \"dataSourceArn\",\n                Name = \"name\",\n                SqlQuery = \"sqlQuery\"\n            },\n            RelationalTable = new RelationalTableProperty {\n                DataSourceArn = \"dataSourceArn\",\n                InputColumns = new [] { new InputColumnProperty {\n                    Name = \"name\",\n                    Type = \"type\"\n                } },\n                Name = \"name\",\n\n                // the properties below are optional\n                Catalog = \"catalog\",\n                Schema = \"schema\"\n            },\n            S3Source = new S3SourceProperty {\n                DataSourceArn = \"dataSourceArn\",\n                InputColumns = new [] { new InputColumnProperty {\n                    Name = \"name\",\n                    Type = \"type\"\n                } },\n\n                // the properties below are optional\n                UploadSettings = new UploadSettingsProperty {\n                    ContainsHeader = false,\n                    Delimiter = \"delimiter\",\n                    Format = \"format\",\n                    StartFromRow = 123,\n                    TextQualifier = \"textQualifier\"\n                }\n            }\n        } }\n    },\n    RowLevelPermissionDataSet = new RowLevelPermissionDataSetProperty {\n        Arn = \"arn\",\n        PermissionPolicy = \"permissionPolicy\",\n\n        // the properties below are optional\n        FormatVersion = \"formatVersion\",\n        Namespace = \"namespace\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnDataSetProps cfnDataSetProps = CfnDataSetProps.builder()\n        .awsAccountId(\"awsAccountId\")\n        .columnGroups(List.of(ColumnGroupProperty.builder()\n                .geoSpatialColumnGroup(GeoSpatialColumnGroupProperty.builder()\n                        .columns(List.of(\"columns\"))\n                        .name(\"name\")\n\n                        // the properties below are optional\n                        .countryCode(\"countryCode\")\n                        .build())\n                .build()))\n        .columnLevelPermissionRules(List.of(ColumnLevelPermissionRuleProperty.builder()\n                .columnNames(List.of(\"columnNames\"))\n                .principals(List.of(\"principals\"))\n                .build()))\n        .dataSetId(\"dataSetId\")\n        .dataSetUsageConfiguration(DataSetUsageConfigurationProperty.builder()\n                .disableUseAsDirectQuerySource(false)\n                .disableUseAsImportedSource(false)\n                .build())\n        .fieldFolders(Map.of(\n                \"fieldFoldersKey\", FieldFolderProperty.builder()\n                        .columns(List.of(\"columns\"))\n                        .description(\"description\")\n                        .build()))\n        .importMode(\"importMode\")\n        .ingestionWaitPolicy(IngestionWaitPolicyProperty.builder()\n                .ingestionWaitTimeInHours(123)\n                .waitForSpiceIngestion(false)\n                .build())\n        .logicalTableMap(Map.of(\n                \"logicalTableMapKey\", LogicalTableProperty.builder()\n                        .alias(\"alias\")\n                        .source(LogicalTableSourceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .joinInstruction(JoinInstructionProperty.builder()\n                                        .leftOperand(\"leftOperand\")\n                                        .onClause(\"onClause\")\n                                        .rightOperand(\"rightOperand\")\n                                        .type(\"type\")\n\n                                        // the properties below are optional\n                                        .leftJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                                                .uniqueKey(false)\n                                                .build())\n                                        .rightJoinKeyProperties(JoinKeyPropertiesProperty.builder()\n                                                .uniqueKey(false)\n                                                .build())\n                                        .build())\n                                .physicalTableId(\"physicalTableId\")\n                                .build())\n\n                        // the properties below are optional\n                        .dataTransforms(List.of(TransformOperationProperty.builder()\n                                .castColumnTypeOperation(CastColumnTypeOperationProperty.builder()\n                                        .columnName(\"columnName\")\n                                        .newColumnType(\"newColumnType\")\n\n                                        // the properties below are optional\n                                        .format(\"format\")\n                                        .build())\n                                .createColumnsOperation(CreateColumnsOperationProperty.builder()\n                                        .columns(List.of(CalculatedColumnProperty.builder()\n                                                .columnId(\"columnId\")\n                                                .columnName(\"columnName\")\n                                                .expression(\"expression\")\n                                                .build()))\n                                        .build())\n                                .filterOperation(FilterOperationProperty.builder()\n                                        .conditionExpression(\"conditionExpression\")\n                                        .build())\n                                .projectOperation(ProjectOperationProperty.builder()\n                                        .projectedColumns(List.of(\"projectedColumns\"))\n                                        .build())\n                                .renameColumnOperation(RenameColumnOperationProperty.builder()\n                                        .columnName(\"columnName\")\n                                        .newColumnName(\"newColumnName\")\n                                        .build())\n                                .tagColumnOperation(TagColumnOperationProperty.builder()\n                                        .columnName(\"columnName\")\n                                        .tags(List.of(ColumnTagProperty.builder()\n                                                .columnDescription(ColumnDescriptionProperty.builder()\n                                                        .text(\"text\")\n                                                        .build())\n                                                .columnGeographicRole(\"columnGeographicRole\")\n                                                .build()))\n                                        .build())\n                                .build()))\n                        .build()))\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .physicalTableMap(Map.of(\n                \"physicalTableMapKey\", PhysicalTableProperty.builder()\n                        .customSql(CustomSqlProperty.builder()\n                                .columns(List.of(InputColumnProperty.builder()\n                                        .name(\"name\")\n                                        .type(\"type\")\n                                        .build()))\n                                .dataSourceArn(\"dataSourceArn\")\n                                .name(\"name\")\n                                .sqlQuery(\"sqlQuery\")\n                                .build())\n                        .relationalTable(RelationalTableProperty.builder()\n                                .dataSourceArn(\"dataSourceArn\")\n                                .inputColumns(List.of(InputColumnProperty.builder()\n                                        .name(\"name\")\n                                        .type(\"type\")\n                                        .build()))\n                                .name(\"name\")\n\n                                // the properties below are optional\n                                .catalog(\"catalog\")\n                                .schema(\"schema\")\n                                .build())\n                        .s3Source(S3SourceProperty.builder()\n                                .dataSourceArn(\"dataSourceArn\")\n                                .inputColumns(List.of(InputColumnProperty.builder()\n                                        .name(\"name\")\n                                        .type(\"type\")\n                                        .build()))\n\n                                // the properties below are optional\n                                .uploadSettings(UploadSettingsProperty.builder()\n                                        .containsHeader(false)\n                                        .delimiter(\"delimiter\")\n                                        .format(\"format\")\n                                        .startFromRow(123)\n                                        .textQualifier(\"textQualifier\")\n                                        .build())\n                                .build())\n                        .build()))\n        .rowLevelPermissionDataSet(RowLevelPermissionDataSetProperty.builder()\n                .arn(\"arn\")\n                .permissionPolicy(\"permissionPolicy\")\n\n                // the properties below are optional\n                .formatVersion(\"formatVersion\")\n                .namespace(\"namespace\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnDataSetProps := &cfnDataSetProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tcolumnGroups: []interface{}{\n\t\t&columnGroupProperty{\n\t\t\tgeoSpatialColumnGroup: &geoSpatialColumnGroupProperty{\n\t\t\t\tcolumns: []*string{\n\t\t\t\t\tjsii.String(\"columns\"),\n\t\t\t\t},\n\t\t\t\tname: jsii.String(\"name\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcountryCode: jsii.String(\"countryCode\"),\n\t\t\t},\n\t\t},\n\t},\n\tcolumnLevelPermissionRules: []interface{}{\n\t\t&columnLevelPermissionRuleProperty{\n\t\t\tcolumnNames: []*string{\n\t\t\t\tjsii.String(\"columnNames\"),\n\t\t\t},\n\t\t\tprincipals: []*string{\n\t\t\t\tjsii.String(\"principals\"),\n\t\t\t},\n\t\t},\n\t},\n\tdataSetId: jsii.String(\"dataSetId\"),\n\tdataSetUsageConfiguration: &dataSetUsageConfigurationProperty{\n\t\tdisableUseAsDirectQuerySource: jsii.Boolean(false),\n\t\tdisableUseAsImportedSource: jsii.Boolean(false),\n\t},\n\tfieldFolders: map[string]interface{}{\n\t\t\"fieldFoldersKey\": &FieldFolderProperty{\n\t\t\t\"columns\": []*string{\n\t\t\t\tjsii.String(\"columns\"),\n\t\t\t},\n\t\t\t\"description\": jsii.String(\"description\"),\n\t\t},\n\t},\n\timportMode: jsii.String(\"importMode\"),\n\tingestionWaitPolicy: &ingestionWaitPolicyProperty{\n\t\tingestionWaitTimeInHours: jsii.Number(123),\n\t\twaitForSpiceIngestion: jsii.Boolean(false),\n\t},\n\tlogicalTableMap: map[string]interface{}{\n\t\t\"logicalTableMapKey\": &LogicalTableProperty{\n\t\t\t\"alias\": jsii.String(\"alias\"),\n\t\t\t\"source\": &LogicalTableSourceProperty{\n\t\t\t\t\"dataSetArn\": jsii.String(\"dataSetArn\"),\n\t\t\t\t\"joinInstruction\": &JoinInstructionProperty{\n\t\t\t\t\t\"leftOperand\": jsii.String(\"leftOperand\"),\n\t\t\t\t\t\"onClause\": jsii.String(\"onClause\"),\n\t\t\t\t\t\"rightOperand\": jsii.String(\"rightOperand\"),\n\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\"leftJoinKeyProperties\": &JoinKeyPropertiesProperty{\n\t\t\t\t\t\t\"uniqueKey\": jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t\t\"rightJoinKeyProperties\": &JoinKeyPropertiesProperty{\n\t\t\t\t\t\t\"uniqueKey\": jsii.Boolean(false),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"physicalTableId\": jsii.String(\"physicalTableId\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\t\"dataTransforms\": []interface{}{\n\t\t\t\t&TransformOperationProperty{\n\t\t\t\t\t\"castColumnTypeOperation\": &CastColumnTypeOperationProperty{\n\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\"newColumnType\": jsii.String(\"newColumnType\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\t\"format\": jsii.String(\"format\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"createColumnsOperation\": &CreateColumnsOperationProperty{\n\t\t\t\t\t\t\"columns\": []interface{}{\n\t\t\t\t\t\t\t&CalculatedColumnProperty{\n\t\t\t\t\t\t\t\t\"columnId\": jsii.String(\"columnId\"),\n\t\t\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\t\t\"expression\": jsii.String(\"expression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"filterOperation\": &FilterOperationProperty{\n\t\t\t\t\t\t\"conditionExpression\": jsii.String(\"conditionExpression\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"projectOperation\": &ProjectOperationProperty{\n\t\t\t\t\t\t\"projectedColumns\": []*string{\n\t\t\t\t\t\t\tjsii.String(\"projectedColumns\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"renameColumnOperation\": &RenameColumnOperationProperty{\n\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\"newColumnName\": jsii.String(\"newColumnName\"),\n\t\t\t\t\t},\n\t\t\t\t\t\"tagColumnOperation\": &TagColumnOperationProperty{\n\t\t\t\t\t\t\"columnName\": jsii.String(\"columnName\"),\n\t\t\t\t\t\t\"tags\": []ColumnTagProperty{\n\t\t\t\t\t\t\t&ColumnTagProperty{\n\t\t\t\t\t\t\t\t\"columnDescription\": &ColumnDescriptionProperty{\n\t\t\t\t\t\t\t\t\t\"text\": jsii.String(\"text\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"columnGeographicRole\": jsii.String(\"columnGeographicRole\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\tphysicalTableMap: map[string]interface{}{\n\t\t\"physicalTableMapKey\": &PhysicalTableProperty{\n\t\t\t\"customSql\": &CustomSqlProperty{\n\t\t\t\t\"columns\": []interface{}{\n\t\t\t\t\t&InputColumnProperty{\n\t\t\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"dataSourceArn\": jsii.String(\"dataSourceArn\"),\n\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\"sqlQuery\": jsii.String(\"sqlQuery\"),\n\t\t\t},\n\t\t\t\"relationalTable\": &RelationalTableProperty{\n\t\t\t\t\"dataSourceArn\": jsii.String(\"dataSourceArn\"),\n\t\t\t\t\"inputColumns\": []interface{}{\n\t\t\t\t\t&InputColumnProperty{\n\t\t\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"name\": jsii.String(\"name\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\t\"catalog\": jsii.String(\"catalog\"),\n\t\t\t\t\"schema\": jsii.String(\"schema\"),\n\t\t\t},\n\t\t\t\"s3Source\": &S3SourceProperty{\n\t\t\t\t\"dataSourceArn\": jsii.String(\"dataSourceArn\"),\n\t\t\t\t\"inputColumns\": []interface{}{\n\t\t\t\t\t&InputColumnProperty{\n\t\t\t\t\t\t\"name\": jsii.String(\"name\"),\n\t\t\t\t\t\t\"type\": jsii.String(\"type\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\t// the properties below are optional\n\t\t\t\t\"uploadSettings\": &UploadSettingsProperty{\n\t\t\t\t\t\"containsHeader\": jsii.Boolean(false),\n\t\t\t\t\t\"delimiter\": jsii.String(\"delimiter\"),\n\t\t\t\t\t\"format\": jsii.String(\"format\"),\n\t\t\t\t\t\"startFromRow\": jsii.Number(123),\n\t\t\t\t\t\"textQualifier\": jsii.String(\"textQualifier\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\trowLevelPermissionDataSet: &rowLevelPermissionDataSetProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tpermissionPolicy: jsii.String(\"permissionPolicy\"),\n\n\t\t// the properties below are optional\n\t\tformatVersion: jsii.String(\"formatVersion\"),\n\t\tnamespace: jsii.String(\"namespace\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnDataSetProps: quicksight.CfnDataSetProps = {\n  awsAccountId: 'awsAccountId',\n  columnGroups: [{\n    geoSpatialColumnGroup: {\n      columns: ['columns'],\n      name: 'name',\n\n      // the properties below are optional\n      countryCode: 'countryCode',\n    },\n  }],\n  columnLevelPermissionRules: [{\n    columnNames: ['columnNames'],\n    principals: ['principals'],\n  }],\n  dataSetId: 'dataSetId',\n  dataSetUsageConfiguration: {\n    disableUseAsDirectQuerySource: false,\n    disableUseAsImportedSource: false,\n  },\n  fieldFolders: {\n    fieldFoldersKey: {\n      columns: ['columns'],\n      description: 'description',\n    },\n  },\n  importMode: 'importMode',\n  ingestionWaitPolicy: {\n    ingestionWaitTimeInHours: 123,\n    waitForSpiceIngestion: false,\n  },\n  logicalTableMap: {\n    logicalTableMapKey: {\n      alias: 'alias',\n      source: {\n        dataSetArn: 'dataSetArn',\n        joinInstruction: {\n          leftOperand: 'leftOperand',\n          onClause: 'onClause',\n          rightOperand: 'rightOperand',\n          type: 'type',\n\n          // the properties below are optional\n          leftJoinKeyProperties: {\n            uniqueKey: false,\n          },\n          rightJoinKeyProperties: {\n            uniqueKey: false,\n          },\n        },\n        physicalTableId: 'physicalTableId',\n      },\n\n      // the properties below are optional\n      dataTransforms: [{\n        castColumnTypeOperation: {\n          columnName: 'columnName',\n          newColumnType: 'newColumnType',\n\n          // the properties below are optional\n          format: 'format',\n        },\n        createColumnsOperation: {\n          columns: [{\n            columnId: 'columnId',\n            columnName: 'columnName',\n            expression: 'expression',\n          }],\n        },\n        filterOperation: {\n          conditionExpression: 'conditionExpression',\n        },\n        projectOperation: {\n          projectedColumns: ['projectedColumns'],\n        },\n        renameColumnOperation: {\n          columnName: 'columnName',\n          newColumnName: 'newColumnName',\n        },\n        tagColumnOperation: {\n          columnName: 'columnName',\n          tags: [{\n            columnDescription: {\n              text: 'text',\n            },\n            columnGeographicRole: 'columnGeographicRole',\n          }],\n        },\n      }],\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  physicalTableMap: {\n    physicalTableMapKey: {\n      customSql: {\n        columns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        dataSourceArn: 'dataSourceArn',\n        name: 'name',\n        sqlQuery: 'sqlQuery',\n      },\n      relationalTable: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        name: 'name',\n\n        // the properties below are optional\n        catalog: 'catalog',\n        schema: 'schema',\n      },\n      s3Source: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n\n        // the properties below are optional\n        uploadSettings: {\n          containsHeader: false,\n          delimiter: 'delimiter',\n          format: 'format',\n          startFromRow: 123,\n          textQualifier: 'textQualifier',\n        },\n      },\n    },\n  },\n  rowLevelPermissionDataSet: {\n    arn: 'arn',\n    permissionPolicy: 'permissionPolicy',\n\n    // the properties below are optional\n    formatVersion: 'formatVersion',\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDataSetProps: quicksight.CfnDataSetProps = {\n  awsAccountId: 'awsAccountId',\n  columnGroups: [{\n    geoSpatialColumnGroup: {\n      columns: ['columns'],\n      name: 'name',\n\n      // the properties below are optional\n      countryCode: 'countryCode',\n    },\n  }],\n  columnLevelPermissionRules: [{\n    columnNames: ['columnNames'],\n    principals: ['principals'],\n  }],\n  dataSetId: 'dataSetId',\n  dataSetUsageConfiguration: {\n    disableUseAsDirectQuerySource: false,\n    disableUseAsImportedSource: false,\n  },\n  fieldFolders: {\n    fieldFoldersKey: {\n      columns: ['columns'],\n      description: 'description',\n    },\n  },\n  importMode: 'importMode',\n  ingestionWaitPolicy: {\n    ingestionWaitTimeInHours: 123,\n    waitForSpiceIngestion: false,\n  },\n  logicalTableMap: {\n    logicalTableMapKey: {\n      alias: 'alias',\n      source: {\n        dataSetArn: 'dataSetArn',\n        joinInstruction: {\n          leftOperand: 'leftOperand',\n          onClause: 'onClause',\n          rightOperand: 'rightOperand',\n          type: 'type',\n\n          // the properties below are optional\n          leftJoinKeyProperties: {\n            uniqueKey: false,\n          },\n          rightJoinKeyProperties: {\n            uniqueKey: false,\n          },\n        },\n        physicalTableId: 'physicalTableId',\n      },\n\n      // the properties below are optional\n      dataTransforms: [{\n        castColumnTypeOperation: {\n          columnName: 'columnName',\n          newColumnType: 'newColumnType',\n\n          // the properties below are optional\n          format: 'format',\n        },\n        createColumnsOperation: {\n          columns: [{\n            columnId: 'columnId',\n            columnName: 'columnName',\n            expression: 'expression',\n          }],\n        },\n        filterOperation: {\n          conditionExpression: 'conditionExpression',\n        },\n        projectOperation: {\n          projectedColumns: ['projectedColumns'],\n        },\n        renameColumnOperation: {\n          columnName: 'columnName',\n          newColumnName: 'newColumnName',\n        },\n        tagColumnOperation: {\n          columnName: 'columnName',\n          tags: [{\n            columnDescription: {\n              text: 'text',\n            },\n            columnGeographicRole: 'columnGeographicRole',\n          }],\n        },\n      }],\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  physicalTableMap: {\n    physicalTableMapKey: {\n      customSql: {\n        columns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        dataSourceArn: 'dataSourceArn',\n        name: 'name',\n        sqlQuery: 'sqlQuery',\n      },\n      relationalTable: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n        name: 'name',\n\n        // the properties below are optional\n        catalog: 'catalog',\n        schema: 'schema',\n      },\n      s3Source: {\n        dataSourceArn: 'dataSourceArn',\n        inputColumns: [{\n          name: 'name',\n          type: 'type',\n        }],\n\n        // the properties below are optional\n        uploadSettings: {\n          containsHeader: false,\n          delimiter: 'delimiter',\n          format: 'format',\n          startFromRow: 123,\n          textQualifier: 'textQualifier',\n        },\n      },\n    },\n  },\n  rowLevelPermissionDataSet: {\n    arn: 'arn',\n    permissionPolicy: 'permissionPolicy',\n\n    // the properties below are optional\n    formatVersion: 'formatVersion',\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 57,
        "75": 103,
        "91": 6,
        "153": 1,
        "169": 1,
        "192": 16,
        "193": 36,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 99,
        "290": 1
      },
      "fqnsFingerprint": "e51d099ec32a895c5139305bcd82f7c32ee7915a14842d26bea854ce858df1d3"
    },
    "b5bf5fe0b562d3ef6d10897673144a773dfddd90c3fc4c044ed7ff3a9d7479da": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_data_source = quicksight.CfnDataSource(self, \"MyCfnDataSource\",\n    alternate_data_source_parameters=[quicksight.CfnDataSource.DataSourceParametersProperty(\n        amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n            domain=\"domain\"\n        ),\n        amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n            domain=\"domain\"\n        ),\n        athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n            work_group=\"workGroup\"\n        ),\n        aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n            catalog=\"catalog\",\n            host=\"host\",\n            port=123\n        ),\n        rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n            database=\"database\",\n            instance_id=\"instanceId\"\n        ),\n        redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n            database=\"database\",\n\n            # the properties below are optional\n            cluster_id=\"clusterId\",\n            host=\"host\",\n            port=123\n        ),\n        s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n            manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                bucket=\"bucket\",\n                key=\"key\"\n            )\n        ),\n        snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            warehouse=\"warehouse\"\n        ),\n        spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n            host=\"host\",\n            port=123\n        ),\n        sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        )\n    )],\n    aws_account_id=\"awsAccountId\",\n    credentials=quicksight.CfnDataSource.DataSourceCredentialsProperty(\n        copy_source_arn=\"copySourceArn\",\n        credential_pair=quicksight.CfnDataSource.CredentialPairProperty(\n            password=\"password\",\n            username=\"username\",\n\n            # the properties below are optional\n            alternate_data_source_parameters=[quicksight.CfnDataSource.DataSourceParametersProperty(\n                amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n                    domain=\"domain\"\n                ),\n                amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n                    domain=\"domain\"\n                ),\n                athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n                    work_group=\"workGroup\"\n                ),\n                aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n                    catalog=\"catalog\",\n                    host=\"host\",\n                    port=123\n                ),\n                rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n                    database=\"database\",\n                    instance_id=\"instanceId\"\n                ),\n                redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n                    database=\"database\",\n\n                    # the properties below are optional\n                    cluster_id=\"clusterId\",\n                    host=\"host\",\n                    port=123\n                ),\n                s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n                    manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                        bucket=\"bucket\",\n                        key=\"key\"\n                    )\n                ),\n                snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    warehouse=\"warehouse\"\n                ),\n                spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n                    host=\"host\",\n                    port=123\n                ),\n                sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                )\n            )]\n        )\n    ),\n    data_source_id=\"dataSourceId\",\n    data_source_parameters=quicksight.CfnDataSource.DataSourceParametersProperty(\n        amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n            domain=\"domain\"\n        ),\n        amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n            domain=\"domain\"\n        ),\n        athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n            work_group=\"workGroup\"\n        ),\n        aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n            catalog=\"catalog\",\n            host=\"host\",\n            port=123\n        ),\n        rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n            database=\"database\",\n            instance_id=\"instanceId\"\n        ),\n        redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n            database=\"database\",\n\n            # the properties below are optional\n            cluster_id=\"clusterId\",\n            host=\"host\",\n            port=123\n        ),\n        s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n            manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                bucket=\"bucket\",\n                key=\"key\"\n            )\n        ),\n        snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            warehouse=\"warehouse\"\n        ),\n        spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n            host=\"host\",\n            port=123\n        ),\n        sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        )\n    ),\n    error_info=quicksight.CfnDataSource.DataSourceErrorInfoProperty(\n        message=\"message\",\n        type=\"type\"\n    ),\n    name=\"name\",\n    permissions=[quicksight.CfnDataSource.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    ssl_properties=quicksight.CfnDataSource.SslPropertiesProperty(\n        disable_ssl=False\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    type=\"type\",\n    vpc_connection_properties=quicksight.CfnDataSource.VpcConnectionPropertiesProperty(\n        vpc_connection_arn=\"vpcConnectionArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnDataSource cfnDataSource = new CfnDataSource(this, \"MyCfnDataSource\", new CfnDataSourceProps {\n    AlternateDataSourceParameters = new [] { new DataSourceParametersProperty {\n        AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AthenaParameters = new AthenaParametersProperty {\n            WorkGroup = \"workGroup\"\n        },\n        AuroraParameters = new AuroraParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MariaDbParameters = new MariaDbParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MySqlParameters = new MySqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        OracleParameters = new OracleParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PostgreSqlParameters = new PostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PrestoParameters = new PrestoParametersProperty {\n            Catalog = \"catalog\",\n            Host = \"host\",\n            Port = 123\n        },\n        RdsParameters = new RdsParametersProperty {\n            Database = \"database\",\n            InstanceId = \"instanceId\"\n        },\n        RedshiftParameters = new RedshiftParametersProperty {\n            Database = \"database\",\n\n            // the properties below are optional\n            ClusterId = \"clusterId\",\n            Host = \"host\",\n            Port = 123\n        },\n        S3Parameters = new S3ParametersProperty {\n            ManifestFileLocation = new ManifestFileLocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\"\n            }\n        },\n        SnowflakeParameters = new SnowflakeParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Warehouse = \"warehouse\"\n        },\n        SparkParameters = new SparkParametersProperty {\n            Host = \"host\",\n            Port = 123\n        },\n        SqlServerParameters = new SqlServerParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        TeradataParameters = new TeradataParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        }\n    } },\n    AwsAccountId = \"awsAccountId\",\n    Credentials = new DataSourceCredentialsProperty {\n        CopySourceArn = \"copySourceArn\",\n        CredentialPair = new CredentialPairProperty {\n            Password = \"password\",\n            Username = \"username\",\n\n            // the properties below are optional\n            AlternateDataSourceParameters = new [] { new DataSourceParametersProperty {\n                AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n                    Domain = \"domain\"\n                },\n                AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n                    Domain = \"domain\"\n                },\n                AthenaParameters = new AthenaParametersProperty {\n                    WorkGroup = \"workGroup\"\n                },\n                AuroraParameters = new AuroraParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                MariaDbParameters = new MariaDbParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                MySqlParameters = new MySqlParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                OracleParameters = new OracleParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                PostgreSqlParameters = new PostgreSqlParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                PrestoParameters = new PrestoParametersProperty {\n                    Catalog = \"catalog\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                RdsParameters = new RdsParametersProperty {\n                    Database = \"database\",\n                    InstanceId = \"instanceId\"\n                },\n                RedshiftParameters = new RedshiftParametersProperty {\n                    Database = \"database\",\n\n                    // the properties below are optional\n                    ClusterId = \"clusterId\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                S3Parameters = new S3ParametersProperty {\n                    ManifestFileLocation = new ManifestFileLocationProperty {\n                        Bucket = \"bucket\",\n                        Key = \"key\"\n                    }\n                },\n                SnowflakeParameters = new SnowflakeParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Warehouse = \"warehouse\"\n                },\n                SparkParameters = new SparkParametersProperty {\n                    Host = \"host\",\n                    Port = 123\n                },\n                SqlServerParameters = new SqlServerParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                TeradataParameters = new TeradataParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                }\n            } }\n        }\n    },\n    DataSourceId = \"dataSourceId\",\n    DataSourceParameters = new DataSourceParametersProperty {\n        AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AthenaParameters = new AthenaParametersProperty {\n            WorkGroup = \"workGroup\"\n        },\n        AuroraParameters = new AuroraParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MariaDbParameters = new MariaDbParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MySqlParameters = new MySqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        OracleParameters = new OracleParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PostgreSqlParameters = new PostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PrestoParameters = new PrestoParametersProperty {\n            Catalog = \"catalog\",\n            Host = \"host\",\n            Port = 123\n        },\n        RdsParameters = new RdsParametersProperty {\n            Database = \"database\",\n            InstanceId = \"instanceId\"\n        },\n        RedshiftParameters = new RedshiftParametersProperty {\n            Database = \"database\",\n\n            // the properties below are optional\n            ClusterId = \"clusterId\",\n            Host = \"host\",\n            Port = 123\n        },\n        S3Parameters = new S3ParametersProperty {\n            ManifestFileLocation = new ManifestFileLocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\"\n            }\n        },\n        SnowflakeParameters = new SnowflakeParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Warehouse = \"warehouse\"\n        },\n        SparkParameters = new SparkParametersProperty {\n            Host = \"host\",\n            Port = 123\n        },\n        SqlServerParameters = new SqlServerParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        TeradataParameters = new TeradataParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        }\n    },\n    ErrorInfo = new DataSourceErrorInfoProperty {\n        Message = \"message\",\n        Type = \"type\"\n    },\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    SslProperties = new SslPropertiesProperty {\n        DisableSsl = false\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Type = \"type\",\n    VpcConnectionProperties = new VpcConnectionPropertiesProperty {\n        VpcConnectionArn = \"vpcConnectionArn\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnDataSource cfnDataSource = CfnDataSource.Builder.create(this, \"MyCfnDataSource\")\n        .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()\n                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .athenaParameters(AthenaParametersProperty.builder()\n                        .workGroup(\"workGroup\")\n                        .build())\n                .auroraParameters(AuroraParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mariaDbParameters(MariaDbParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mySqlParameters(MySqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .oracleParameters(OracleParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .prestoParameters(PrestoParametersProperty.builder()\n                        .catalog(\"catalog\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .rdsParameters(RdsParametersProperty.builder()\n                        .database(\"database\")\n                        .instanceId(\"instanceId\")\n                        .build())\n                .redshiftParameters(RedshiftParametersProperty.builder()\n                        .database(\"database\")\n\n                        // the properties below are optional\n                        .clusterId(\"clusterId\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .s3Parameters(S3ParametersProperty.builder()\n                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n                                .build())\n                        .build())\n                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .warehouse(\"warehouse\")\n                        .build())\n                .sparkParameters(SparkParametersProperty.builder()\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .sqlServerParameters(SqlServerParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .teradataParameters(TeradataParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .build()))\n        .awsAccountId(\"awsAccountId\")\n        .credentials(DataSourceCredentialsProperty.builder()\n                .copySourceArn(\"copySourceArn\")\n                .credentialPair(CredentialPairProperty.builder()\n                        .password(\"password\")\n                        .username(\"username\")\n\n                        // the properties below are optional\n                        .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()\n                                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                                        .domain(\"domain\")\n                                        .build())\n                                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                                        .domain(\"domain\")\n                                        .build())\n                                .athenaParameters(AthenaParametersProperty.builder()\n                                        .workGroup(\"workGroup\")\n                                        .build())\n                                .auroraParameters(AuroraParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .mariaDbParameters(MariaDbParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .mySqlParameters(MySqlParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .oracleParameters(OracleParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .prestoParameters(PrestoParametersProperty.builder()\n                                        .catalog(\"catalog\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .rdsParameters(RdsParametersProperty.builder()\n                                        .database(\"database\")\n                                        .instanceId(\"instanceId\")\n                                        .build())\n                                .redshiftParameters(RedshiftParametersProperty.builder()\n                                        .database(\"database\")\n\n                                        // the properties below are optional\n                                        .clusterId(\"clusterId\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .s3Parameters(S3ParametersProperty.builder()\n                                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                                .bucket(\"bucket\")\n                                                .key(\"key\")\n                                                .build())\n                                        .build())\n                                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .warehouse(\"warehouse\")\n                                        .build())\n                                .sparkParameters(SparkParametersProperty.builder()\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .sqlServerParameters(SqlServerParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .teradataParameters(TeradataParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .build()))\n                        .build())\n                .build())\n        .dataSourceId(\"dataSourceId\")\n        .dataSourceParameters(DataSourceParametersProperty.builder()\n                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .athenaParameters(AthenaParametersProperty.builder()\n                        .workGroup(\"workGroup\")\n                        .build())\n                .auroraParameters(AuroraParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mariaDbParameters(MariaDbParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mySqlParameters(MySqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .oracleParameters(OracleParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .prestoParameters(PrestoParametersProperty.builder()\n                        .catalog(\"catalog\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .rdsParameters(RdsParametersProperty.builder()\n                        .database(\"database\")\n                        .instanceId(\"instanceId\")\n                        .build())\n                .redshiftParameters(RedshiftParametersProperty.builder()\n                        .database(\"database\")\n\n                        // the properties below are optional\n                        .clusterId(\"clusterId\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .s3Parameters(S3ParametersProperty.builder()\n                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n                                .build())\n                        .build())\n                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .warehouse(\"warehouse\")\n                        .build())\n                .sparkParameters(SparkParametersProperty.builder()\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .sqlServerParameters(SqlServerParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .teradataParameters(TeradataParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .build())\n        .errorInfo(DataSourceErrorInfoProperty.builder()\n                .message(\"message\")\n                .type(\"type\")\n                .build())\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .sslProperties(SslPropertiesProperty.builder()\n                .disableSsl(false)\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .type(\"type\")\n        .vpcConnectionProperties(VpcConnectionPropertiesProperty.builder()\n                .vpcConnectionArn(\"vpcConnectionArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnDataSource := quicksight.NewCfnDataSource(this, jsii.String(\"MyCfnDataSource\"), &cfnDataSourceProps{\n\talternateDataSourceParameters: []interface{}{\n\t\t&dataSourceParametersProperty{\n\t\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t},\n\t\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t},\n\t\t\tathenaParameters: &athenaParametersProperty{\n\t\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t\t},\n\t\t\tauroraParameters: &auroraParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\toracleParameters: &oracleParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tprestoParameters: &prestoParametersProperty{\n\t\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\trdsParameters: &rdsParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t\t},\n\t\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\ts3Parameters: &s3ParametersProperty{\n\t\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t\t},\n\t\t\tsparkParameters: &sparkParametersProperty{\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tteradataParameters: &teradataParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tcredentials: &dataSourceCredentialsProperty{\n\t\tcopySourceArn: jsii.String(\"copySourceArn\"),\n\t\tcredentialPair: &credentialPairProperty{\n\t\t\tpassword: jsii.String(\"password\"),\n\t\t\tusername: jsii.String(\"username\"),\n\n\t\t\t// the properties below are optional\n\t\t\talternateDataSourceParameters: []interface{}{\n\t\t\t\t&dataSourceParametersProperty{\n\t\t\t\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t\t\t},\n\t\t\t\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t\t\t},\n\t\t\t\t\tathenaParameters: &athenaParametersProperty{\n\t\t\t\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t\t\t\t},\n\t\t\t\t\tauroraParameters: &auroraParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\toracleParameters: &oracleParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tprestoParameters: &prestoParametersProperty{\n\t\t\t\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\trdsParameters: &rdsParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t\t\t\t},\n\t\t\t\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\ts3Parameters: &s3ParametersProperty{\n\t\t\t\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t\t\t\t},\n\t\t\t\t\tsparkParameters: &sparkParametersProperty{\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tteradataParameters: &teradataParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tdataSourceId: jsii.String(\"dataSourceId\"),\n\tdataSourceParameters: &dataSourceParametersProperty{\n\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\tdomain: jsii.String(\"domain\"),\n\t\t},\n\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\tdomain: jsii.String(\"domain\"),\n\t\t},\n\t\tathenaParameters: &athenaParametersProperty{\n\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t},\n\t\tauroraParameters: &auroraParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\toracleParameters: &oracleParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tprestoParameters: &prestoParametersProperty{\n\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\trdsParameters: &rdsParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t},\n\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t// the properties below are optional\n\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\ts3Parameters: &s3ParametersProperty{\n\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t},\n\t\t},\n\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t},\n\t\tsparkParameters: &sparkParametersProperty{\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tteradataParameters: &teradataParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t},\n\terrorInfo: &dataSourceErrorInfoProperty{\n\t\tmessage: jsii.String(\"message\"),\n\t\ttype: jsii.String(\"type\"),\n\t},\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\tsslProperties: &sslPropertiesProperty{\n\t\tdisableSsl: jsii.Boolean(false),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttype: jsii.String(\"type\"),\n\tvpcConnectionProperties: &vpcConnectionPropertiesProperty{\n\t\tvpcConnectionArn: jsii.String(\"vpcConnectionArn\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnDataSource = new quicksight.CfnDataSource(this, 'MyCfnDataSource', /* all optional props */ {\n  alternateDataSourceParameters: [{\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  }],\n  awsAccountId: 'awsAccountId',\n  credentials: {\n    copySourceArn: 'copySourceArn',\n    credentialPair: {\n      password: 'password',\n      username: 'username',\n\n      // the properties below are optional\n      alternateDataSourceParameters: [{\n        amazonElasticsearchParameters: {\n          domain: 'domain',\n        },\n        amazonOpenSearchParameters: {\n          domain: 'domain',\n        },\n        athenaParameters: {\n          workGroup: 'workGroup',\n        },\n        auroraParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        auroraPostgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mariaDbParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mySqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        oracleParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        postgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        prestoParameters: {\n          catalog: 'catalog',\n          host: 'host',\n          port: 123,\n        },\n        rdsParameters: {\n          database: 'database',\n          instanceId: 'instanceId',\n        },\n        redshiftParameters: {\n          database: 'database',\n\n          // the properties below are optional\n          clusterId: 'clusterId',\n          host: 'host',\n          port: 123,\n        },\n        s3Parameters: {\n          manifestFileLocation: {\n            bucket: 'bucket',\n            key: 'key',\n          },\n        },\n        snowflakeParameters: {\n          database: 'database',\n          host: 'host',\n          warehouse: 'warehouse',\n        },\n        sparkParameters: {\n          host: 'host',\n          port: 123,\n        },\n        sqlServerParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        teradataParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n      }],\n    },\n  },\n  dataSourceId: 'dataSourceId',\n  dataSourceParameters: {\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  },\n  errorInfo: {\n    message: 'message',\n    type: 'type',\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  sslProperties: {\n    disableSsl: false,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n  vpcConnectionProperties: {\n    vpcConnectionArn: 'vpcConnectionArn',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource",
        "@aws-cdk/aws-quicksight.CfnDataSourceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDataSource = new quicksight.CfnDataSource(this, 'MyCfnDataSource', /* all optional props */ {\n  alternateDataSourceParameters: [{\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  }],\n  awsAccountId: 'awsAccountId',\n  credentials: {\n    copySourceArn: 'copySourceArn',\n    credentialPair: {\n      password: 'password',\n      username: 'username',\n\n      // the properties below are optional\n      alternateDataSourceParameters: [{\n        amazonElasticsearchParameters: {\n          domain: 'domain',\n        },\n        amazonOpenSearchParameters: {\n          domain: 'domain',\n        },\n        athenaParameters: {\n          workGroup: 'workGroup',\n        },\n        auroraParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        auroraPostgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mariaDbParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mySqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        oracleParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        postgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        prestoParameters: {\n          catalog: 'catalog',\n          host: 'host',\n          port: 123,\n        },\n        rdsParameters: {\n          database: 'database',\n          instanceId: 'instanceId',\n        },\n        redshiftParameters: {\n          database: 'database',\n\n          // the properties below are optional\n          clusterId: 'clusterId',\n          host: 'host',\n          port: 123,\n        },\n        s3Parameters: {\n          manifestFileLocation: {\n            bucket: 'bucket',\n            key: 'key',\n          },\n        },\n        snowflakeParameters: {\n          database: 'database',\n          host: 'host',\n          warehouse: 'warehouse',\n        },\n        sparkParameters: {\n          host: 'host',\n          port: 123,\n        },\n        sqlServerParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        teradataParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n      }],\n    },\n  },\n  dataSourceId: 'dataSourceId',\n  dataSourceParameters: {\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  },\n  errorInfo: {\n    message: 'message',\n    type: 'type',\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  sslProperties: {\n    disableSsl: false,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n  vpcConnectionProperties: {\n    vpcConnectionArn: 'vpcConnectionArn',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 33,
        "10": 112,
        "75": 212,
        "91": 1,
        "104": 1,
        "192": 5,
        "193": 65,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 208,
        "290": 1
      },
      "fqnsFingerprint": "ce2fcfe933f0b58bda048abc34873057e39e37544c3ccbe55fb6a4593e44fd61"
    },
    "c25a8dc750f445493d0de98b1b843cdac3cfaf6dd902bb02aaf763a844d2706c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\namazon_elasticsearch_parameters_property = quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n    domain=\"domain\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAmazonElasticsearchParametersProperty amazonElasticsearchParametersProperty = new AmazonElasticsearchParametersProperty {\n    Domain = \"domain\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAmazonElasticsearchParametersProperty amazonElasticsearchParametersProperty = AmazonElasticsearchParametersProperty.builder()\n        .domain(\"domain\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\namazonElasticsearchParametersProperty := &amazonElasticsearchParametersProperty{\n\tdomain: jsii.String(\"domain\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst amazonElasticsearchParametersProperty: quicksight.CfnDataSource.AmazonElasticsearchParametersProperty = {\n  domain: 'domain',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.AmazonElasticsearchParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.AmazonElasticsearchParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst amazonElasticsearchParametersProperty: quicksight.CfnDataSource.AmazonElasticsearchParametersProperty = {\n  domain: 'domain',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f1b5d30a15cabd78d09b8be35ade266fbb77793d2c307cc44d4017e6ad6b43ed"
    },
    "deaa90a57091bfcba827632488b4e9dcb3ce0e278575784b69ea99ca7fa3d523": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\namazon_open_search_parameters_property = quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n    domain=\"domain\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAmazonOpenSearchParametersProperty amazonOpenSearchParametersProperty = new AmazonOpenSearchParametersProperty {\n    Domain = \"domain\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAmazonOpenSearchParametersProperty amazonOpenSearchParametersProperty = AmazonOpenSearchParametersProperty.builder()\n        .domain(\"domain\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\namazonOpenSearchParametersProperty := &amazonOpenSearchParametersProperty{\n\tdomain: jsii.String(\"domain\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst amazonOpenSearchParametersProperty: quicksight.CfnDataSource.AmazonOpenSearchParametersProperty = {\n  domain: 'domain',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.AmazonOpenSearchParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.AmazonOpenSearchParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst amazonOpenSearchParametersProperty: quicksight.CfnDataSource.AmazonOpenSearchParametersProperty = {\n  domain: 'domain',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "bbe4fc90e9c439aff9d20033b73db7693d2e61d31947695e00448376c386b723"
    },
    "b5a418b03e57fbc1e8eed0e4b6d5f6acd086e1a04fef39ef5ec556fd02e35b66": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nathena_parameters_property = quicksight.CfnDataSource.AthenaParametersProperty(\n    work_group=\"workGroup\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAthenaParametersProperty athenaParametersProperty = new AthenaParametersProperty {\n    WorkGroup = \"workGroup\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAthenaParametersProperty athenaParametersProperty = AthenaParametersProperty.builder()\n        .workGroup(\"workGroup\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nathenaParametersProperty := &athenaParametersProperty{\n\tworkGroup: jsii.String(\"workGroup\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst athenaParametersProperty: quicksight.CfnDataSource.AthenaParametersProperty = {\n  workGroup: 'workGroup',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.AthenaParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.AthenaParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst athenaParametersProperty: quicksight.CfnDataSource.AthenaParametersProperty = {\n  workGroup: 'workGroup',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ef2b53cd90280c1b4df5f1b8a5f7eefc8c460a6273950c1756c21b17dbbc072f"
    },
    "e3fae10268a19153029fbd34245ec1e3686796268a34d6ad8c6f05a4c5524845": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\naurora_parameters_property = quicksight.CfnDataSource.AuroraParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAuroraParametersProperty auroraParametersProperty = new AuroraParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAuroraParametersProperty auroraParametersProperty = AuroraParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nauroraParametersProperty := &auroraParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst auroraParametersProperty: quicksight.CfnDataSource.AuroraParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.AuroraParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.AuroraParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst auroraParametersProperty: quicksight.CfnDataSource.AuroraParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7d11f647f750b4919f2a027939563ed5e443191b5af168131ac854f73976ac8d"
    },
    "c127d1122b0c5edd4e7befc75a0adbafd019ff44d3269231b450168665815598": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\naurora_postgre_sql_parameters_property = quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nAuroraPostgreSqlParametersProperty auroraPostgreSqlParametersProperty = new AuroraPostgreSqlParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nAuroraPostgreSqlParametersProperty auroraPostgreSqlParametersProperty = AuroraPostgreSqlParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nauroraPostgreSqlParametersProperty := &auroraPostgreSqlParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst auroraPostgreSqlParametersProperty: quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst auroraPostgreSqlParametersProperty: quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e34449131e4c231860b4f1748a6ef23b4102a4d8ba6fa71a96906b05694d367d"
    },
    "0e42960830ed3230c1dc954dbeaab096db62173c1b0d9822f78b644a8f92d00e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncredential_pair_property = quicksight.CfnDataSource.CredentialPairProperty(\n    password=\"password\",\n    username=\"username\",\n\n    # the properties below are optional\n    alternate_data_source_parameters=[quicksight.CfnDataSource.DataSourceParametersProperty(\n        amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n            domain=\"domain\"\n        ),\n        amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n            domain=\"domain\"\n        ),\n        athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n            work_group=\"workGroup\"\n        ),\n        aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n            catalog=\"catalog\",\n            host=\"host\",\n            port=123\n        ),\n        rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n            database=\"database\",\n            instance_id=\"instanceId\"\n        ),\n        redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n            database=\"database\",\n\n            # the properties below are optional\n            cluster_id=\"clusterId\",\n            host=\"host\",\n            port=123\n        ),\n        s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n            manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                bucket=\"bucket\",\n                key=\"key\"\n            )\n        ),\n        snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            warehouse=\"warehouse\"\n        ),\n        spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n            host=\"host\",\n            port=123\n        ),\n        sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCredentialPairProperty credentialPairProperty = new CredentialPairProperty {\n    Password = \"password\",\n    Username = \"username\",\n\n    // the properties below are optional\n    AlternateDataSourceParameters = new [] { new DataSourceParametersProperty {\n        AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AthenaParameters = new AthenaParametersProperty {\n            WorkGroup = \"workGroup\"\n        },\n        AuroraParameters = new AuroraParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MariaDbParameters = new MariaDbParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MySqlParameters = new MySqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        OracleParameters = new OracleParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PostgreSqlParameters = new PostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PrestoParameters = new PrestoParametersProperty {\n            Catalog = \"catalog\",\n            Host = \"host\",\n            Port = 123\n        },\n        RdsParameters = new RdsParametersProperty {\n            Database = \"database\",\n            InstanceId = \"instanceId\"\n        },\n        RedshiftParameters = new RedshiftParametersProperty {\n            Database = \"database\",\n\n            // the properties below are optional\n            ClusterId = \"clusterId\",\n            Host = \"host\",\n            Port = 123\n        },\n        S3Parameters = new S3ParametersProperty {\n            ManifestFileLocation = new ManifestFileLocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\"\n            }\n        },\n        SnowflakeParameters = new SnowflakeParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Warehouse = \"warehouse\"\n        },\n        SparkParameters = new SparkParametersProperty {\n            Host = \"host\",\n            Port = 123\n        },\n        SqlServerParameters = new SqlServerParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        TeradataParameters = new TeradataParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCredentialPairProperty credentialPairProperty = CredentialPairProperty.builder()\n        .password(\"password\")\n        .username(\"username\")\n\n        // the properties below are optional\n        .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()\n                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .athenaParameters(AthenaParametersProperty.builder()\n                        .workGroup(\"workGroup\")\n                        .build())\n                .auroraParameters(AuroraParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mariaDbParameters(MariaDbParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mySqlParameters(MySqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .oracleParameters(OracleParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .prestoParameters(PrestoParametersProperty.builder()\n                        .catalog(\"catalog\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .rdsParameters(RdsParametersProperty.builder()\n                        .database(\"database\")\n                        .instanceId(\"instanceId\")\n                        .build())\n                .redshiftParameters(RedshiftParametersProperty.builder()\n                        .database(\"database\")\n\n                        // the properties below are optional\n                        .clusterId(\"clusterId\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .s3Parameters(S3ParametersProperty.builder()\n                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n                                .build())\n                        .build())\n                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .warehouse(\"warehouse\")\n                        .build())\n                .sparkParameters(SparkParametersProperty.builder()\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .sqlServerParameters(SqlServerParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .teradataParameters(TeradataParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncredentialPairProperty := &credentialPairProperty{\n\tpassword: jsii.String(\"password\"),\n\tusername: jsii.String(\"username\"),\n\n\t// the properties below are optional\n\talternateDataSourceParameters: []interface{}{\n\t\t&dataSourceParametersProperty{\n\t\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t},\n\t\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t},\n\t\t\tathenaParameters: &athenaParametersProperty{\n\t\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t\t},\n\t\t\tauroraParameters: &auroraParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\toracleParameters: &oracleParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tprestoParameters: &prestoParametersProperty{\n\t\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\trdsParameters: &rdsParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t\t},\n\t\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\ts3Parameters: &s3ParametersProperty{\n\t\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t\t},\n\t\t\tsparkParameters: &sparkParametersProperty{\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tteradataParameters: &teradataParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst credentialPairProperty: quicksight.CfnDataSource.CredentialPairProperty = {\n  password: 'password',\n  username: 'username',\n\n  // the properties below are optional\n  alternateDataSourceParameters: [{\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.CredentialPairProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.CredentialPairProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst credentialPairProperty: quicksight.CfnDataSource.CredentialPairProperty = {\n  password: 'password',\n  username: 'username',\n\n  // the properties below are optional\n  alternateDataSourceParameters: [{\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 11,
        "10": 35,
        "75": 69,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 20,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 64,
        "290": 1
      },
      "fqnsFingerprint": "d31a3b10218ce3447e802b6c3365914d3c57f2c62d82feaef13cd058ff30e419"
    },
    "f828e1b62764e08481cf3df38e294b49f82b5954aa9d95560ed8ace90709950f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_source_credentials_property = quicksight.CfnDataSource.DataSourceCredentialsProperty(\n    copy_source_arn=\"copySourceArn\",\n    credential_pair=quicksight.CfnDataSource.CredentialPairProperty(\n        password=\"password\",\n        username=\"username\",\n\n        # the properties below are optional\n        alternate_data_source_parameters=[quicksight.CfnDataSource.DataSourceParametersProperty(\n            amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n                domain=\"domain\"\n            ),\n            amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n                domain=\"domain\"\n            ),\n            athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n                work_group=\"workGroup\"\n            ),\n            aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n                catalog=\"catalog\",\n                host=\"host\",\n                port=123\n            ),\n            rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n                database=\"database\",\n                instance_id=\"instanceId\"\n            ),\n            redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n                database=\"database\",\n\n                # the properties below are optional\n                cluster_id=\"clusterId\",\n                host=\"host\",\n                port=123\n            ),\n            s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n                manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                    bucket=\"bucket\",\n                    key=\"key\"\n                )\n            ),\n            snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                warehouse=\"warehouse\"\n            ),\n            spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n                host=\"host\",\n                port=123\n            ),\n            sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            ),\n            teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n                database=\"database\",\n                host=\"host\",\n                port=123\n            )\n        )]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSourceCredentialsProperty dataSourceCredentialsProperty = new DataSourceCredentialsProperty {\n    CopySourceArn = \"copySourceArn\",\n    CredentialPair = new CredentialPairProperty {\n        Password = \"password\",\n        Username = \"username\",\n\n        // the properties below are optional\n        AlternateDataSourceParameters = new [] { new DataSourceParametersProperty {\n            AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n                Domain = \"domain\"\n            },\n            AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n                Domain = \"domain\"\n            },\n            AthenaParameters = new AthenaParametersProperty {\n                WorkGroup = \"workGroup\"\n            },\n            AuroraParameters = new AuroraParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            MariaDbParameters = new MariaDbParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            MySqlParameters = new MySqlParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            OracleParameters = new OracleParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            PostgreSqlParameters = new PostgreSqlParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            PrestoParameters = new PrestoParametersProperty {\n                Catalog = \"catalog\",\n                Host = \"host\",\n                Port = 123\n            },\n            RdsParameters = new RdsParametersProperty {\n                Database = \"database\",\n                InstanceId = \"instanceId\"\n            },\n            RedshiftParameters = new RedshiftParametersProperty {\n                Database = \"database\",\n\n                // the properties below are optional\n                ClusterId = \"clusterId\",\n                Host = \"host\",\n                Port = 123\n            },\n            S3Parameters = new S3ParametersProperty {\n                ManifestFileLocation = new ManifestFileLocationProperty {\n                    Bucket = \"bucket\",\n                    Key = \"key\"\n                }\n            },\n            SnowflakeParameters = new SnowflakeParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Warehouse = \"warehouse\"\n            },\n            SparkParameters = new SparkParametersProperty {\n                Host = \"host\",\n                Port = 123\n            },\n            SqlServerParameters = new SqlServerParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            },\n            TeradataParameters = new TeradataParametersProperty {\n                Database = \"database\",\n                Host = \"host\",\n                Port = 123\n            }\n        } }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSourceCredentialsProperty dataSourceCredentialsProperty = DataSourceCredentialsProperty.builder()\n        .copySourceArn(\"copySourceArn\")\n        .credentialPair(CredentialPairProperty.builder()\n                .password(\"password\")\n                .username(\"username\")\n\n                // the properties below are optional\n                .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()\n                        .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                                .domain(\"domain\")\n                                .build())\n                        .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                                .domain(\"domain\")\n                                .build())\n                        .athenaParameters(AthenaParametersProperty.builder()\n                                .workGroup(\"workGroup\")\n                                .build())\n                        .auroraParameters(AuroraParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .mariaDbParameters(MariaDbParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .mySqlParameters(MySqlParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .oracleParameters(OracleParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .prestoParameters(PrestoParametersProperty.builder()\n                                .catalog(\"catalog\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .rdsParameters(RdsParametersProperty.builder()\n                                .database(\"database\")\n                                .instanceId(\"instanceId\")\n                                .build())\n                        .redshiftParameters(RedshiftParametersProperty.builder()\n                                .database(\"database\")\n\n                                // the properties below are optional\n                                .clusterId(\"clusterId\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .s3Parameters(S3ParametersProperty.builder()\n                                .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                        .bucket(\"bucket\")\n                                        .key(\"key\")\n                                        .build())\n                                .build())\n                        .snowflakeParameters(SnowflakeParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .warehouse(\"warehouse\")\n                                .build())\n                        .sparkParameters(SparkParametersProperty.builder()\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .sqlServerParameters(SqlServerParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .teradataParameters(TeradataParametersProperty.builder()\n                                .database(\"database\")\n                                .host(\"host\")\n                                .port(123)\n                                .build())\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSourceCredentialsProperty := &dataSourceCredentialsProperty{\n\tcopySourceArn: jsii.String(\"copySourceArn\"),\n\tcredentialPair: &credentialPairProperty{\n\t\tpassword: jsii.String(\"password\"),\n\t\tusername: jsii.String(\"username\"),\n\n\t\t// the properties below are optional\n\t\talternateDataSourceParameters: []interface{}{\n\t\t\t&dataSourceParametersProperty{\n\t\t\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t\t},\n\t\t\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t\t},\n\t\t\t\tathenaParameters: &athenaParametersProperty{\n\t\t\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t\t\t},\n\t\t\t\tauroraParameters: &auroraParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\toracleParameters: &oracleParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tprestoParameters: &prestoParametersProperty{\n\t\t\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\trdsParameters: &rdsParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t\t\t},\n\t\t\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\ts3Parameters: &s3ParametersProperty{\n\t\t\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t\t\t},\n\t\t\t\tsparkParameters: &sparkParametersProperty{\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t\tteradataParameters: &teradataParametersProperty{\n\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSourceCredentialsProperty: quicksight.CfnDataSource.DataSourceCredentialsProperty = {\n  copySourceArn: 'copySourceArn',\n  credentialPair: {\n    password: 'password',\n    username: 'username',\n\n    // the properties below are optional\n    alternateDataSourceParameters: [{\n      amazonElasticsearchParameters: {\n        domain: 'domain',\n      },\n      amazonOpenSearchParameters: {\n        domain: 'domain',\n      },\n      athenaParameters: {\n        workGroup: 'workGroup',\n      },\n      auroraParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      auroraPostgreSqlParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      mariaDbParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      mySqlParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      oracleParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      postgreSqlParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      prestoParameters: {\n        catalog: 'catalog',\n        host: 'host',\n        port: 123,\n      },\n      rdsParameters: {\n        database: 'database',\n        instanceId: 'instanceId',\n      },\n      redshiftParameters: {\n        database: 'database',\n\n        // the properties below are optional\n        clusterId: 'clusterId',\n        host: 'host',\n        port: 123,\n      },\n      s3Parameters: {\n        manifestFileLocation: {\n          bucket: 'bucket',\n          key: 'key',\n        },\n      },\n      snowflakeParameters: {\n        database: 'database',\n        host: 'host',\n        warehouse: 'warehouse',\n      },\n      sparkParameters: {\n        host: 'host',\n        port: 123,\n      },\n      sqlServerParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      teradataParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n    }],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.DataSourceCredentialsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.DataSourceCredentialsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSourceCredentialsProperty: quicksight.CfnDataSource.DataSourceCredentialsProperty = {\n  copySourceArn: 'copySourceArn',\n  credentialPair: {\n    password: 'password',\n    username: 'username',\n\n    // the properties below are optional\n    alternateDataSourceParameters: [{\n      amazonElasticsearchParameters: {\n        domain: 'domain',\n      },\n      amazonOpenSearchParameters: {\n        domain: 'domain',\n      },\n      athenaParameters: {\n        workGroup: 'workGroup',\n      },\n      auroraParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      auroraPostgreSqlParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      mariaDbParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      mySqlParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      oracleParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      postgreSqlParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      prestoParameters: {\n        catalog: 'catalog',\n        host: 'host',\n        port: 123,\n      },\n      rdsParameters: {\n        database: 'database',\n        instanceId: 'instanceId',\n      },\n      redshiftParameters: {\n        database: 'database',\n\n        // the properties below are optional\n        clusterId: 'clusterId',\n        host: 'host',\n        port: 123,\n      },\n      s3Parameters: {\n        manifestFileLocation: {\n          bucket: 'bucket',\n          key: 'key',\n        },\n      },\n      snowflakeParameters: {\n        database: 'database',\n        host: 'host',\n        warehouse: 'warehouse',\n      },\n      sparkParameters: {\n        host: 'host',\n        port: 123,\n      },\n      sqlServerParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n      teradataParameters: {\n        database: 'database',\n        host: 'host',\n        port: 123,\n      },\n    }],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 11,
        "10": 36,
        "75": 71,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 21,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 66,
        "290": 1
      },
      "fqnsFingerprint": "e1290abdea67608a5ff6dac69649b1765593e7056f98c68616f236bd8fa146d6"
    },
    "507984469d6e423f7aa326fe1c0b7948ba4bd71332dea850da0e0125e4756264": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_source_error_info_property = quicksight.CfnDataSource.DataSourceErrorInfoProperty(\n    message=\"message\",\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSourceErrorInfoProperty dataSourceErrorInfoProperty = new DataSourceErrorInfoProperty {\n    Message = \"message\",\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSourceErrorInfoProperty dataSourceErrorInfoProperty = DataSourceErrorInfoProperty.builder()\n        .message(\"message\")\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSourceErrorInfoProperty := &dataSourceErrorInfoProperty{\n\tmessage: jsii.String(\"message\"),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSourceErrorInfoProperty: quicksight.CfnDataSource.DataSourceErrorInfoProperty = {\n  message: 'message',\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.DataSourceErrorInfoProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.DataSourceErrorInfoProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSourceErrorInfoProperty: quicksight.CfnDataSource.DataSourceErrorInfoProperty = {\n  message: 'message',\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "298375b4777c9f370ef1ce1b4bdedab78f58049169b013312a16b3393cc9a6ad"
    },
    "e39dda2eeb640a80aef8941ebbdbb048fb52cef4db5ebc28a737828da1db1732": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_source_parameters_property = quicksight.CfnDataSource.DataSourceParametersProperty(\n    amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n        domain=\"domain\"\n    ),\n    amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n        domain=\"domain\"\n    ),\n    athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n        work_group=\"workGroup\"\n    ),\n    aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n        catalog=\"catalog\",\n        host=\"host\",\n        port=123\n    ),\n    rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n        database=\"database\",\n        instance_id=\"instanceId\"\n    ),\n    redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n        database=\"database\",\n\n        # the properties below are optional\n        cluster_id=\"clusterId\",\n        host=\"host\",\n        port=123\n    ),\n    s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n        manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n            bucket=\"bucket\",\n            key=\"key\"\n        )\n    ),\n    snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        warehouse=\"warehouse\"\n    ),\n    spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n        host=\"host\",\n        port=123\n    ),\n    sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    ),\n    teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n        database=\"database\",\n        host=\"host\",\n        port=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSourceParametersProperty dataSourceParametersProperty = new DataSourceParametersProperty {\n    AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n        Domain = \"domain\"\n    },\n    AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n        Domain = \"domain\"\n    },\n    AthenaParameters = new AthenaParametersProperty {\n        WorkGroup = \"workGroup\"\n    },\n    AuroraParameters = new AuroraParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    MariaDbParameters = new MariaDbParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    MySqlParameters = new MySqlParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    OracleParameters = new OracleParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    PostgreSqlParameters = new PostgreSqlParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    PrestoParameters = new PrestoParametersProperty {\n        Catalog = \"catalog\",\n        Host = \"host\",\n        Port = 123\n    },\n    RdsParameters = new RdsParametersProperty {\n        Database = \"database\",\n        InstanceId = \"instanceId\"\n    },\n    RedshiftParameters = new RedshiftParametersProperty {\n        Database = \"database\",\n\n        // the properties below are optional\n        ClusterId = \"clusterId\",\n        Host = \"host\",\n        Port = 123\n    },\n    S3Parameters = new S3ParametersProperty {\n        ManifestFileLocation = new ManifestFileLocationProperty {\n            Bucket = \"bucket\",\n            Key = \"key\"\n        }\n    },\n    SnowflakeParameters = new SnowflakeParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Warehouse = \"warehouse\"\n    },\n    SparkParameters = new SparkParametersProperty {\n        Host = \"host\",\n        Port = 123\n    },\n    SqlServerParameters = new SqlServerParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    },\n    TeradataParameters = new TeradataParametersProperty {\n        Database = \"database\",\n        Host = \"host\",\n        Port = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSourceParametersProperty dataSourceParametersProperty = DataSourceParametersProperty.builder()\n        .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                .domain(\"domain\")\n                .build())\n        .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                .domain(\"domain\")\n                .build())\n        .athenaParameters(AthenaParametersProperty.builder()\n                .workGroup(\"workGroup\")\n                .build())\n        .auroraParameters(AuroraParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .mariaDbParameters(MariaDbParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .mySqlParameters(MySqlParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .oracleParameters(OracleParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .prestoParameters(PrestoParametersProperty.builder()\n                .catalog(\"catalog\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .rdsParameters(RdsParametersProperty.builder()\n                .database(\"database\")\n                .instanceId(\"instanceId\")\n                .build())\n        .redshiftParameters(RedshiftParametersProperty.builder()\n                .database(\"database\")\n\n                // the properties below are optional\n                .clusterId(\"clusterId\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .s3Parameters(S3ParametersProperty.builder()\n                .manifestFileLocation(ManifestFileLocationProperty.builder()\n                        .bucket(\"bucket\")\n                        .key(\"key\")\n                        .build())\n                .build())\n        .snowflakeParameters(SnowflakeParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .warehouse(\"warehouse\")\n                .build())\n        .sparkParameters(SparkParametersProperty.builder()\n                .host(\"host\")\n                .port(123)\n                .build())\n        .sqlServerParameters(SqlServerParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .teradataParameters(TeradataParametersProperty.builder()\n                .database(\"database\")\n                .host(\"host\")\n                .port(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSourceParametersProperty := &dataSourceParametersProperty{\n\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\tdomain: jsii.String(\"domain\"),\n\t},\n\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\tdomain: jsii.String(\"domain\"),\n\t},\n\tathenaParameters: &athenaParametersProperty{\n\t\tworkGroup: jsii.String(\"workGroup\"),\n\t},\n\tauroraParameters: &auroraParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tmariaDbParameters: &mariaDbParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tmySqlParameters: &mySqlParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\toracleParameters: &oracleParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tprestoParameters: &prestoParametersProperty{\n\t\tcatalog: jsii.String(\"catalog\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\trdsParameters: &rdsParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\tinstanceId: jsii.String(\"instanceId\"),\n\t},\n\tredshiftParameters: &redshiftParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\n\t\t// the properties below are optional\n\t\tclusterId: jsii.String(\"clusterId\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\ts3Parameters: &s3ParametersProperty{\n\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\tkey: jsii.String(\"key\"),\n\t\t},\n\t},\n\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\twarehouse: jsii.String(\"warehouse\"),\n\t},\n\tsparkParameters: &sparkParametersProperty{\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tsqlServerParameters: &sqlServerParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n\tteradataParameters: &teradataParametersProperty{\n\t\tdatabase: jsii.String(\"database\"),\n\t\thost: jsii.String(\"host\"),\n\t\tport: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSourceParametersProperty: quicksight.CfnDataSource.DataSourceParametersProperty = {\n  amazonElasticsearchParameters: {\n    domain: 'domain',\n  },\n  amazonOpenSearchParameters: {\n    domain: 'domain',\n  },\n  athenaParameters: {\n    workGroup: 'workGroup',\n  },\n  auroraParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  auroraPostgreSqlParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  mariaDbParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  mySqlParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  oracleParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  postgreSqlParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  prestoParameters: {\n    catalog: 'catalog',\n    host: 'host',\n    port: 123,\n  },\n  rdsParameters: {\n    database: 'database',\n    instanceId: 'instanceId',\n  },\n  redshiftParameters: {\n    database: 'database',\n\n    // the properties below are optional\n    clusterId: 'clusterId',\n    host: 'host',\n    port: 123,\n  },\n  s3Parameters: {\n    manifestFileLocation: {\n      bucket: 'bucket',\n      key: 'key',\n    },\n  },\n  snowflakeParameters: {\n    database: 'database',\n    host: 'host',\n    warehouse: 'warehouse',\n  },\n  sparkParameters: {\n    host: 'host',\n    port: 123,\n  },\n  sqlServerParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  teradataParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.DataSourceParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.DataSourceParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSourceParametersProperty: quicksight.CfnDataSource.DataSourceParametersProperty = {\n  amazonElasticsearchParameters: {\n    domain: 'domain',\n  },\n  amazonOpenSearchParameters: {\n    domain: 'domain',\n  },\n  athenaParameters: {\n    workGroup: 'workGroup',\n  },\n  auroraParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  auroraPostgreSqlParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  mariaDbParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  mySqlParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  oracleParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  postgreSqlParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  prestoParameters: {\n    catalog: 'catalog',\n    host: 'host',\n    port: 123,\n  },\n  rdsParameters: {\n    database: 'database',\n    instanceId: 'instanceId',\n  },\n  redshiftParameters: {\n    database: 'database',\n\n    // the properties below are optional\n    clusterId: 'clusterId',\n    host: 'host',\n    port: 123,\n  },\n  s3Parameters: {\n    manifestFileLocation: {\n      bucket: 'bucket',\n      key: 'key',\n    },\n  },\n  snowflakeParameters: {\n    database: 'database',\n    host: 'host',\n    warehouse: 'warehouse',\n  },\n  sparkParameters: {\n    host: 'host',\n    port: 123,\n  },\n  sqlServerParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n  teradataParameters: {\n    database: 'database',\n    host: 'host',\n    port: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 11,
        "10": 33,
        "75": 66,
        "153": 2,
        "169": 1,
        "193": 19,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 61,
        "290": 1
      },
      "fqnsFingerprint": "9556129763b48c19378f94e0c72d8da170d1a7f3df409ac7307a036bb0c855e5"
    },
    "a5f52afc1a732bc61b465b4268a180a2bd3b0cb4a2e78b2b2c455fa6a8acaf9b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nmanifest_file_location_property = quicksight.CfnDataSource.ManifestFileLocationProperty(\n    bucket=\"bucket\",\n    key=\"key\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nManifestFileLocationProperty manifestFileLocationProperty = new ManifestFileLocationProperty {\n    Bucket = \"bucket\",\n    Key = \"key\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nManifestFileLocationProperty manifestFileLocationProperty = ManifestFileLocationProperty.builder()\n        .bucket(\"bucket\")\n        .key(\"key\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nmanifestFileLocationProperty := &manifestFileLocationProperty{\n\tbucket: jsii.String(\"bucket\"),\n\tkey: jsii.String(\"key\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst manifestFileLocationProperty: quicksight.CfnDataSource.ManifestFileLocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.ManifestFileLocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.ManifestFileLocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst manifestFileLocationProperty: quicksight.CfnDataSource.ManifestFileLocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e089d569de2737371155b421f58a9663947e337c6903fb1c8244fbd9b44879cd"
    },
    "a3b8e6385282e7bb43ee779240905037d7de799b609220bf00df53d7733c4e43": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nmaria_db_parameters_property = quicksight.CfnDataSource.MariaDbParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nMariaDbParametersProperty mariaDbParametersProperty = new MariaDbParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nMariaDbParametersProperty mariaDbParametersProperty = MariaDbParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nmariaDbParametersProperty := &mariaDbParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst mariaDbParametersProperty: quicksight.CfnDataSource.MariaDbParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.MariaDbParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.MariaDbParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mariaDbParametersProperty: quicksight.CfnDataSource.MariaDbParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "debc12d9d7c6cce25a8c3ccd7023d550f5ad43c57cb5624cf357729dd3e195cc"
    },
    "ff2e70c595df0b7a35ec58071987622a3dc973138d4c6c3a1a44aa1fc03037d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nmy_sql_parameters_property = quicksight.CfnDataSource.MySqlParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nMySqlParametersProperty mySqlParametersProperty = new MySqlParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nMySqlParametersProperty mySqlParametersProperty = MySqlParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nmySqlParametersProperty := &mySqlParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst mySqlParametersProperty: quicksight.CfnDataSource.MySqlParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.MySqlParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.MySqlParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mySqlParametersProperty: quicksight.CfnDataSource.MySqlParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f807d0ab5c3dd95524272bdf6d30e6fdb4d269050b00bc26ebe1ad4bd2daa04"
    },
    "4462548fcd2b2dba03447af9810d784ad466a3b2449038bab419d584d8a19fe2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\noracle_parameters_property = quicksight.CfnDataSource.OracleParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nOracleParametersProperty oracleParametersProperty = new OracleParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nOracleParametersProperty oracleParametersProperty = OracleParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\noracleParametersProperty := &oracleParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst oracleParametersProperty: quicksight.CfnDataSource.OracleParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.OracleParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.OracleParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst oracleParametersProperty: quicksight.CfnDataSource.OracleParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "1a9232a8938d1d477d0af42d50a207441efa961d2e10f949e93fc5adfebff9af"
    },
    "b8a1fe6ff1619cb80396b45264512e429ab1dabe3cb7b19ce43dbc65e7c96209": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\npostgre_sql_parameters_property = quicksight.CfnDataSource.PostgreSqlParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nPostgreSqlParametersProperty postgreSqlParametersProperty = new PostgreSqlParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nPostgreSqlParametersProperty postgreSqlParametersProperty = PostgreSqlParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\npostgreSqlParametersProperty := &postgreSqlParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst postgreSqlParametersProperty: quicksight.CfnDataSource.PostgreSqlParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.PostgreSqlParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.PostgreSqlParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst postgreSqlParametersProperty: quicksight.CfnDataSource.PostgreSqlParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7d244504736f07aba36b441188969a347d16600e972193fcf45fab5396394850"
    },
    "690c0a4c5b7384c2c0d1eb1084ddf0cf87eebec50455191c97f830a0e0e252bc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\npresto_parameters_property = quicksight.CfnDataSource.PrestoParametersProperty(\n    catalog=\"catalog\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nPrestoParametersProperty prestoParametersProperty = new PrestoParametersProperty {\n    Catalog = \"catalog\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nPrestoParametersProperty prestoParametersProperty = PrestoParametersProperty.builder()\n        .catalog(\"catalog\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nprestoParametersProperty := &prestoParametersProperty{\n\tcatalog: jsii.String(\"catalog\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst prestoParametersProperty: quicksight.CfnDataSource.PrestoParametersProperty = {\n  catalog: 'catalog',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.PrestoParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.PrestoParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst prestoParametersProperty: quicksight.CfnDataSource.PrestoParametersProperty = {\n  catalog: 'catalog',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5369a313bcc00c952acfdad236b93ece80cffde22d327b1b2ff43fb55f4aab4f"
    },
    "dca6c771bacef05e11b1461cbbf011970973590e3ec66d6bdc3d32656db0ed2b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nrds_parameters_property = quicksight.CfnDataSource.RdsParametersProperty(\n    database=\"database\",\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nRdsParametersProperty rdsParametersProperty = new RdsParametersProperty {\n    Database = \"database\",\n    InstanceId = \"instanceId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nRdsParametersProperty rdsParametersProperty = RdsParametersProperty.builder()\n        .database(\"database\")\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nrdsParametersProperty := &rdsParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\tinstanceId: jsii.String(\"instanceId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst rdsParametersProperty: quicksight.CfnDataSource.RdsParametersProperty = {\n  database: 'database',\n  instanceId: 'instanceId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.RdsParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.RdsParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rdsParametersProperty: quicksight.CfnDataSource.RdsParametersProperty = {\n  database: 'database',\n  instanceId: 'instanceId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "13efe50a0ce89aa6505724acf624ca5028721b17b932d7d41a23f99c47183a34"
    },
    "d463e1be91440c6b0fc19f903718aaeea6baee2fd1ab0b2b1f1635b53f42347c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nredshift_parameters_property = quicksight.CfnDataSource.RedshiftParametersProperty(\n    database=\"database\",\n\n    # the properties below are optional\n    cluster_id=\"clusterId\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nRedshiftParametersProperty redshiftParametersProperty = new RedshiftParametersProperty {\n    Database = \"database\",\n\n    // the properties below are optional\n    ClusterId = \"clusterId\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nRedshiftParametersProperty redshiftParametersProperty = RedshiftParametersProperty.builder()\n        .database(\"database\")\n\n        // the properties below are optional\n        .clusterId(\"clusterId\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nredshiftParametersProperty := &redshiftParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\n\t// the properties below are optional\n\tclusterId: jsii.String(\"clusterId\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst redshiftParametersProperty: quicksight.CfnDataSource.RedshiftParametersProperty = {\n  database: 'database',\n\n  // the properties below are optional\n  clusterId: 'clusterId',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.RedshiftParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.RedshiftParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst redshiftParametersProperty: quicksight.CfnDataSource.RedshiftParametersProperty = {\n  database: 'database',\n\n  // the properties below are optional\n  clusterId: 'clusterId',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "6337be07d1d4420c42de4a058210060c27e18ad70a684035dbd06d83c5750b52"
    },
    "c9ba671470a521d422d436814217e9b4b04bda58a7aac765bf70c4d2df06cb4c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nresource_permission_property = quicksight.CfnDataSource.ResourcePermissionProperty(\n    actions=[\"actions\"],\n    principal=\"principal\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nResourcePermissionProperty resourcePermissionProperty = new ResourcePermissionProperty {\n    Actions = new [] { \"actions\" },\n    Principal = \"principal\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()\n        .actions(List.of(\"actions\"))\n        .principal(\"principal\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nresourcePermissionProperty := &resourcePermissionProperty{\n\tactions: []*string{\n\t\tjsii.String(\"actions\"),\n\t},\n\tprincipal: jsii.String(\"principal\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst resourcePermissionProperty: quicksight.CfnDataSource.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.ResourcePermissionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.ResourcePermissionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePermissionProperty: quicksight.CfnDataSource.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b149be082336aff8d87f5aa7110cf59dd239a9d402ad5f9d3db78dc53c31b42f"
    },
    "ed68190842e82128ffd5a4add9dc15019bf0ac9e608126c76e185570aa446828": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ns3_parameters_property = quicksight.CfnDataSource.S3ParametersProperty(\n    manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n        bucket=\"bucket\",\n        key=\"key\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nS3ParametersProperty s3ParametersProperty = new S3ParametersProperty {\n    ManifestFileLocation = new ManifestFileLocationProperty {\n        Bucket = \"bucket\",\n        Key = \"key\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nS3ParametersProperty s3ParametersProperty = S3ParametersProperty.builder()\n        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ns3ParametersProperty := &s3ParametersProperty{\n\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\tbucket: jsii.String(\"bucket\"),\n\t\tkey: jsii.String(\"key\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst s3ParametersProperty: quicksight.CfnDataSource.S3ParametersProperty = {\n  manifestFileLocation: {\n    bucket: 'bucket',\n    key: 'key',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.S3ParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.S3ParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3ParametersProperty: quicksight.CfnDataSource.S3ParametersProperty = {\n  manifestFileLocation: {\n    bucket: 'bucket',\n    key: 'key',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f180703fe87c12bac0235e62f4d6941e31fd9407fb3b0de97e34709ae885c430"
    },
    "98d883e1fb7a11c3c3d747c3f9c7dab0f177ac59174bb793f4e334fd2d094c0f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nsnowflake_parameters_property = quicksight.CfnDataSource.SnowflakeParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    warehouse=\"warehouse\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSnowflakeParametersProperty snowflakeParametersProperty = new SnowflakeParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Warehouse = \"warehouse\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSnowflakeParametersProperty snowflakeParametersProperty = SnowflakeParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .warehouse(\"warehouse\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsnowflakeParametersProperty := &snowflakeParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\twarehouse: jsii.String(\"warehouse\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst snowflakeParametersProperty: quicksight.CfnDataSource.SnowflakeParametersProperty = {\n  database: 'database',\n  host: 'host',\n  warehouse: 'warehouse',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.SnowflakeParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.SnowflakeParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst snowflakeParametersProperty: quicksight.CfnDataSource.SnowflakeParametersProperty = {\n  database: 'database',\n  host: 'host',\n  warehouse: 'warehouse',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "12bb117c57fe2fadf7ea3f19c1d2519a34cc5b522747cb24d1a81b19152d5550"
    },
    "0757e53547138a476ffaab406fd34748e6720f2aae065b8ec50850c54b80ce8c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nspark_parameters_property = quicksight.CfnDataSource.SparkParametersProperty(\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSparkParametersProperty sparkParametersProperty = new SparkParametersProperty {\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSparkParametersProperty sparkParametersProperty = SparkParametersProperty.builder()\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsparkParametersProperty := &sparkParametersProperty{\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst sparkParametersProperty: quicksight.CfnDataSource.SparkParametersProperty = {\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.SparkParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.SparkParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sparkParametersProperty: quicksight.CfnDataSource.SparkParametersProperty = {\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9ef73cb092b62fb8e9847996e0907c869bfe33209306dd6b0108d2773c15bf39"
    },
    "4bc2a1828cc643ca3e765e8dd999f52bedf6a1dc45c4be24ef5498d9a6ebcba1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nsql_server_parameters_property = quicksight.CfnDataSource.SqlServerParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSqlServerParametersProperty sqlServerParametersProperty = new SqlServerParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSqlServerParametersProperty sqlServerParametersProperty = SqlServerParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsqlServerParametersProperty := &sqlServerParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst sqlServerParametersProperty: quicksight.CfnDataSource.SqlServerParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.SqlServerParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.SqlServerParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqlServerParametersProperty: quicksight.CfnDataSource.SqlServerParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cb21a0906badff06f0b8fd760e734a421e86eb967005d2093bde1dec82a85638"
    },
    "eee249423d185a25b1b85754b2285c01db9bbb01ed9d59288f8e4a651ff459f4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nssl_properties_property = quicksight.CfnDataSource.SslPropertiesProperty(\n    disable_ssl=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSslPropertiesProperty sslPropertiesProperty = new SslPropertiesProperty {\n    DisableSsl = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSslPropertiesProperty sslPropertiesProperty = SslPropertiesProperty.builder()\n        .disableSsl(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsslPropertiesProperty := &sslPropertiesProperty{\n\tdisableSsl: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst sslPropertiesProperty: quicksight.CfnDataSource.SslPropertiesProperty = {\n  disableSsl: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.SslPropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.SslPropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sslPropertiesProperty: quicksight.CfnDataSource.SslPropertiesProperty = {\n  disableSsl: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b7dfce2d1663822c4850dd45f6db90976c6d37a2dde9b818d80d3febd51de656"
    },
    "ab926f0ce01ff4026d20247f61dae72adf94b62fd879ba0f1e08eecf558e170c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nteradata_parameters_property = quicksight.CfnDataSource.TeradataParametersProperty(\n    database=\"database\",\n    host=\"host\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTeradataParametersProperty teradataParametersProperty = new TeradataParametersProperty {\n    Database = \"database\",\n    Host = \"host\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTeradataParametersProperty teradataParametersProperty = TeradataParametersProperty.builder()\n        .database(\"database\")\n        .host(\"host\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nteradataParametersProperty := &teradataParametersProperty{\n\tdatabase: jsii.String(\"database\"),\n\thost: jsii.String(\"host\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst teradataParametersProperty: quicksight.CfnDataSource.TeradataParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.TeradataParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.TeradataParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst teradataParametersProperty: quicksight.CfnDataSource.TeradataParametersProperty = {\n  database: 'database',\n  host: 'host',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4aef88bec5c3ea3b0f7260461ac6f43af11d16915b03649ccb25f9e80c63f7bd"
    },
    "2b2070cf6107ab7a717ba1b36cb18291e1ec0a5dcf0df2d057d90e14b20fa967": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nvpc_connection_properties_property = quicksight.CfnDataSource.VpcConnectionPropertiesProperty(\n    vpc_connection_arn=\"vpcConnectionArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nVpcConnectionPropertiesProperty vpcConnectionPropertiesProperty = new VpcConnectionPropertiesProperty {\n    VpcConnectionArn = \"vpcConnectionArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nVpcConnectionPropertiesProperty vpcConnectionPropertiesProperty = VpcConnectionPropertiesProperty.builder()\n        .vpcConnectionArn(\"vpcConnectionArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nvpcConnectionPropertiesProperty := &vpcConnectionPropertiesProperty{\n\tvpcConnectionArn: jsii.String(\"vpcConnectionArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst vpcConnectionPropertiesProperty: quicksight.CfnDataSource.VpcConnectionPropertiesProperty = {\n  vpcConnectionArn: 'vpcConnectionArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSource.VpcConnectionPropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSource.VpcConnectionPropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst vpcConnectionPropertiesProperty: quicksight.CfnDataSource.VpcConnectionPropertiesProperty = {\n  vpcConnectionArn: 'vpcConnectionArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "d3eccd806e897905984957199373ea4a5153ebdf86cca49a599bde3946287727"
    },
    "b57b4551cba80e00c5bdf4d306836fabf6c2ff0f634cd5b73a6b46f7823dda9d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_data_source_props = quicksight.CfnDataSourceProps(\n    alternate_data_source_parameters=[quicksight.CfnDataSource.DataSourceParametersProperty(\n        amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n            domain=\"domain\"\n        ),\n        amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n            domain=\"domain\"\n        ),\n        athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n            work_group=\"workGroup\"\n        ),\n        aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n            catalog=\"catalog\",\n            host=\"host\",\n            port=123\n        ),\n        rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n            database=\"database\",\n            instance_id=\"instanceId\"\n        ),\n        redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n            database=\"database\",\n\n            # the properties below are optional\n            cluster_id=\"clusterId\",\n            host=\"host\",\n            port=123\n        ),\n        s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n            manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                bucket=\"bucket\",\n                key=\"key\"\n            )\n        ),\n        snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            warehouse=\"warehouse\"\n        ),\n        spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n            host=\"host\",\n            port=123\n        ),\n        sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        )\n    )],\n    aws_account_id=\"awsAccountId\",\n    credentials=quicksight.CfnDataSource.DataSourceCredentialsProperty(\n        copy_source_arn=\"copySourceArn\",\n        credential_pair=quicksight.CfnDataSource.CredentialPairProperty(\n            password=\"password\",\n            username=\"username\",\n\n            # the properties below are optional\n            alternate_data_source_parameters=[quicksight.CfnDataSource.DataSourceParametersProperty(\n                amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n                    domain=\"domain\"\n                ),\n                amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n                    domain=\"domain\"\n                ),\n                athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n                    work_group=\"workGroup\"\n                ),\n                aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n                    catalog=\"catalog\",\n                    host=\"host\",\n                    port=123\n                ),\n                rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n                    database=\"database\",\n                    instance_id=\"instanceId\"\n                ),\n                redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n                    database=\"database\",\n\n                    # the properties below are optional\n                    cluster_id=\"clusterId\",\n                    host=\"host\",\n                    port=123\n                ),\n                s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n                    manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                        bucket=\"bucket\",\n                        key=\"key\"\n                    )\n                ),\n                snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    warehouse=\"warehouse\"\n                ),\n                spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n                    host=\"host\",\n                    port=123\n                ),\n                sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                ),\n                teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n                    database=\"database\",\n                    host=\"host\",\n                    port=123\n                )\n            )]\n        )\n    ),\n    data_source_id=\"dataSourceId\",\n    data_source_parameters=quicksight.CfnDataSource.DataSourceParametersProperty(\n        amazon_elasticsearch_parameters=quicksight.CfnDataSource.AmazonElasticsearchParametersProperty(\n            domain=\"domain\"\n        ),\n        amazon_open_search_parameters=quicksight.CfnDataSource.AmazonOpenSearchParametersProperty(\n            domain=\"domain\"\n        ),\n        athena_parameters=quicksight.CfnDataSource.AthenaParametersProperty(\n            work_group=\"workGroup\"\n        ),\n        aurora_parameters=quicksight.CfnDataSource.AuroraParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        aurora_postgre_sql_parameters=quicksight.CfnDataSource.AuroraPostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        maria_db_parameters=quicksight.CfnDataSource.MariaDbParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        my_sql_parameters=quicksight.CfnDataSource.MySqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        oracle_parameters=quicksight.CfnDataSource.OracleParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        postgre_sql_parameters=quicksight.CfnDataSource.PostgreSqlParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        presto_parameters=quicksight.CfnDataSource.PrestoParametersProperty(\n            catalog=\"catalog\",\n            host=\"host\",\n            port=123\n        ),\n        rds_parameters=quicksight.CfnDataSource.RdsParametersProperty(\n            database=\"database\",\n            instance_id=\"instanceId\"\n        ),\n        redshift_parameters=quicksight.CfnDataSource.RedshiftParametersProperty(\n            database=\"database\",\n\n            # the properties below are optional\n            cluster_id=\"clusterId\",\n            host=\"host\",\n            port=123\n        ),\n        s3_parameters=quicksight.CfnDataSource.S3ParametersProperty(\n            manifest_file_location=quicksight.CfnDataSource.ManifestFileLocationProperty(\n                bucket=\"bucket\",\n                key=\"key\"\n            )\n        ),\n        snowflake_parameters=quicksight.CfnDataSource.SnowflakeParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            warehouse=\"warehouse\"\n        ),\n        spark_parameters=quicksight.CfnDataSource.SparkParametersProperty(\n            host=\"host\",\n            port=123\n        ),\n        sql_server_parameters=quicksight.CfnDataSource.SqlServerParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        ),\n        teradata_parameters=quicksight.CfnDataSource.TeradataParametersProperty(\n            database=\"database\",\n            host=\"host\",\n            port=123\n        )\n    ),\n    error_info=quicksight.CfnDataSource.DataSourceErrorInfoProperty(\n        message=\"message\",\n        type=\"type\"\n    ),\n    name=\"name\",\n    permissions=[quicksight.CfnDataSource.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    ssl_properties=quicksight.CfnDataSource.SslPropertiesProperty(\n        disable_ssl=False\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    type=\"type\",\n    vpc_connection_properties=quicksight.CfnDataSource.VpcConnectionPropertiesProperty(\n        vpc_connection_arn=\"vpcConnectionArn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnDataSourceProps cfnDataSourceProps = new CfnDataSourceProps {\n    AlternateDataSourceParameters = new [] { new DataSourceParametersProperty {\n        AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AthenaParameters = new AthenaParametersProperty {\n            WorkGroup = \"workGroup\"\n        },\n        AuroraParameters = new AuroraParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MariaDbParameters = new MariaDbParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MySqlParameters = new MySqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        OracleParameters = new OracleParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PostgreSqlParameters = new PostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PrestoParameters = new PrestoParametersProperty {\n            Catalog = \"catalog\",\n            Host = \"host\",\n            Port = 123\n        },\n        RdsParameters = new RdsParametersProperty {\n            Database = \"database\",\n            InstanceId = \"instanceId\"\n        },\n        RedshiftParameters = new RedshiftParametersProperty {\n            Database = \"database\",\n\n            // the properties below are optional\n            ClusterId = \"clusterId\",\n            Host = \"host\",\n            Port = 123\n        },\n        S3Parameters = new S3ParametersProperty {\n            ManifestFileLocation = new ManifestFileLocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\"\n            }\n        },\n        SnowflakeParameters = new SnowflakeParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Warehouse = \"warehouse\"\n        },\n        SparkParameters = new SparkParametersProperty {\n            Host = \"host\",\n            Port = 123\n        },\n        SqlServerParameters = new SqlServerParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        TeradataParameters = new TeradataParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        }\n    } },\n    AwsAccountId = \"awsAccountId\",\n    Credentials = new DataSourceCredentialsProperty {\n        CopySourceArn = \"copySourceArn\",\n        CredentialPair = new CredentialPairProperty {\n            Password = \"password\",\n            Username = \"username\",\n\n            // the properties below are optional\n            AlternateDataSourceParameters = new [] { new DataSourceParametersProperty {\n                AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n                    Domain = \"domain\"\n                },\n                AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n                    Domain = \"domain\"\n                },\n                AthenaParameters = new AthenaParametersProperty {\n                    WorkGroup = \"workGroup\"\n                },\n                AuroraParameters = new AuroraParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                MariaDbParameters = new MariaDbParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                MySqlParameters = new MySqlParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                OracleParameters = new OracleParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                PostgreSqlParameters = new PostgreSqlParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                PrestoParameters = new PrestoParametersProperty {\n                    Catalog = \"catalog\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                RdsParameters = new RdsParametersProperty {\n                    Database = \"database\",\n                    InstanceId = \"instanceId\"\n                },\n                RedshiftParameters = new RedshiftParametersProperty {\n                    Database = \"database\",\n\n                    // the properties below are optional\n                    ClusterId = \"clusterId\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                S3Parameters = new S3ParametersProperty {\n                    ManifestFileLocation = new ManifestFileLocationProperty {\n                        Bucket = \"bucket\",\n                        Key = \"key\"\n                    }\n                },\n                SnowflakeParameters = new SnowflakeParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Warehouse = \"warehouse\"\n                },\n                SparkParameters = new SparkParametersProperty {\n                    Host = \"host\",\n                    Port = 123\n                },\n                SqlServerParameters = new SqlServerParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                },\n                TeradataParameters = new TeradataParametersProperty {\n                    Database = \"database\",\n                    Host = \"host\",\n                    Port = 123\n                }\n            } }\n        }\n    },\n    DataSourceId = \"dataSourceId\",\n    DataSourceParameters = new DataSourceParametersProperty {\n        AmazonElasticsearchParameters = new AmazonElasticsearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AmazonOpenSearchParameters = new AmazonOpenSearchParametersProperty {\n            Domain = \"domain\"\n        },\n        AthenaParameters = new AthenaParametersProperty {\n            WorkGroup = \"workGroup\"\n        },\n        AuroraParameters = new AuroraParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        AuroraPostgreSqlParameters = new AuroraPostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MariaDbParameters = new MariaDbParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        MySqlParameters = new MySqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        OracleParameters = new OracleParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PostgreSqlParameters = new PostgreSqlParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        PrestoParameters = new PrestoParametersProperty {\n            Catalog = \"catalog\",\n            Host = \"host\",\n            Port = 123\n        },\n        RdsParameters = new RdsParametersProperty {\n            Database = \"database\",\n            InstanceId = \"instanceId\"\n        },\n        RedshiftParameters = new RedshiftParametersProperty {\n            Database = \"database\",\n\n            // the properties below are optional\n            ClusterId = \"clusterId\",\n            Host = \"host\",\n            Port = 123\n        },\n        S3Parameters = new S3ParametersProperty {\n            ManifestFileLocation = new ManifestFileLocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\"\n            }\n        },\n        SnowflakeParameters = new SnowflakeParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Warehouse = \"warehouse\"\n        },\n        SparkParameters = new SparkParametersProperty {\n            Host = \"host\",\n            Port = 123\n        },\n        SqlServerParameters = new SqlServerParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        },\n        TeradataParameters = new TeradataParametersProperty {\n            Database = \"database\",\n            Host = \"host\",\n            Port = 123\n        }\n    },\n    ErrorInfo = new DataSourceErrorInfoProperty {\n        Message = \"message\",\n        Type = \"type\"\n    },\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    SslProperties = new SslPropertiesProperty {\n        DisableSsl = false\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Type = \"type\",\n    VpcConnectionProperties = new VpcConnectionPropertiesProperty {\n        VpcConnectionArn = \"vpcConnectionArn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnDataSourceProps cfnDataSourceProps = CfnDataSourceProps.builder()\n        .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()\n                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .athenaParameters(AthenaParametersProperty.builder()\n                        .workGroup(\"workGroup\")\n                        .build())\n                .auroraParameters(AuroraParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mariaDbParameters(MariaDbParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mySqlParameters(MySqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .oracleParameters(OracleParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .prestoParameters(PrestoParametersProperty.builder()\n                        .catalog(\"catalog\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .rdsParameters(RdsParametersProperty.builder()\n                        .database(\"database\")\n                        .instanceId(\"instanceId\")\n                        .build())\n                .redshiftParameters(RedshiftParametersProperty.builder()\n                        .database(\"database\")\n\n                        // the properties below are optional\n                        .clusterId(\"clusterId\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .s3Parameters(S3ParametersProperty.builder()\n                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n                                .build())\n                        .build())\n                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .warehouse(\"warehouse\")\n                        .build())\n                .sparkParameters(SparkParametersProperty.builder()\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .sqlServerParameters(SqlServerParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .teradataParameters(TeradataParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .build()))\n        .awsAccountId(\"awsAccountId\")\n        .credentials(DataSourceCredentialsProperty.builder()\n                .copySourceArn(\"copySourceArn\")\n                .credentialPair(CredentialPairProperty.builder()\n                        .password(\"password\")\n                        .username(\"username\")\n\n                        // the properties below are optional\n                        .alternateDataSourceParameters(List.of(DataSourceParametersProperty.builder()\n                                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                                        .domain(\"domain\")\n                                        .build())\n                                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                                        .domain(\"domain\")\n                                        .build())\n                                .athenaParameters(AthenaParametersProperty.builder()\n                                        .workGroup(\"workGroup\")\n                                        .build())\n                                .auroraParameters(AuroraParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .mariaDbParameters(MariaDbParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .mySqlParameters(MySqlParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .oracleParameters(OracleParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .prestoParameters(PrestoParametersProperty.builder()\n                                        .catalog(\"catalog\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .rdsParameters(RdsParametersProperty.builder()\n                                        .database(\"database\")\n                                        .instanceId(\"instanceId\")\n                                        .build())\n                                .redshiftParameters(RedshiftParametersProperty.builder()\n                                        .database(\"database\")\n\n                                        // the properties below are optional\n                                        .clusterId(\"clusterId\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .s3Parameters(S3ParametersProperty.builder()\n                                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                                .bucket(\"bucket\")\n                                                .key(\"key\")\n                                                .build())\n                                        .build())\n                                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .warehouse(\"warehouse\")\n                                        .build())\n                                .sparkParameters(SparkParametersProperty.builder()\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .sqlServerParameters(SqlServerParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .teradataParameters(TeradataParametersProperty.builder()\n                                        .database(\"database\")\n                                        .host(\"host\")\n                                        .port(123)\n                                        .build())\n                                .build()))\n                        .build())\n                .build())\n        .dataSourceId(\"dataSourceId\")\n        .dataSourceParameters(DataSourceParametersProperty.builder()\n                .amazonElasticsearchParameters(AmazonElasticsearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .amazonOpenSearchParameters(AmazonOpenSearchParametersProperty.builder()\n                        .domain(\"domain\")\n                        .build())\n                .athenaParameters(AthenaParametersProperty.builder()\n                        .workGroup(\"workGroup\")\n                        .build())\n                .auroraParameters(AuroraParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .auroraPostgreSqlParameters(AuroraPostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mariaDbParameters(MariaDbParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .mySqlParameters(MySqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .oracleParameters(OracleParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .postgreSqlParameters(PostgreSqlParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .prestoParameters(PrestoParametersProperty.builder()\n                        .catalog(\"catalog\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .rdsParameters(RdsParametersProperty.builder()\n                        .database(\"database\")\n                        .instanceId(\"instanceId\")\n                        .build())\n                .redshiftParameters(RedshiftParametersProperty.builder()\n                        .database(\"database\")\n\n                        // the properties below are optional\n                        .clusterId(\"clusterId\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .s3Parameters(S3ParametersProperty.builder()\n                        .manifestFileLocation(ManifestFileLocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n                                .build())\n                        .build())\n                .snowflakeParameters(SnowflakeParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .warehouse(\"warehouse\")\n                        .build())\n                .sparkParameters(SparkParametersProperty.builder()\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .sqlServerParameters(SqlServerParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .teradataParameters(TeradataParametersProperty.builder()\n                        .database(\"database\")\n                        .host(\"host\")\n                        .port(123)\n                        .build())\n                .build())\n        .errorInfo(DataSourceErrorInfoProperty.builder()\n                .message(\"message\")\n                .type(\"type\")\n                .build())\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .sslProperties(SslPropertiesProperty.builder()\n                .disableSsl(false)\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .type(\"type\")\n        .vpcConnectionProperties(VpcConnectionPropertiesProperty.builder()\n                .vpcConnectionArn(\"vpcConnectionArn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnDataSourceProps := &cfnDataSourceProps{\n\talternateDataSourceParameters: []interface{}{\n\t\t&dataSourceParametersProperty{\n\t\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t},\n\t\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t},\n\t\t\tathenaParameters: &athenaParametersProperty{\n\t\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t\t},\n\t\t\tauroraParameters: &auroraParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\toracleParameters: &oracleParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tprestoParameters: &prestoParametersProperty{\n\t\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\trdsParameters: &rdsParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t\t},\n\t\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\ts3Parameters: &s3ParametersProperty{\n\t\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t\t},\n\t\t\tsparkParameters: &sparkParametersProperty{\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t\tteradataParameters: &teradataParametersProperty{\n\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\tport: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tcredentials: &dataSourceCredentialsProperty{\n\t\tcopySourceArn: jsii.String(\"copySourceArn\"),\n\t\tcredentialPair: &credentialPairProperty{\n\t\t\tpassword: jsii.String(\"password\"),\n\t\t\tusername: jsii.String(\"username\"),\n\n\t\t\t// the properties below are optional\n\t\t\talternateDataSourceParameters: []interface{}{\n\t\t\t\t&dataSourceParametersProperty{\n\t\t\t\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t\t\t},\n\t\t\t\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\t\t\t\tdomain: jsii.String(\"domain\"),\n\t\t\t\t\t},\n\t\t\t\t\tathenaParameters: &athenaParametersProperty{\n\t\t\t\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t\t\t\t},\n\t\t\t\t\tauroraParameters: &auroraParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\toracleParameters: &oracleParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tprestoParameters: &prestoParametersProperty{\n\t\t\t\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\trdsParameters: &rdsParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t\t\t\t},\n\t\t\t\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\ts3Parameters: &s3ParametersProperty{\n\t\t\t\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t\t\t\t},\n\t\t\t\t\tsparkParameters: &sparkParametersProperty{\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t\tteradataParameters: &teradataParametersProperty{\n\t\t\t\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\t\t\t\thost: jsii.String(\"host\"),\n\t\t\t\t\t\tport: jsii.Number(123),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tdataSourceId: jsii.String(\"dataSourceId\"),\n\tdataSourceParameters: &dataSourceParametersProperty{\n\t\tamazonElasticsearchParameters: &amazonElasticsearchParametersProperty{\n\t\t\tdomain: jsii.String(\"domain\"),\n\t\t},\n\t\tamazonOpenSearchParameters: &amazonOpenSearchParametersProperty{\n\t\t\tdomain: jsii.String(\"domain\"),\n\t\t},\n\t\tathenaParameters: &athenaParametersProperty{\n\t\t\tworkGroup: jsii.String(\"workGroup\"),\n\t\t},\n\t\tauroraParameters: &auroraParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tauroraPostgreSqlParameters: &auroraPostgreSqlParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tmariaDbParameters: &mariaDbParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tmySqlParameters: &mySqlParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\toracleParameters: &oracleParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tpostgreSqlParameters: &postgreSqlParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tprestoParameters: &prestoParametersProperty{\n\t\t\tcatalog: jsii.String(\"catalog\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\trdsParameters: &rdsParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\tinstanceId: jsii.String(\"instanceId\"),\n\t\t},\n\t\tredshiftParameters: &redshiftParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\n\t\t\t// the properties below are optional\n\t\t\tclusterId: jsii.String(\"clusterId\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\ts3Parameters: &s3ParametersProperty{\n\t\t\tmanifestFileLocation: &manifestFileLocationProperty{\n\t\t\t\tbucket: jsii.String(\"bucket\"),\n\t\t\t\tkey: jsii.String(\"key\"),\n\t\t\t},\n\t\t},\n\t\tsnowflakeParameters: &snowflakeParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\twarehouse: jsii.String(\"warehouse\"),\n\t\t},\n\t\tsparkParameters: &sparkParametersProperty{\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tsqlServerParameters: &sqlServerParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t\tteradataParameters: &teradataParametersProperty{\n\t\t\tdatabase: jsii.String(\"database\"),\n\t\t\thost: jsii.String(\"host\"),\n\t\t\tport: jsii.Number(123),\n\t\t},\n\t},\n\terrorInfo: &dataSourceErrorInfoProperty{\n\t\tmessage: jsii.String(\"message\"),\n\t\ttype: jsii.String(\"type\"),\n\t},\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\tsslProperties: &sslPropertiesProperty{\n\t\tdisableSsl: jsii.Boolean(false),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttype: jsii.String(\"type\"),\n\tvpcConnectionProperties: &vpcConnectionPropertiesProperty{\n\t\tvpcConnectionArn: jsii.String(\"vpcConnectionArn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnDataSourceProps: quicksight.CfnDataSourceProps = {\n  alternateDataSourceParameters: [{\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  }],\n  awsAccountId: 'awsAccountId',\n  credentials: {\n    copySourceArn: 'copySourceArn',\n    credentialPair: {\n      password: 'password',\n      username: 'username',\n\n      // the properties below are optional\n      alternateDataSourceParameters: [{\n        amazonElasticsearchParameters: {\n          domain: 'domain',\n        },\n        amazonOpenSearchParameters: {\n          domain: 'domain',\n        },\n        athenaParameters: {\n          workGroup: 'workGroup',\n        },\n        auroraParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        auroraPostgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mariaDbParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mySqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        oracleParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        postgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        prestoParameters: {\n          catalog: 'catalog',\n          host: 'host',\n          port: 123,\n        },\n        rdsParameters: {\n          database: 'database',\n          instanceId: 'instanceId',\n        },\n        redshiftParameters: {\n          database: 'database',\n\n          // the properties below are optional\n          clusterId: 'clusterId',\n          host: 'host',\n          port: 123,\n        },\n        s3Parameters: {\n          manifestFileLocation: {\n            bucket: 'bucket',\n            key: 'key',\n          },\n        },\n        snowflakeParameters: {\n          database: 'database',\n          host: 'host',\n          warehouse: 'warehouse',\n        },\n        sparkParameters: {\n          host: 'host',\n          port: 123,\n        },\n        sqlServerParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        teradataParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n      }],\n    },\n  },\n  dataSourceId: 'dataSourceId',\n  dataSourceParameters: {\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  },\n  errorInfo: {\n    message: 'message',\n    type: 'type',\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  sslProperties: {\n    disableSsl: false,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n  vpcConnectionProperties: {\n    vpcConnectionArn: 'vpcConnectionArn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnDataSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnDataSourceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDataSourceProps: quicksight.CfnDataSourceProps = {\n  alternateDataSourceParameters: [{\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  }],\n  awsAccountId: 'awsAccountId',\n  credentials: {\n    copySourceArn: 'copySourceArn',\n    credentialPair: {\n      password: 'password',\n      username: 'username',\n\n      // the properties below are optional\n      alternateDataSourceParameters: [{\n        amazonElasticsearchParameters: {\n          domain: 'domain',\n        },\n        amazonOpenSearchParameters: {\n          domain: 'domain',\n        },\n        athenaParameters: {\n          workGroup: 'workGroup',\n        },\n        auroraParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        auroraPostgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mariaDbParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        mySqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        oracleParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        postgreSqlParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        prestoParameters: {\n          catalog: 'catalog',\n          host: 'host',\n          port: 123,\n        },\n        rdsParameters: {\n          database: 'database',\n          instanceId: 'instanceId',\n        },\n        redshiftParameters: {\n          database: 'database',\n\n          // the properties below are optional\n          clusterId: 'clusterId',\n          host: 'host',\n          port: 123,\n        },\n        s3Parameters: {\n          manifestFileLocation: {\n            bucket: 'bucket',\n            key: 'key',\n          },\n        },\n        snowflakeParameters: {\n          database: 'database',\n          host: 'host',\n          warehouse: 'warehouse',\n        },\n        sparkParameters: {\n          host: 'host',\n          port: 123,\n        },\n        sqlServerParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n        teradataParameters: {\n          database: 'database',\n          host: 'host',\n          port: 123,\n        },\n      }],\n    },\n  },\n  dataSourceId: 'dataSourceId',\n  dataSourceParameters: {\n    amazonElasticsearchParameters: {\n      domain: 'domain',\n    },\n    amazonOpenSearchParameters: {\n      domain: 'domain',\n    },\n    athenaParameters: {\n      workGroup: 'workGroup',\n    },\n    auroraParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    auroraPostgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mariaDbParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    mySqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    oracleParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    postgreSqlParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    prestoParameters: {\n      catalog: 'catalog',\n      host: 'host',\n      port: 123,\n    },\n    rdsParameters: {\n      database: 'database',\n      instanceId: 'instanceId',\n    },\n    redshiftParameters: {\n      database: 'database',\n\n      // the properties below are optional\n      clusterId: 'clusterId',\n      host: 'host',\n      port: 123,\n    },\n    s3Parameters: {\n      manifestFileLocation: {\n        bucket: 'bucket',\n        key: 'key',\n      },\n    },\n    snowflakeParameters: {\n      database: 'database',\n      host: 'host',\n      warehouse: 'warehouse',\n    },\n    sparkParameters: {\n      host: 'host',\n      port: 123,\n    },\n    sqlServerParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n    teradataParameters: {\n      database: 'database',\n      host: 'host',\n      port: 123,\n    },\n  },\n  errorInfo: {\n    message: 'message',\n    type: 'type',\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  sslProperties: {\n    disableSsl: false,\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n  vpcConnectionProperties: {\n    vpcConnectionArn: 'vpcConnectionArn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 33,
        "10": 111,
        "75": 212,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 65,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 208,
        "290": 1
      },
      "fqnsFingerprint": "a0488cc1e10ac1a6568d45a93f248311a8fecf5456859d7e7b1af4f4176b7b35"
    },
    "ced4da7fe7e8425b7d73a6cc83194d02ea5e27a71270c7ee28cca29836c4d4cb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_template = quicksight.CfnTemplate(self, \"MyCfnTemplate\",\n    aws_account_id=\"awsAccountId\",\n    source_entity=quicksight.CfnTemplate.TemplateSourceEntityProperty(\n        source_analysis=quicksight.CfnTemplate.TemplateSourceAnalysisProperty(\n            arn=\"arn\",\n            data_set_references=[quicksight.CfnTemplate.DataSetReferenceProperty(\n                data_set_arn=\"dataSetArn\",\n                data_set_placeholder=\"dataSetPlaceholder\"\n            )]\n        ),\n        source_template=quicksight.CfnTemplate.TemplateSourceTemplateProperty(\n            arn=\"arn\"\n        )\n    ),\n    template_id=\"templateId\",\n\n    # the properties below are optional\n    name=\"name\",\n    permissions=[quicksight.CfnTemplate.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    version_description=\"versionDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnTemplate cfnTemplate = new CfnTemplate(this, \"MyCfnTemplate\", new CfnTemplateProps {\n    AwsAccountId = \"awsAccountId\",\n    SourceEntity = new TemplateSourceEntityProperty {\n        SourceAnalysis = new TemplateSourceAnalysisProperty {\n            Arn = \"arn\",\n            DataSetReferences = new [] { new DataSetReferenceProperty {\n                DataSetArn = \"dataSetArn\",\n                DataSetPlaceholder = \"dataSetPlaceholder\"\n            } }\n        },\n        SourceTemplate = new TemplateSourceTemplateProperty {\n            Arn = \"arn\"\n        }\n    },\n    TemplateId = \"templateId\",\n\n    // the properties below are optional\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VersionDescription = \"versionDescription\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnTemplate cfnTemplate = CfnTemplate.Builder.create(this, \"MyCfnTemplate\")\n        .awsAccountId(\"awsAccountId\")\n        .sourceEntity(TemplateSourceEntityProperty.builder()\n                .sourceAnalysis(TemplateSourceAnalysisProperty.builder()\n                        .arn(\"arn\")\n                        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                                .build()))\n                        .build())\n                .sourceTemplate(TemplateSourceTemplateProperty.builder()\n                        .arn(\"arn\")\n                        .build())\n                .build())\n        .templateId(\"templateId\")\n\n        // the properties below are optional\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .versionDescription(\"versionDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnTemplate := quicksight.NewCfnTemplate(this, jsii.String(\"MyCfnTemplate\"), &cfnTemplateProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tsourceEntity: &templateSourceEntityProperty{\n\t\tsourceAnalysis: &templateSourceAnalysisProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tdataSetReferences: []interface{}{\n\t\t\t\t&dataSetReferenceProperty{\n\t\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tsourceTemplate: &templateSourceTemplateProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t},\n\t},\n\ttemplateId: jsii.String(\"templateId\"),\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tversionDescription: jsii.String(\"versionDescription\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnTemplate = new quicksight.CfnTemplate(this, 'MyCfnTemplate', {\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceAnalysis: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n    sourceTemplate: {\n      arn: 'arn',\n    },\n  },\n  templateId: 'templateId',\n\n  // the properties below are optional\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplate",
        "@aws-cdk/aws-quicksight.CfnTemplateProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTemplate = new quicksight.CfnTemplate(this, 'MyCfnTemplate', {\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceAnalysis: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n    sourceTemplate: {\n      arn: 'arn',\n    },\n  },\n  templateId: 'templateId',\n\n  // the properties below are optional\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 22,
        "104": 1,
        "192": 4,
        "193": 7,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "61db7d804d7f3df8f1cc5485bc41466fdfebcaa92db754fe50e17c9beb5d9b18"
    },
    "d1832e74789b2b6c453e3c012e9004c6a882ea063f590d14150b2f73e7934423": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_set_reference_property = quicksight.CfnTemplate.DataSetReferenceProperty(\n    data_set_arn=\"dataSetArn\",\n    data_set_placeholder=\"dataSetPlaceholder\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataSetReferenceProperty dataSetReferenceProperty = new DataSetReferenceProperty {\n    DataSetArn = \"dataSetArn\",\n    DataSetPlaceholder = \"dataSetPlaceholder\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataSetReferenceProperty dataSetReferenceProperty = DataSetReferenceProperty.builder()\n        .dataSetArn(\"dataSetArn\")\n        .dataSetPlaceholder(\"dataSetPlaceholder\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataSetReferenceProperty := &dataSetReferenceProperty{\n\tdataSetArn: jsii.String(\"dataSetArn\"),\n\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataSetReferenceProperty: quicksight.CfnTemplate.DataSetReferenceProperty = {\n  dataSetArn: 'dataSetArn',\n  dataSetPlaceholder: 'dataSetPlaceholder',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplate.DataSetReferenceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplate.DataSetReferenceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataSetReferenceProperty: quicksight.CfnTemplate.DataSetReferenceProperty = {\n  dataSetArn: 'dataSetArn',\n  dataSetPlaceholder: 'dataSetPlaceholder',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6f7fbeb64faeeac1abfbff2cdb91877d6dab02c085bab5eb2e4c96f54f593c7b"
    },
    "5da997eb06e04d596da80faf2fd65992d20643bd4efa121c39f8354a9115f390": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nresource_permission_property = quicksight.CfnTemplate.ResourcePermissionProperty(\n    actions=[\"actions\"],\n    principal=\"principal\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nResourcePermissionProperty resourcePermissionProperty = new ResourcePermissionProperty {\n    Actions = new [] { \"actions\" },\n    Principal = \"principal\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()\n        .actions(List.of(\"actions\"))\n        .principal(\"principal\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nresourcePermissionProperty := &resourcePermissionProperty{\n\tactions: []*string{\n\t\tjsii.String(\"actions\"),\n\t},\n\tprincipal: jsii.String(\"principal\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst resourcePermissionProperty: quicksight.CfnTemplate.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplate.ResourcePermissionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplate.ResourcePermissionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePermissionProperty: quicksight.CfnTemplate.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f6d27883bb831eaaa54022b1978c462166da5940012264ff9c363ad19f65087d"
    },
    "66c027e9bcbcaa9d6ee31d511026dd41eafd7c10d8b9a9eba5dcae1b836768a1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntemplate_source_analysis_property = quicksight.CfnTemplate.TemplateSourceAnalysisProperty(\n    arn=\"arn\",\n    data_set_references=[quicksight.CfnTemplate.DataSetReferenceProperty(\n        data_set_arn=\"dataSetArn\",\n        data_set_placeholder=\"dataSetPlaceholder\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTemplateSourceAnalysisProperty templateSourceAnalysisProperty = new TemplateSourceAnalysisProperty {\n    Arn = \"arn\",\n    DataSetReferences = new [] { new DataSetReferenceProperty {\n        DataSetArn = \"dataSetArn\",\n        DataSetPlaceholder = \"dataSetPlaceholder\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTemplateSourceAnalysisProperty templateSourceAnalysisProperty = TemplateSourceAnalysisProperty.builder()\n        .arn(\"arn\")\n        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                .dataSetArn(\"dataSetArn\")\n                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntemplateSourceAnalysisProperty := &templateSourceAnalysisProperty{\n\tarn: jsii.String(\"arn\"),\n\tdataSetReferences: []interface{}{\n\t\t&dataSetReferenceProperty{\n\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst templateSourceAnalysisProperty: quicksight.CfnTemplate.TemplateSourceAnalysisProperty = {\n  arn: 'arn',\n  dataSetReferences: [{\n    dataSetArn: 'dataSetArn',\n    dataSetPlaceholder: 'dataSetPlaceholder',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplate.TemplateSourceAnalysisProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplate.TemplateSourceAnalysisProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst templateSourceAnalysisProperty: quicksight.CfnTemplate.TemplateSourceAnalysisProperty = {\n  arn: 'arn',\n  dataSetReferences: [{\n    dataSetArn: 'dataSetArn',\n    dataSetPlaceholder: 'dataSetPlaceholder',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "525610e5320e92fe86e96c0c3fad537f4cee32575a6a327eb860ab38752b62de"
    },
    "12a7edcfd64b0acced68477942c68ef8269b2a68fbcecf8104fd18f090d2519f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntemplate_source_entity_property = quicksight.CfnTemplate.TemplateSourceEntityProperty(\n    source_analysis=quicksight.CfnTemplate.TemplateSourceAnalysisProperty(\n        arn=\"arn\",\n        data_set_references=[quicksight.CfnTemplate.DataSetReferenceProperty(\n            data_set_arn=\"dataSetArn\",\n            data_set_placeholder=\"dataSetPlaceholder\"\n        )]\n    ),\n    source_template=quicksight.CfnTemplate.TemplateSourceTemplateProperty(\n        arn=\"arn\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTemplateSourceEntityProperty templateSourceEntityProperty = new TemplateSourceEntityProperty {\n    SourceAnalysis = new TemplateSourceAnalysisProperty {\n        Arn = \"arn\",\n        DataSetReferences = new [] { new DataSetReferenceProperty {\n            DataSetArn = \"dataSetArn\",\n            DataSetPlaceholder = \"dataSetPlaceholder\"\n        } }\n    },\n    SourceTemplate = new TemplateSourceTemplateProperty {\n        Arn = \"arn\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTemplateSourceEntityProperty templateSourceEntityProperty = TemplateSourceEntityProperty.builder()\n        .sourceAnalysis(TemplateSourceAnalysisProperty.builder()\n                .arn(\"arn\")\n                .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                        .dataSetArn(\"dataSetArn\")\n                        .dataSetPlaceholder(\"dataSetPlaceholder\")\n                        .build()))\n                .build())\n        .sourceTemplate(TemplateSourceTemplateProperty.builder()\n                .arn(\"arn\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntemplateSourceEntityProperty := &templateSourceEntityProperty{\n\tsourceAnalysis: &templateSourceAnalysisProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t\tdataSetReferences: []interface{}{\n\t\t\t&dataSetReferenceProperty{\n\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t},\n\t\t},\n\t},\n\tsourceTemplate: &templateSourceTemplateProperty{\n\t\tarn: jsii.String(\"arn\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst templateSourceEntityProperty: quicksight.CfnTemplate.TemplateSourceEntityProperty = {\n  sourceAnalysis: {\n    arn: 'arn',\n    dataSetReferences: [{\n      dataSetArn: 'dataSetArn',\n      dataSetPlaceholder: 'dataSetPlaceholder',\n    }],\n  },\n  sourceTemplate: {\n    arn: 'arn',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplate.TemplateSourceEntityProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplate.TemplateSourceEntityProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst templateSourceEntityProperty: quicksight.CfnTemplate.TemplateSourceEntityProperty = {\n  sourceAnalysis: {\n    arn: 'arn',\n    dataSetReferences: [{\n      dataSetArn: 'dataSetArn',\n      dataSetPlaceholder: 'dataSetPlaceholder',\n    }],\n  },\n  sourceTemplate: {\n    arn: 'arn',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "7e5aa78dbbcca7a5f4462cdc14c3905f4eaaf1d2f650b3909b3e10f7de3de8ca"
    },
    "627816fe02c2672685c61d3d17783f7a833e97d50f987b96189a96235ffc8374": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntemplate_source_template_property = quicksight.CfnTemplate.TemplateSourceTemplateProperty(\n    arn=\"arn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTemplateSourceTemplateProperty templateSourceTemplateProperty = new TemplateSourceTemplateProperty {\n    Arn = \"arn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTemplateSourceTemplateProperty templateSourceTemplateProperty = TemplateSourceTemplateProperty.builder()\n        .arn(\"arn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntemplateSourceTemplateProperty := &templateSourceTemplateProperty{\n\tarn: jsii.String(\"arn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst templateSourceTemplateProperty: quicksight.CfnTemplate.TemplateSourceTemplateProperty = {\n  arn: 'arn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplate.TemplateSourceTemplateProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplate.TemplateSourceTemplateProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst templateSourceTemplateProperty: quicksight.CfnTemplate.TemplateSourceTemplateProperty = {\n  arn: 'arn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "16f972e59355786a2a7720a434de8836a3dea0116b4c7d8f34a9196c9688e6fc"
    },
    "7ae7eccf4d1614cf04b351b80bd0d6d0361aaa96850d9f7da6f75790d0f0ea82": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_template_props = quicksight.CfnTemplateProps(\n    aws_account_id=\"awsAccountId\",\n    source_entity=quicksight.CfnTemplate.TemplateSourceEntityProperty(\n        source_analysis=quicksight.CfnTemplate.TemplateSourceAnalysisProperty(\n            arn=\"arn\",\n            data_set_references=[quicksight.CfnTemplate.DataSetReferenceProperty(\n                data_set_arn=\"dataSetArn\",\n                data_set_placeholder=\"dataSetPlaceholder\"\n            )]\n        ),\n        source_template=quicksight.CfnTemplate.TemplateSourceTemplateProperty(\n            arn=\"arn\"\n        )\n    ),\n    template_id=\"templateId\",\n\n    # the properties below are optional\n    name=\"name\",\n    permissions=[quicksight.CfnTemplate.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    version_description=\"versionDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnTemplateProps cfnTemplateProps = new CfnTemplateProps {\n    AwsAccountId = \"awsAccountId\",\n    SourceEntity = new TemplateSourceEntityProperty {\n        SourceAnalysis = new TemplateSourceAnalysisProperty {\n            Arn = \"arn\",\n            DataSetReferences = new [] { new DataSetReferenceProperty {\n                DataSetArn = \"dataSetArn\",\n                DataSetPlaceholder = \"dataSetPlaceholder\"\n            } }\n        },\n        SourceTemplate = new TemplateSourceTemplateProperty {\n            Arn = \"arn\"\n        }\n    },\n    TemplateId = \"templateId\",\n\n    // the properties below are optional\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VersionDescription = \"versionDescription\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnTemplateProps cfnTemplateProps = CfnTemplateProps.builder()\n        .awsAccountId(\"awsAccountId\")\n        .sourceEntity(TemplateSourceEntityProperty.builder()\n                .sourceAnalysis(TemplateSourceAnalysisProperty.builder()\n                        .arn(\"arn\")\n                        .dataSetReferences(List.of(DataSetReferenceProperty.builder()\n                                .dataSetArn(\"dataSetArn\")\n                                .dataSetPlaceholder(\"dataSetPlaceholder\")\n                                .build()))\n                        .build())\n                .sourceTemplate(TemplateSourceTemplateProperty.builder()\n                        .arn(\"arn\")\n                        .build())\n                .build())\n        .templateId(\"templateId\")\n\n        // the properties below are optional\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .versionDescription(\"versionDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnTemplateProps := &cfnTemplateProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tsourceEntity: &templateSourceEntityProperty{\n\t\tsourceAnalysis: &templateSourceAnalysisProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t\tdataSetReferences: []interface{}{\n\t\t\t\t&dataSetReferenceProperty{\n\t\t\t\t\tdataSetArn: jsii.String(\"dataSetArn\"),\n\t\t\t\t\tdataSetPlaceholder: jsii.String(\"dataSetPlaceholder\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tsourceTemplate: &templateSourceTemplateProperty{\n\t\t\tarn: jsii.String(\"arn\"),\n\t\t},\n\t},\n\ttemplateId: jsii.String(\"templateId\"),\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tversionDescription: jsii.String(\"versionDescription\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnTemplateProps: quicksight.CfnTemplateProps = {\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceAnalysis: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n    sourceTemplate: {\n      arn: 'arn',\n    },\n  },\n  templateId: 'templateId',\n\n  // the properties below are optional\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTemplateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTemplateProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTemplateProps: quicksight.CfnTemplateProps = {\n  awsAccountId: 'awsAccountId',\n  sourceEntity: {\n    sourceAnalysis: {\n      arn: 'arn',\n      dataSetReferences: [{\n        dataSetArn: 'dataSetArn',\n        dataSetPlaceholder: 'dataSetPlaceholder',\n      }],\n    },\n    sourceTemplate: {\n      arn: 'arn',\n    },\n  },\n  templateId: 'templateId',\n\n  // the properties below are optional\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 13,
        "75": 22,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "203977b1092bbadee08122b4a23fcddbc36c4eb6aa1763e11d7d73706d715ba8"
    },
    "d8a06558d17ba7d91ee09b08584ae3af59601e6e6ab1d696e92ab519ebf47422": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_theme = quicksight.CfnTheme(self, \"MyCfnTheme\",\n    aws_account_id=\"awsAccountId\",\n    theme_id=\"themeId\",\n\n    # the properties below are optional\n    base_theme_id=\"baseThemeId\",\n    configuration=quicksight.CfnTheme.ThemeConfigurationProperty(\n        data_color_palette=quicksight.CfnTheme.DataColorPaletteProperty(\n            colors=[\"colors\"],\n            empty_fill_color=\"emptyFillColor\",\n            min_max_gradient=[\"minMaxGradient\"]\n        ),\n        sheet=quicksight.CfnTheme.SheetStyleProperty(\n            tile=quicksight.CfnTheme.TileStyleProperty(\n                border=quicksight.CfnTheme.BorderStyleProperty(\n                    show=False\n                )\n            ),\n            tile_layout=quicksight.CfnTheme.TileLayoutStyleProperty(\n                gutter=quicksight.CfnTheme.GutterStyleProperty(\n                    show=False\n                ),\n                margin=quicksight.CfnTheme.MarginStyleProperty(\n                    show=False\n                )\n            )\n        ),\n        typography=quicksight.CfnTheme.TypographyProperty(\n            font_families=[quicksight.CfnTheme.FontProperty(\n                font_family=\"fontFamily\"\n            )]\n        ),\n        ui_color_palette=quicksight.CfnTheme.UIColorPaletteProperty(\n            accent=\"accent\",\n            accent_foreground=\"accentForeground\",\n            danger=\"danger\",\n            danger_foreground=\"dangerForeground\",\n            dimension=\"dimension\",\n            dimension_foreground=\"dimensionForeground\",\n            measure=\"measure\",\n            measure_foreground=\"measureForeground\",\n            primary_background=\"primaryBackground\",\n            primary_foreground=\"primaryForeground\",\n            secondary_background=\"secondaryBackground\",\n            secondary_foreground=\"secondaryForeground\",\n            success=\"success\",\n            success_foreground=\"successForeground\",\n            warning=\"warning\",\n            warning_foreground=\"warningForeground\"\n        )\n    ),\n    name=\"name\",\n    permissions=[quicksight.CfnTheme.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    version_description=\"versionDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnTheme cfnTheme = new CfnTheme(this, \"MyCfnTheme\", new CfnThemeProps {\n    AwsAccountId = \"awsAccountId\",\n    ThemeId = \"themeId\",\n\n    // the properties below are optional\n    BaseThemeId = \"baseThemeId\",\n    Configuration = new ThemeConfigurationProperty {\n        DataColorPalette = new DataColorPaletteProperty {\n            Colors = new [] { \"colors\" },\n            EmptyFillColor = \"emptyFillColor\",\n            MinMaxGradient = new [] { \"minMaxGradient\" }\n        },\n        Sheet = new SheetStyleProperty {\n            Tile = new TileStyleProperty {\n                Border = new BorderStyleProperty {\n                    Show = false\n                }\n            },\n            TileLayout = new TileLayoutStyleProperty {\n                Gutter = new GutterStyleProperty {\n                    Show = false\n                },\n                Margin = new MarginStyleProperty {\n                    Show = false\n                }\n            }\n        },\n        Typography = new TypographyProperty {\n            FontFamilies = new [] { new FontProperty {\n                FontFamily = \"fontFamily\"\n            } }\n        },\n        UiColorPalette = new UIColorPaletteProperty {\n            Accent = \"accent\",\n            AccentForeground = \"accentForeground\",\n            Danger = \"danger\",\n            DangerForeground = \"dangerForeground\",\n            Dimension = \"dimension\",\n            DimensionForeground = \"dimensionForeground\",\n            Measure = \"measure\",\n            MeasureForeground = \"measureForeground\",\n            PrimaryBackground = \"primaryBackground\",\n            PrimaryForeground = \"primaryForeground\",\n            SecondaryBackground = \"secondaryBackground\",\n            SecondaryForeground = \"secondaryForeground\",\n            Success = \"success\",\n            SuccessForeground = \"successForeground\",\n            Warning = \"warning\",\n            WarningForeground = \"warningForeground\"\n        }\n    },\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VersionDescription = \"versionDescription\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnTheme cfnTheme = CfnTheme.Builder.create(this, \"MyCfnTheme\")\n        .awsAccountId(\"awsAccountId\")\n        .themeId(\"themeId\")\n\n        // the properties below are optional\n        .baseThemeId(\"baseThemeId\")\n        .configuration(ThemeConfigurationProperty.builder()\n                .dataColorPalette(DataColorPaletteProperty.builder()\n                        .colors(List.of(\"colors\"))\n                        .emptyFillColor(\"emptyFillColor\")\n                        .minMaxGradient(List.of(\"minMaxGradient\"))\n                        .build())\n                .sheet(SheetStyleProperty.builder()\n                        .tile(TileStyleProperty.builder()\n                                .border(BorderStyleProperty.builder()\n                                        .show(false)\n                                        .build())\n                                .build())\n                        .tileLayout(TileLayoutStyleProperty.builder()\n                                .gutter(GutterStyleProperty.builder()\n                                        .show(false)\n                                        .build())\n                                .margin(MarginStyleProperty.builder()\n                                        .show(false)\n                                        .build())\n                                .build())\n                        .build())\n                .typography(TypographyProperty.builder()\n                        .fontFamilies(List.of(FontProperty.builder()\n                                .fontFamily(\"fontFamily\")\n                                .build()))\n                        .build())\n                .uiColorPalette(UIColorPaletteProperty.builder()\n                        .accent(\"accent\")\n                        .accentForeground(\"accentForeground\")\n                        .danger(\"danger\")\n                        .dangerForeground(\"dangerForeground\")\n                        .dimension(\"dimension\")\n                        .dimensionForeground(\"dimensionForeground\")\n                        .measure(\"measure\")\n                        .measureForeground(\"measureForeground\")\n                        .primaryBackground(\"primaryBackground\")\n                        .primaryForeground(\"primaryForeground\")\n                        .secondaryBackground(\"secondaryBackground\")\n                        .secondaryForeground(\"secondaryForeground\")\n                        .success(\"success\")\n                        .successForeground(\"successForeground\")\n                        .warning(\"warning\")\n                        .warningForeground(\"warningForeground\")\n                        .build())\n                .build())\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .versionDescription(\"versionDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnTheme := quicksight.NewCfnTheme(this, jsii.String(\"MyCfnTheme\"), &cfnThemeProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tthemeId: jsii.String(\"themeId\"),\n\n\t// the properties below are optional\n\tbaseThemeId: jsii.String(\"baseThemeId\"),\n\tconfiguration: &themeConfigurationProperty{\n\t\tdataColorPalette: &dataColorPaletteProperty{\n\t\t\tcolors: []*string{\n\t\t\t\tjsii.String(\"colors\"),\n\t\t\t},\n\t\t\temptyFillColor: jsii.String(\"emptyFillColor\"),\n\t\t\tminMaxGradient: []*string{\n\t\t\t\tjsii.String(\"minMaxGradient\"),\n\t\t\t},\n\t\t},\n\t\tsheet: &sheetStyleProperty{\n\t\t\ttile: &tileStyleProperty{\n\t\t\t\tborder: &borderStyleProperty{\n\t\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\ttileLayout: &tileLayoutStyleProperty{\n\t\t\t\tgutter: &gutterStyleProperty{\n\t\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t\tmargin: &marginStyleProperty{\n\t\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttypography: &typographyProperty{\n\t\t\tfontFamilies: []interface{}{\n\t\t\t\t&fontProperty{\n\t\t\t\t\tfontFamily: jsii.String(\"fontFamily\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tuiColorPalette: &uIColorPaletteProperty{\n\t\t\taccent: jsii.String(\"accent\"),\n\t\t\taccentForeground: jsii.String(\"accentForeground\"),\n\t\t\tdanger: jsii.String(\"danger\"),\n\t\t\tdangerForeground: jsii.String(\"dangerForeground\"),\n\t\t\tdimension: jsii.String(\"dimension\"),\n\t\t\tdimensionForeground: jsii.String(\"dimensionForeground\"),\n\t\t\tmeasure: jsii.String(\"measure\"),\n\t\t\tmeasureForeground: jsii.String(\"measureForeground\"),\n\t\t\tprimaryBackground: jsii.String(\"primaryBackground\"),\n\t\t\tprimaryForeground: jsii.String(\"primaryForeground\"),\n\t\t\tsecondaryBackground: jsii.String(\"secondaryBackground\"),\n\t\t\tsecondaryForeground: jsii.String(\"secondaryForeground\"),\n\t\t\tsuccess: jsii.String(\"success\"),\n\t\t\tsuccessForeground: jsii.String(\"successForeground\"),\n\t\t\twarning: jsii.String(\"warning\"),\n\t\t\twarningForeground: jsii.String(\"warningForeground\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tversionDescription: jsii.String(\"versionDescription\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnTheme = new quicksight.CfnTheme(this, 'MyCfnTheme', {\n  awsAccountId: 'awsAccountId',\n  themeId: 'themeId',\n\n  // the properties below are optional\n  baseThemeId: 'baseThemeId',\n  configuration: {\n    dataColorPalette: {\n      colors: ['colors'],\n      emptyFillColor: 'emptyFillColor',\n      minMaxGradient: ['minMaxGradient'],\n    },\n    sheet: {\n      tile: {\n        border: {\n          show: false,\n        },\n      },\n      tileLayout: {\n        gutter: {\n          show: false,\n        },\n        margin: {\n          show: false,\n        },\n      },\n    },\n    typography: {\n      fontFamilies: [{\n        fontFamily: 'fontFamily',\n      }],\n    },\n    uiColorPalette: {\n      accent: 'accent',\n      accentForeground: 'accentForeground',\n      danger: 'danger',\n      dangerForeground: 'dangerForeground',\n      dimension: 'dimension',\n      dimensionForeground: 'dimensionForeground',\n      measure: 'measure',\n      measureForeground: 'measureForeground',\n      primaryBackground: 'primaryBackground',\n      primaryForeground: 'primaryForeground',\n      secondaryBackground: 'secondaryBackground',\n      secondaryForeground: 'secondaryForeground',\n      success: 'success',\n      successForeground: 'successForeground',\n      warning: 'warning',\n      warningForeground: 'warningForeground',\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme",
        "@aws-cdk/aws-quicksight.CfnThemeProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTheme = new quicksight.CfnTheme(this, 'MyCfnTheme', {\n  awsAccountId: 'awsAccountId',\n  themeId: 'themeId',\n\n  // the properties below are optional\n  baseThemeId: 'baseThemeId',\n  configuration: {\n    dataColorPalette: {\n      colors: ['colors'],\n      emptyFillColor: 'emptyFillColor',\n      minMaxGradient: ['minMaxGradient'],\n    },\n    sheet: {\n      tile: {\n        border: {\n          show: false,\n        },\n      },\n      tileLayout: {\n        gutter: {\n          show: false,\n        },\n        margin: {\n          show: false,\n        },\n      },\n    },\n    typography: {\n      fontFamilies: [{\n        fontFamily: 'fontFamily',\n      }],\n    },\n    uiColorPalette: {\n      accent: 'accent',\n      accentForeground: 'accentForeground',\n      danger: 'danger',\n      dangerForeground: 'dangerForeground',\n      dimension: 'dimension',\n      dimensionForeground: 'dimensionForeground',\n      measure: 'measure',\n      measureForeground: 'measureForeground',\n      primaryBackground: 'primaryBackground',\n      primaryForeground: 'primaryForeground',\n      secondaryBackground: 'secondaryBackground',\n      secondaryForeground: 'secondaryForeground',\n      success: 'success',\n      successForeground: 'successForeground',\n      warning: 'warning',\n      warningForeground: 'warningForeground',\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 31,
        "75": 49,
        "91": 3,
        "104": 1,
        "192": 6,
        "193": 14,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "61c8f322cdcded342c228d1a10b23f8b3ba0e0c9a62888991c86bf4b63a647ea"
    },
    "ba5ae3cd75e074d2c4aed85b6acd9fe1a24fad9113ffc769e3f8494915ce2d5a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nborder_style_property = quicksight.CfnTheme.BorderStyleProperty(\n    show=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nBorderStyleProperty borderStyleProperty = new BorderStyleProperty {\n    Show = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nBorderStyleProperty borderStyleProperty = BorderStyleProperty.builder()\n        .show(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nborderStyleProperty := &borderStyleProperty{\n\tshow: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst borderStyleProperty: quicksight.CfnTheme.BorderStyleProperty = {\n  show: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.BorderStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.BorderStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst borderStyleProperty: quicksight.CfnTheme.BorderStyleProperty = {\n  show: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "dcb0d5bb3fc44ee9432cfb68e0794271c9c392c9bb6610147922466c90b2e5f4"
    },
    "48706b6287c26f602bc858949fc07820a69f4b322c3bf8d2469a2557518b3e77": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ndata_color_palette_property = quicksight.CfnTheme.DataColorPaletteProperty(\n    colors=[\"colors\"],\n    empty_fill_color=\"emptyFillColor\",\n    min_max_gradient=[\"minMaxGradient\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nDataColorPaletteProperty dataColorPaletteProperty = new DataColorPaletteProperty {\n    Colors = new [] { \"colors\" },\n    EmptyFillColor = \"emptyFillColor\",\n    MinMaxGradient = new [] { \"minMaxGradient\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nDataColorPaletteProperty dataColorPaletteProperty = DataColorPaletteProperty.builder()\n        .colors(List.of(\"colors\"))\n        .emptyFillColor(\"emptyFillColor\")\n        .minMaxGradient(List.of(\"minMaxGradient\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ndataColorPaletteProperty := &dataColorPaletteProperty{\n\tcolors: []*string{\n\t\tjsii.String(\"colors\"),\n\t},\n\temptyFillColor: jsii.String(\"emptyFillColor\"),\n\tminMaxGradient: []*string{\n\t\tjsii.String(\"minMaxGradient\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst dataColorPaletteProperty: quicksight.CfnTheme.DataColorPaletteProperty = {\n  colors: ['colors'],\n  emptyFillColor: 'emptyFillColor',\n  minMaxGradient: ['minMaxGradient'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.DataColorPaletteProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.DataColorPaletteProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dataColorPaletteProperty: quicksight.CfnTheme.DataColorPaletteProperty = {\n  colors: ['colors'],\n  emptyFillColor: 'emptyFillColor',\n  minMaxGradient: ['minMaxGradient'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "583e537b2438b859a70acf19b192df180350e44b31b82fcc493e2a561dd3c69a"
    },
    "6e5c12fc5b1e29f9fed1564f4d01d4d360a776f1cb4ff82557eda15c4241d0ac": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nfont_property = quicksight.CfnTheme.FontProperty(\n    font_family=\"fontFamily\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nFontProperty fontProperty = new FontProperty {\n    FontFamily = \"fontFamily\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nFontProperty fontProperty = FontProperty.builder()\n        .fontFamily(\"fontFamily\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nfontProperty := &fontProperty{\n\tfontFamily: jsii.String(\"fontFamily\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst fontProperty: quicksight.CfnTheme.FontProperty = {\n  fontFamily: 'fontFamily',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.FontProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.FontProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fontProperty: quicksight.CfnTheme.FontProperty = {\n  fontFamily: 'fontFamily',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "63e7a8f8dc4722803877a59947231eaa918ef6eef322d9a82da5bc4bda611363"
    },
    "a0c9bc5740b9486683291eb7d4d9d0a8f26ebbd2d305b17e7f7bf501cc0e2920": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ngutter_style_property = quicksight.CfnTheme.GutterStyleProperty(\n    show=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nGutterStyleProperty gutterStyleProperty = new GutterStyleProperty {\n    Show = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nGutterStyleProperty gutterStyleProperty = GutterStyleProperty.builder()\n        .show(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ngutterStyleProperty := &gutterStyleProperty{\n\tshow: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst gutterStyleProperty: quicksight.CfnTheme.GutterStyleProperty = {\n  show: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.GutterStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.GutterStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gutterStyleProperty: quicksight.CfnTheme.GutterStyleProperty = {\n  show: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f5be91fd1719c8a210bf88d9976b5a22a4538416b6de1516af0b04ddc60d9778"
    },
    "12789be5164843ea6193b8ae849914dc602901e2adb4098c5af5199dacccc3bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nmargin_style_property = quicksight.CfnTheme.MarginStyleProperty(\n    show=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nMarginStyleProperty marginStyleProperty = new MarginStyleProperty {\n    Show = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nMarginStyleProperty marginStyleProperty = MarginStyleProperty.builder()\n        .show(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nmarginStyleProperty := &marginStyleProperty{\n\tshow: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst marginStyleProperty: quicksight.CfnTheme.MarginStyleProperty = {\n  show: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.MarginStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.MarginStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst marginStyleProperty: quicksight.CfnTheme.MarginStyleProperty = {\n  show: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "48692393210816595c18762d0f699c9a587744e17ee1ac72859f26ec5937d189"
    },
    "e5904d6c4bd12d8dc00a9fab173b7b2717f7da9819496248b7a7ff8f5a7cc108": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nresource_permission_property = quicksight.CfnTheme.ResourcePermissionProperty(\n    actions=[\"actions\"],\n    principal=\"principal\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nResourcePermissionProperty resourcePermissionProperty = new ResourcePermissionProperty {\n    Actions = new [] { \"actions\" },\n    Principal = \"principal\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nResourcePermissionProperty resourcePermissionProperty = ResourcePermissionProperty.builder()\n        .actions(List.of(\"actions\"))\n        .principal(\"principal\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nresourcePermissionProperty := &resourcePermissionProperty{\n\tactions: []*string{\n\t\tjsii.String(\"actions\"),\n\t},\n\tprincipal: jsii.String(\"principal\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst resourcePermissionProperty: quicksight.CfnTheme.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.ResourcePermissionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.ResourcePermissionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourcePermissionProperty: quicksight.CfnTheme.ResourcePermissionProperty = {\n  actions: ['actions'],\n  principal: 'principal',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "60e639a15988c4bd4e1eca0fd7cfaa7574c7b89eb138a462feca1927b290cb50"
    },
    "5bc9df3cf53bf76065db3acd88aa6e2055a06d7c5fa1eb5e37aa8d5ef96bdaa7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nsheet_style_property = quicksight.CfnTheme.SheetStyleProperty(\n    tile=quicksight.CfnTheme.TileStyleProperty(\n        border=quicksight.CfnTheme.BorderStyleProperty(\n            show=False\n        )\n    ),\n    tile_layout=quicksight.CfnTheme.TileLayoutStyleProperty(\n        gutter=quicksight.CfnTheme.GutterStyleProperty(\n            show=False\n        ),\n        margin=quicksight.CfnTheme.MarginStyleProperty(\n            show=False\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nSheetStyleProperty sheetStyleProperty = new SheetStyleProperty {\n    Tile = new TileStyleProperty {\n        Border = new BorderStyleProperty {\n            Show = false\n        }\n    },\n    TileLayout = new TileLayoutStyleProperty {\n        Gutter = new GutterStyleProperty {\n            Show = false\n        },\n        Margin = new MarginStyleProperty {\n            Show = false\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nSheetStyleProperty sheetStyleProperty = SheetStyleProperty.builder()\n        .tile(TileStyleProperty.builder()\n                .border(BorderStyleProperty.builder()\n                        .show(false)\n                        .build())\n                .build())\n        .tileLayout(TileLayoutStyleProperty.builder()\n                .gutter(GutterStyleProperty.builder()\n                        .show(false)\n                        .build())\n                .margin(MarginStyleProperty.builder()\n                        .show(false)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nsheetStyleProperty := &sheetStyleProperty{\n\ttile: &tileStyleProperty{\n\t\tborder: &borderStyleProperty{\n\t\t\tshow: jsii.Boolean(false),\n\t\t},\n\t},\n\ttileLayout: &tileLayoutStyleProperty{\n\t\tgutter: &gutterStyleProperty{\n\t\t\tshow: jsii.Boolean(false),\n\t\t},\n\t\tmargin: &marginStyleProperty{\n\t\t\tshow: jsii.Boolean(false),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst sheetStyleProperty: quicksight.CfnTheme.SheetStyleProperty = {\n  tile: {\n    border: {\n      show: false,\n    },\n  },\n  tileLayout: {\n    gutter: {\n      show: false,\n    },\n    margin: {\n      show: false,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.SheetStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.SheetStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sheetStyleProperty: quicksight.CfnTheme.SheetStyleProperty = {\n  tile: {\n    border: {\n      show: false,\n    },\n  },\n  tileLayout: {\n    gutter: {\n      show: false,\n    },\n    margin: {\n      show: false,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "91": 3,
        "153": 2,
        "169": 1,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "193be28f9046395283d9548dca02a819a373c44b329d8c4b1b042dd35df6ea78"
    },
    "d0ab83be00988800a2b73f5fff402b2da7abf100fc6516aecc016dc34f6d95c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntheme_configuration_property = quicksight.CfnTheme.ThemeConfigurationProperty(\n    data_color_palette=quicksight.CfnTheme.DataColorPaletteProperty(\n        colors=[\"colors\"],\n        empty_fill_color=\"emptyFillColor\",\n        min_max_gradient=[\"minMaxGradient\"]\n    ),\n    sheet=quicksight.CfnTheme.SheetStyleProperty(\n        tile=quicksight.CfnTheme.TileStyleProperty(\n            border=quicksight.CfnTheme.BorderStyleProperty(\n                show=False\n            )\n        ),\n        tile_layout=quicksight.CfnTheme.TileLayoutStyleProperty(\n            gutter=quicksight.CfnTheme.GutterStyleProperty(\n                show=False\n            ),\n            margin=quicksight.CfnTheme.MarginStyleProperty(\n                show=False\n            )\n        )\n    ),\n    typography=quicksight.CfnTheme.TypographyProperty(\n        font_families=[quicksight.CfnTheme.FontProperty(\n            font_family=\"fontFamily\"\n        )]\n    ),\n    ui_color_palette=quicksight.CfnTheme.UIColorPaletteProperty(\n        accent=\"accent\",\n        accent_foreground=\"accentForeground\",\n        danger=\"danger\",\n        danger_foreground=\"dangerForeground\",\n        dimension=\"dimension\",\n        dimension_foreground=\"dimensionForeground\",\n        measure=\"measure\",\n        measure_foreground=\"measureForeground\",\n        primary_background=\"primaryBackground\",\n        primary_foreground=\"primaryForeground\",\n        secondary_background=\"secondaryBackground\",\n        secondary_foreground=\"secondaryForeground\",\n        success=\"success\",\n        success_foreground=\"successForeground\",\n        warning=\"warning\",\n        warning_foreground=\"warningForeground\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nThemeConfigurationProperty themeConfigurationProperty = new ThemeConfigurationProperty {\n    DataColorPalette = new DataColorPaletteProperty {\n        Colors = new [] { \"colors\" },\n        EmptyFillColor = \"emptyFillColor\",\n        MinMaxGradient = new [] { \"minMaxGradient\" }\n    },\n    Sheet = new SheetStyleProperty {\n        Tile = new TileStyleProperty {\n            Border = new BorderStyleProperty {\n                Show = false\n            }\n        },\n        TileLayout = new TileLayoutStyleProperty {\n            Gutter = new GutterStyleProperty {\n                Show = false\n            },\n            Margin = new MarginStyleProperty {\n                Show = false\n            }\n        }\n    },\n    Typography = new TypographyProperty {\n        FontFamilies = new [] { new FontProperty {\n            FontFamily = \"fontFamily\"\n        } }\n    },\n    UiColorPalette = new UIColorPaletteProperty {\n        Accent = \"accent\",\n        AccentForeground = \"accentForeground\",\n        Danger = \"danger\",\n        DangerForeground = \"dangerForeground\",\n        Dimension = \"dimension\",\n        DimensionForeground = \"dimensionForeground\",\n        Measure = \"measure\",\n        MeasureForeground = \"measureForeground\",\n        PrimaryBackground = \"primaryBackground\",\n        PrimaryForeground = \"primaryForeground\",\n        SecondaryBackground = \"secondaryBackground\",\n        SecondaryForeground = \"secondaryForeground\",\n        Success = \"success\",\n        SuccessForeground = \"successForeground\",\n        Warning = \"warning\",\n        WarningForeground = \"warningForeground\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nThemeConfigurationProperty themeConfigurationProperty = ThemeConfigurationProperty.builder()\n        .dataColorPalette(DataColorPaletteProperty.builder()\n                .colors(List.of(\"colors\"))\n                .emptyFillColor(\"emptyFillColor\")\n                .minMaxGradient(List.of(\"minMaxGradient\"))\n                .build())\n        .sheet(SheetStyleProperty.builder()\n                .tile(TileStyleProperty.builder()\n                        .border(BorderStyleProperty.builder()\n                                .show(false)\n                                .build())\n                        .build())\n                .tileLayout(TileLayoutStyleProperty.builder()\n                        .gutter(GutterStyleProperty.builder()\n                                .show(false)\n                                .build())\n                        .margin(MarginStyleProperty.builder()\n                                .show(false)\n                                .build())\n                        .build())\n                .build())\n        .typography(TypographyProperty.builder()\n                .fontFamilies(List.of(FontProperty.builder()\n                        .fontFamily(\"fontFamily\")\n                        .build()))\n                .build())\n        .uiColorPalette(UIColorPaletteProperty.builder()\n                .accent(\"accent\")\n                .accentForeground(\"accentForeground\")\n                .danger(\"danger\")\n                .dangerForeground(\"dangerForeground\")\n                .dimension(\"dimension\")\n                .dimensionForeground(\"dimensionForeground\")\n                .measure(\"measure\")\n                .measureForeground(\"measureForeground\")\n                .primaryBackground(\"primaryBackground\")\n                .primaryForeground(\"primaryForeground\")\n                .secondaryBackground(\"secondaryBackground\")\n                .secondaryForeground(\"secondaryForeground\")\n                .success(\"success\")\n                .successForeground(\"successForeground\")\n                .warning(\"warning\")\n                .warningForeground(\"warningForeground\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nthemeConfigurationProperty := &themeConfigurationProperty{\n\tdataColorPalette: &dataColorPaletteProperty{\n\t\tcolors: []*string{\n\t\t\tjsii.String(\"colors\"),\n\t\t},\n\t\temptyFillColor: jsii.String(\"emptyFillColor\"),\n\t\tminMaxGradient: []*string{\n\t\t\tjsii.String(\"minMaxGradient\"),\n\t\t},\n\t},\n\tsheet: &sheetStyleProperty{\n\t\ttile: &tileStyleProperty{\n\t\t\tborder: &borderStyleProperty{\n\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t\ttileLayout: &tileLayoutStyleProperty{\n\t\t\tgutter: &gutterStyleProperty{\n\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t},\n\t\t\tmargin: &marginStyleProperty{\n\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t},\n\t\t},\n\t},\n\ttypography: &typographyProperty{\n\t\tfontFamilies: []interface{}{\n\t\t\t&fontProperty{\n\t\t\t\tfontFamily: jsii.String(\"fontFamily\"),\n\t\t\t},\n\t\t},\n\t},\n\tuiColorPalette: &uIColorPaletteProperty{\n\t\taccent: jsii.String(\"accent\"),\n\t\taccentForeground: jsii.String(\"accentForeground\"),\n\t\tdanger: jsii.String(\"danger\"),\n\t\tdangerForeground: jsii.String(\"dangerForeground\"),\n\t\tdimension: jsii.String(\"dimension\"),\n\t\tdimensionForeground: jsii.String(\"dimensionForeground\"),\n\t\tmeasure: jsii.String(\"measure\"),\n\t\tmeasureForeground: jsii.String(\"measureForeground\"),\n\t\tprimaryBackground: jsii.String(\"primaryBackground\"),\n\t\tprimaryForeground: jsii.String(\"primaryForeground\"),\n\t\tsecondaryBackground: jsii.String(\"secondaryBackground\"),\n\t\tsecondaryForeground: jsii.String(\"secondaryForeground\"),\n\t\tsuccess: jsii.String(\"success\"),\n\t\tsuccessForeground: jsii.String(\"successForeground\"),\n\t\twarning: jsii.String(\"warning\"),\n\t\twarningForeground: jsii.String(\"warningForeground\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst themeConfigurationProperty: quicksight.CfnTheme.ThemeConfigurationProperty = {\n  dataColorPalette: {\n    colors: ['colors'],\n    emptyFillColor: 'emptyFillColor',\n    minMaxGradient: ['minMaxGradient'],\n  },\n  sheet: {\n    tile: {\n      border: {\n        show: false,\n      },\n    },\n    tileLayout: {\n      gutter: {\n        show: false,\n      },\n      margin: {\n        show: false,\n      },\n    },\n  },\n  typography: {\n    fontFamilies: [{\n      fontFamily: 'fontFamily',\n    }],\n  },\n  uiColorPalette: {\n    accent: 'accent',\n    accentForeground: 'accentForeground',\n    danger: 'danger',\n    dangerForeground: 'dangerForeground',\n    dimension: 'dimension',\n    dimensionForeground: 'dimensionForeground',\n    measure: 'measure',\n    measureForeground: 'measureForeground',\n    primaryBackground: 'primaryBackground',\n    primaryForeground: 'primaryForeground',\n    secondaryBackground: 'secondaryBackground',\n    secondaryForeground: 'secondaryForeground',\n    success: 'success',\n    successForeground: 'successForeground',\n    warning: 'warning',\n    warningForeground: 'warningForeground',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.ThemeConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.ThemeConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst themeConfigurationProperty: quicksight.CfnTheme.ThemeConfigurationProperty = {\n  dataColorPalette: {\n    colors: ['colors'],\n    emptyFillColor: 'emptyFillColor',\n    minMaxGradient: ['minMaxGradient'],\n  },\n  sheet: {\n    tile: {\n      border: {\n        show: false,\n      },\n    },\n    tileLayout: {\n      gutter: {\n        show: false,\n      },\n      margin: {\n        show: false,\n      },\n    },\n  },\n  typography: {\n    fontFamilies: [{\n      fontFamily: 'fontFamily',\n    }],\n  },\n  uiColorPalette: {\n    accent: 'accent',\n    accentForeground: 'accentForeground',\n    danger: 'danger',\n    dangerForeground: 'dangerForeground',\n    dimension: 'dimension',\n    dimensionForeground: 'dimensionForeground',\n    measure: 'measure',\n    measureForeground: 'measureForeground',\n    primaryBackground: 'primaryBackground',\n    primaryForeground: 'primaryForeground',\n    secondaryBackground: 'secondaryBackground',\n    secondaryForeground: 'secondaryForeground',\n    success: 'success',\n    successForeground: 'successForeground',\n    warning: 'warning',\n    warningForeground: 'warningForeground',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 21,
        "75": 38,
        "91": 3,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 11,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "e564d2da5633006e1959af94fae854e74248649a80258f700071cd939bd1355c"
    },
    "4d9216b24bce068e1c8e6b712accaf4b0ec28aebb0612f5a6329a6ba4d37c040": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntile_layout_style_property = quicksight.CfnTheme.TileLayoutStyleProperty(\n    gutter=quicksight.CfnTheme.GutterStyleProperty(\n        show=False\n    ),\n    margin=quicksight.CfnTheme.MarginStyleProperty(\n        show=False\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTileLayoutStyleProperty tileLayoutStyleProperty = new TileLayoutStyleProperty {\n    Gutter = new GutterStyleProperty {\n        Show = false\n    },\n    Margin = new MarginStyleProperty {\n        Show = false\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTileLayoutStyleProperty tileLayoutStyleProperty = TileLayoutStyleProperty.builder()\n        .gutter(GutterStyleProperty.builder()\n                .show(false)\n                .build())\n        .margin(MarginStyleProperty.builder()\n                .show(false)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntileLayoutStyleProperty := &tileLayoutStyleProperty{\n\tgutter: &gutterStyleProperty{\n\t\tshow: jsii.Boolean(false),\n\t},\n\tmargin: &marginStyleProperty{\n\t\tshow: jsii.Boolean(false),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst tileLayoutStyleProperty: quicksight.CfnTheme.TileLayoutStyleProperty = {\n  gutter: {\n    show: false,\n  },\n  margin: {\n    show: false,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.TileLayoutStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.TileLayoutStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tileLayoutStyleProperty: quicksight.CfnTheme.TileLayoutStyleProperty = {\n  gutter: {\n    show: false,\n  },\n  margin: {\n    show: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "93a9bf7a6a90720582b6df8d24b6ac5ed9e49ef07662760101a5cbf37e03c178"
    },
    "6e43a28cf576252cfe706049771163123b05e5b571d22f5db32ada122342e198": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntile_style_property = quicksight.CfnTheme.TileStyleProperty(\n    border=quicksight.CfnTheme.BorderStyleProperty(\n        show=False\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTileStyleProperty tileStyleProperty = new TileStyleProperty {\n    Border = new BorderStyleProperty {\n        Show = false\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTileStyleProperty tileStyleProperty = TileStyleProperty.builder()\n        .border(BorderStyleProperty.builder()\n                .show(false)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntileStyleProperty := &tileStyleProperty{\n\tborder: &borderStyleProperty{\n\t\tshow: jsii.Boolean(false),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst tileStyleProperty: quicksight.CfnTheme.TileStyleProperty = {\n  border: {\n    show: false,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.TileStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.TileStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tileStyleProperty: quicksight.CfnTheme.TileStyleProperty = {\n  border: {\n    show: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6b85caa555dd47a0a17863cc68c41294f00e3f099ce6eb024f1228925d5a5ca5"
    },
    "9a3a1a83313541cf16da814c8e427a0c031a76147ad81f59cbd3dc2f9f742bd4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ntypography_property = quicksight.CfnTheme.TypographyProperty(\n    font_families=[quicksight.CfnTheme.FontProperty(\n        font_family=\"fontFamily\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nTypographyProperty typographyProperty = new TypographyProperty {\n    FontFamilies = new [] { new FontProperty {\n        FontFamily = \"fontFamily\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nTypographyProperty typographyProperty = TypographyProperty.builder()\n        .fontFamilies(List.of(FontProperty.builder()\n                .fontFamily(\"fontFamily\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ntypographyProperty := &typographyProperty{\n\tfontFamilies: []interface{}{\n\t\t&fontProperty{\n\t\t\tfontFamily: jsii.String(\"fontFamily\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst typographyProperty: quicksight.CfnTheme.TypographyProperty = {\n  fontFamilies: [{\n    fontFamily: 'fontFamily',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.TypographyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.TypographyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst typographyProperty: quicksight.CfnTheme.TypographyProperty = {\n  fontFamilies: [{\n    fontFamily: 'fontFamily',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "16f1aea4c4a5532eacf9d35a22dddcd97f50dd32f92afe8d1f86e594e2a3ed0f"
    },
    "517624584a6d73be85bba8ee9152a1251b5c2ffb83936f049c441e146c4576c6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\nu_iColor_palette_property = quicksight.CfnTheme.UIColorPaletteProperty(\n    accent=\"accent\",\n    accent_foreground=\"accentForeground\",\n    danger=\"danger\",\n    danger_foreground=\"dangerForeground\",\n    dimension=\"dimension\",\n    dimension_foreground=\"dimensionForeground\",\n    measure=\"measure\",\n    measure_foreground=\"measureForeground\",\n    primary_background=\"primaryBackground\",\n    primary_foreground=\"primaryForeground\",\n    secondary_background=\"secondaryBackground\",\n    secondary_foreground=\"secondaryForeground\",\n    success=\"success\",\n    success_foreground=\"successForeground\",\n    warning=\"warning\",\n    warning_foreground=\"warningForeground\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nUIColorPaletteProperty uIColorPaletteProperty = new UIColorPaletteProperty {\n    Accent = \"accent\",\n    AccentForeground = \"accentForeground\",\n    Danger = \"danger\",\n    DangerForeground = \"dangerForeground\",\n    Dimension = \"dimension\",\n    DimensionForeground = \"dimensionForeground\",\n    Measure = \"measure\",\n    MeasureForeground = \"measureForeground\",\n    PrimaryBackground = \"primaryBackground\",\n    PrimaryForeground = \"primaryForeground\",\n    SecondaryBackground = \"secondaryBackground\",\n    SecondaryForeground = \"secondaryForeground\",\n    Success = \"success\",\n    SuccessForeground = \"successForeground\",\n    Warning = \"warning\",\n    WarningForeground = \"warningForeground\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nUIColorPaletteProperty uIColorPaletteProperty = UIColorPaletteProperty.builder()\n        .accent(\"accent\")\n        .accentForeground(\"accentForeground\")\n        .danger(\"danger\")\n        .dangerForeground(\"dangerForeground\")\n        .dimension(\"dimension\")\n        .dimensionForeground(\"dimensionForeground\")\n        .measure(\"measure\")\n        .measureForeground(\"measureForeground\")\n        .primaryBackground(\"primaryBackground\")\n        .primaryForeground(\"primaryForeground\")\n        .secondaryBackground(\"secondaryBackground\")\n        .secondaryForeground(\"secondaryForeground\")\n        .success(\"success\")\n        .successForeground(\"successForeground\")\n        .warning(\"warning\")\n        .warningForeground(\"warningForeground\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\nuIColorPaletteProperty := &uIColorPaletteProperty{\n\taccent: jsii.String(\"accent\"),\n\taccentForeground: jsii.String(\"accentForeground\"),\n\tdanger: jsii.String(\"danger\"),\n\tdangerForeground: jsii.String(\"dangerForeground\"),\n\tdimension: jsii.String(\"dimension\"),\n\tdimensionForeground: jsii.String(\"dimensionForeground\"),\n\tmeasure: jsii.String(\"measure\"),\n\tmeasureForeground: jsii.String(\"measureForeground\"),\n\tprimaryBackground: jsii.String(\"primaryBackground\"),\n\tprimaryForeground: jsii.String(\"primaryForeground\"),\n\tsecondaryBackground: jsii.String(\"secondaryBackground\"),\n\tsecondaryForeground: jsii.String(\"secondaryForeground\"),\n\tsuccess: jsii.String(\"success\"),\n\tsuccessForeground: jsii.String(\"successForeground\"),\n\twarning: jsii.String(\"warning\"),\n\twarningForeground: jsii.String(\"warningForeground\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst uIColorPaletteProperty: quicksight.CfnTheme.UIColorPaletteProperty = {\n  accent: 'accent',\n  accentForeground: 'accentForeground',\n  danger: 'danger',\n  dangerForeground: 'dangerForeground',\n  dimension: 'dimension',\n  dimensionForeground: 'dimensionForeground',\n  measure: 'measure',\n  measureForeground: 'measureForeground',\n  primaryBackground: 'primaryBackground',\n  primaryForeground: 'primaryForeground',\n  secondaryBackground: 'secondaryBackground',\n  secondaryForeground: 'secondaryForeground',\n  success: 'success',\n  successForeground: 'successForeground',\n  warning: 'warning',\n  warningForeground: 'warningForeground',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnTheme.UIColorPaletteProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnTheme.UIColorPaletteProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst uIColorPaletteProperty: quicksight.CfnTheme.UIColorPaletteProperty = {\n  accent: 'accent',\n  accentForeground: 'accentForeground',\n  danger: 'danger',\n  dangerForeground: 'dangerForeground',\n  dimension: 'dimension',\n  dimensionForeground: 'dimensionForeground',\n  measure: 'measure',\n  measureForeground: 'measureForeground',\n  primaryBackground: 'primaryBackground',\n  primaryForeground: 'primaryForeground',\n  secondaryBackground: 'secondaryBackground',\n  secondaryForeground: 'secondaryForeground',\n  success: 'success',\n  successForeground: 'successForeground',\n  warning: 'warning',\n  warningForeground: 'warningForeground',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 17,
        "75": 21,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "f075871726791aa79db89d79aeb03ae8e076779b7bbde3dcbc21e3c0364978b2"
    },
    "1c8edbbfac0cf1c7e6c70216e2e566151f0afa2759be10d8fa0f7a177dee6ec9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_quicksight as quicksight\n\ncfn_theme_props = quicksight.CfnThemeProps(\n    aws_account_id=\"awsAccountId\",\n    theme_id=\"themeId\",\n\n    # the properties below are optional\n    base_theme_id=\"baseThemeId\",\n    configuration=quicksight.CfnTheme.ThemeConfigurationProperty(\n        data_color_palette=quicksight.CfnTheme.DataColorPaletteProperty(\n            colors=[\"colors\"],\n            empty_fill_color=\"emptyFillColor\",\n            min_max_gradient=[\"minMaxGradient\"]\n        ),\n        sheet=quicksight.CfnTheme.SheetStyleProperty(\n            tile=quicksight.CfnTheme.TileStyleProperty(\n                border=quicksight.CfnTheme.BorderStyleProperty(\n                    show=False\n                )\n            ),\n            tile_layout=quicksight.CfnTheme.TileLayoutStyleProperty(\n                gutter=quicksight.CfnTheme.GutterStyleProperty(\n                    show=False\n                ),\n                margin=quicksight.CfnTheme.MarginStyleProperty(\n                    show=False\n                )\n            )\n        ),\n        typography=quicksight.CfnTheme.TypographyProperty(\n            font_families=[quicksight.CfnTheme.FontProperty(\n                font_family=\"fontFamily\"\n            )]\n        ),\n        ui_color_palette=quicksight.CfnTheme.UIColorPaletteProperty(\n            accent=\"accent\",\n            accent_foreground=\"accentForeground\",\n            danger=\"danger\",\n            danger_foreground=\"dangerForeground\",\n            dimension=\"dimension\",\n            dimension_foreground=\"dimensionForeground\",\n            measure=\"measure\",\n            measure_foreground=\"measureForeground\",\n            primary_background=\"primaryBackground\",\n            primary_foreground=\"primaryForeground\",\n            secondary_background=\"secondaryBackground\",\n            secondary_foreground=\"secondaryForeground\",\n            success=\"success\",\n            success_foreground=\"successForeground\",\n            warning=\"warning\",\n            warning_foreground=\"warningForeground\"\n        )\n    ),\n    name=\"name\",\n    permissions=[quicksight.CfnTheme.ResourcePermissionProperty(\n        actions=[\"actions\"],\n        principal=\"principal\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    version_description=\"versionDescription\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.QuickSight;\n\nCfnThemeProps cfnThemeProps = new CfnThemeProps {\n    AwsAccountId = \"awsAccountId\",\n    ThemeId = \"themeId\",\n\n    // the properties below are optional\n    BaseThemeId = \"baseThemeId\",\n    Configuration = new ThemeConfigurationProperty {\n        DataColorPalette = new DataColorPaletteProperty {\n            Colors = new [] { \"colors\" },\n            EmptyFillColor = \"emptyFillColor\",\n            MinMaxGradient = new [] { \"minMaxGradient\" }\n        },\n        Sheet = new SheetStyleProperty {\n            Tile = new TileStyleProperty {\n                Border = new BorderStyleProperty {\n                    Show = false\n                }\n            },\n            TileLayout = new TileLayoutStyleProperty {\n                Gutter = new GutterStyleProperty {\n                    Show = false\n                },\n                Margin = new MarginStyleProperty {\n                    Show = false\n                }\n            }\n        },\n        Typography = new TypographyProperty {\n            FontFamilies = new [] { new FontProperty {\n                FontFamily = \"fontFamily\"\n            } }\n        },\n        UiColorPalette = new UIColorPaletteProperty {\n            Accent = \"accent\",\n            AccentForeground = \"accentForeground\",\n            Danger = \"danger\",\n            DangerForeground = \"dangerForeground\",\n            Dimension = \"dimension\",\n            DimensionForeground = \"dimensionForeground\",\n            Measure = \"measure\",\n            MeasureForeground = \"measureForeground\",\n            PrimaryBackground = \"primaryBackground\",\n            PrimaryForeground = \"primaryForeground\",\n            SecondaryBackground = \"secondaryBackground\",\n            SecondaryForeground = \"secondaryForeground\",\n            Success = \"success\",\n            SuccessForeground = \"successForeground\",\n            Warning = \"warning\",\n            WarningForeground = \"warningForeground\"\n        }\n    },\n    Name = \"name\",\n    Permissions = new [] { new ResourcePermissionProperty {\n        Actions = new [] { \"actions\" },\n        Principal = \"principal\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    VersionDescription = \"versionDescription\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.quicksight.*;\n\nCfnThemeProps cfnThemeProps = CfnThemeProps.builder()\n        .awsAccountId(\"awsAccountId\")\n        .themeId(\"themeId\")\n\n        // the properties below are optional\n        .baseThemeId(\"baseThemeId\")\n        .configuration(ThemeConfigurationProperty.builder()\n                .dataColorPalette(DataColorPaletteProperty.builder()\n                        .colors(List.of(\"colors\"))\n                        .emptyFillColor(\"emptyFillColor\")\n                        .minMaxGradient(List.of(\"minMaxGradient\"))\n                        .build())\n                .sheet(SheetStyleProperty.builder()\n                        .tile(TileStyleProperty.builder()\n                                .border(BorderStyleProperty.builder()\n                                        .show(false)\n                                        .build())\n                                .build())\n                        .tileLayout(TileLayoutStyleProperty.builder()\n                                .gutter(GutterStyleProperty.builder()\n                                        .show(false)\n                                        .build())\n                                .margin(MarginStyleProperty.builder()\n                                        .show(false)\n                                        .build())\n                                .build())\n                        .build())\n                .typography(TypographyProperty.builder()\n                        .fontFamilies(List.of(FontProperty.builder()\n                                .fontFamily(\"fontFamily\")\n                                .build()))\n                        .build())\n                .uiColorPalette(UIColorPaletteProperty.builder()\n                        .accent(\"accent\")\n                        .accentForeground(\"accentForeground\")\n                        .danger(\"danger\")\n                        .dangerForeground(\"dangerForeground\")\n                        .dimension(\"dimension\")\n                        .dimensionForeground(\"dimensionForeground\")\n                        .measure(\"measure\")\n                        .measureForeground(\"measureForeground\")\n                        .primaryBackground(\"primaryBackground\")\n                        .primaryForeground(\"primaryForeground\")\n                        .secondaryBackground(\"secondaryBackground\")\n                        .secondaryForeground(\"secondaryForeground\")\n                        .success(\"success\")\n                        .successForeground(\"successForeground\")\n                        .warning(\"warning\")\n                        .warningForeground(\"warningForeground\")\n                        .build())\n                .build())\n        .name(\"name\")\n        .permissions(List.of(ResourcePermissionProperty.builder()\n                .actions(List.of(\"actions\"))\n                .principal(\"principal\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .versionDescription(\"versionDescription\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport quicksight \"github.com/aws-samples/dummy/awscdkawsquicksight\"\n\ncfnThemeProps := &cfnThemeProps{\n\tawsAccountId: jsii.String(\"awsAccountId\"),\n\tthemeId: jsii.String(\"themeId\"),\n\n\t// the properties below are optional\n\tbaseThemeId: jsii.String(\"baseThemeId\"),\n\tconfiguration: &themeConfigurationProperty{\n\t\tdataColorPalette: &dataColorPaletteProperty{\n\t\t\tcolors: []*string{\n\t\t\t\tjsii.String(\"colors\"),\n\t\t\t},\n\t\t\temptyFillColor: jsii.String(\"emptyFillColor\"),\n\t\t\tminMaxGradient: []*string{\n\t\t\t\tjsii.String(\"minMaxGradient\"),\n\t\t\t},\n\t\t},\n\t\tsheet: &sheetStyleProperty{\n\t\t\ttile: &tileStyleProperty{\n\t\t\t\tborder: &borderStyleProperty{\n\t\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\ttileLayout: &tileLayoutStyleProperty{\n\t\t\t\tgutter: &gutterStyleProperty{\n\t\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t\tmargin: &marginStyleProperty{\n\t\t\t\t\tshow: jsii.Boolean(false),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttypography: &typographyProperty{\n\t\t\tfontFamilies: []interface{}{\n\t\t\t\t&fontProperty{\n\t\t\t\t\tfontFamily: jsii.String(\"fontFamily\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tuiColorPalette: &uIColorPaletteProperty{\n\t\t\taccent: jsii.String(\"accent\"),\n\t\t\taccentForeground: jsii.String(\"accentForeground\"),\n\t\t\tdanger: jsii.String(\"danger\"),\n\t\t\tdangerForeground: jsii.String(\"dangerForeground\"),\n\t\t\tdimension: jsii.String(\"dimension\"),\n\t\t\tdimensionForeground: jsii.String(\"dimensionForeground\"),\n\t\t\tmeasure: jsii.String(\"measure\"),\n\t\t\tmeasureForeground: jsii.String(\"measureForeground\"),\n\t\t\tprimaryBackground: jsii.String(\"primaryBackground\"),\n\t\t\tprimaryForeground: jsii.String(\"primaryForeground\"),\n\t\t\tsecondaryBackground: jsii.String(\"secondaryBackground\"),\n\t\t\tsecondaryForeground: jsii.String(\"secondaryForeground\"),\n\t\t\tsuccess: jsii.String(\"success\"),\n\t\t\tsuccessForeground: jsii.String(\"successForeground\"),\n\t\t\twarning: jsii.String(\"warning\"),\n\t\t\twarningForeground: jsii.String(\"warningForeground\"),\n\t\t},\n\t},\n\tname: jsii.String(\"name\"),\n\tpermissions: []interface{}{\n\t\t&resourcePermissionProperty{\n\t\t\tactions: []*string{\n\t\t\t\tjsii.String(\"actions\"),\n\t\t\t},\n\t\t\tprincipal: jsii.String(\"principal\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tversionDescription: jsii.String(\"versionDescription\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\nconst cfnThemeProps: quicksight.CfnThemeProps = {\n  awsAccountId: 'awsAccountId',\n  themeId: 'themeId',\n\n  // the properties below are optional\n  baseThemeId: 'baseThemeId',\n  configuration: {\n    dataColorPalette: {\n      colors: ['colors'],\n      emptyFillColor: 'emptyFillColor',\n      minMaxGradient: ['minMaxGradient'],\n    },\n    sheet: {\n      tile: {\n        border: {\n          show: false,\n        },\n      },\n      tileLayout: {\n        gutter: {\n          show: false,\n        },\n        margin: {\n          show: false,\n        },\n      },\n    },\n    typography: {\n      fontFamilies: [{\n        fontFamily: 'fontFamily',\n      }],\n    },\n    uiColorPalette: {\n      accent: 'accent',\n      accentForeground: 'accentForeground',\n      danger: 'danger',\n      dangerForeground: 'dangerForeground',\n      dimension: 'dimension',\n      dimensionForeground: 'dimensionForeground',\n      measure: 'measure',\n      measureForeground: 'measureForeground',\n      primaryBackground: 'primaryBackground',\n      primaryForeground: 'primaryForeground',\n      secondaryBackground: 'secondaryBackground',\n      secondaryForeground: 'secondaryForeground',\n      success: 'success',\n      successForeground: 'successForeground',\n      warning: 'warning',\n      warningForeground: 'warningForeground',\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-quicksight.CfnThemeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-quicksight.CfnThemeProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as quicksight from '@aws-cdk/aws-quicksight';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnThemeProps: quicksight.CfnThemeProps = {\n  awsAccountId: 'awsAccountId',\n  themeId: 'themeId',\n\n  // the properties below are optional\n  baseThemeId: 'baseThemeId',\n  configuration: {\n    dataColorPalette: {\n      colors: ['colors'],\n      emptyFillColor: 'emptyFillColor',\n      minMaxGradient: ['minMaxGradient'],\n    },\n    sheet: {\n      tile: {\n        border: {\n          show: false,\n        },\n      },\n      tileLayout: {\n        gutter: {\n          show: false,\n        },\n        margin: {\n          show: false,\n        },\n      },\n    },\n    typography: {\n      fontFamilies: [{\n        fontFamily: 'fontFamily',\n      }],\n    },\n    uiColorPalette: {\n      accent: 'accent',\n      accentForeground: 'accentForeground',\n      danger: 'danger',\n      dangerForeground: 'dangerForeground',\n      dimension: 'dimension',\n      dimensionForeground: 'dimensionForeground',\n      measure: 'measure',\n      measureForeground: 'measureForeground',\n      primaryBackground: 'primaryBackground',\n      primaryForeground: 'primaryForeground',\n      secondaryBackground: 'secondaryBackground',\n      secondaryForeground: 'secondaryForeground',\n      success: 'success',\n      successForeground: 'successForeground',\n      warning: 'warning',\n      warningForeground: 'warningForeground',\n    },\n  },\n  name: 'name',\n  permissions: [{\n    actions: ['actions'],\n    principal: 'principal',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  versionDescription: 'versionDescription',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 30,
        "75": 49,
        "91": 3,
        "153": 1,
        "169": 1,
        "192": 6,
        "193": 14,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "5e4dac24dbfdeaa912ea16363e402aba30a25e2f4099b90201a767a54ab0920a"
    }
  }
}