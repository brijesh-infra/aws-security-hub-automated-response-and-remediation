{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-apigatewayv2": "1.169.0",
    "@aws-cdk/aws-cognito": "1.169.0",
    "@aws-cdk/aws-iam": "1.169.0",
    "@aws-cdk/aws-lambda": "1.169.0",
    "@aws-cdk/core": "1.169.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-apigatewayv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGatewayv2",
          "packageId": "Amazon.CDK.AWS.APIGatewayv2"
        },
        "java": {
          "maven": {
            "artifactId": "apigatewayv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigatewayv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigatewayv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigatewayv2",
          "module": "aws_cdk.aws_apigatewayv2"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Authorizers for AWS APIGateway V2",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.63.2 (build a8a8833)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "apigateway"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-apigatewayv2-authorizers",
  "readme": {
    "markdown": "# AWS APIGatewayv2 Authorizers\n\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [HTTP APIs](#http-apis)\n  - [Default Authorization](#default-authorization)\n  - [Route Authorization](#route-authorization)\n  - [JWT Authorizers](#jwt-authorizers)\n    - [User Pool Authorizer](#user-pool-authorizer)\n  - [Lambda Authorizers](#lambda-authorizers)\n  - [IAM Authorizers](#iam-authorizers)\n- [WebSocket APIs](#websocket-apis)\n  - [Lambda Authorizer](#lambda-authorizer)\n\n## Introduction\n\nAPI Gateway supports multiple mechanisms for controlling and managing access to your HTTP API. They are mainly\nclassified into Lambda Authorizers, JWT authorizers and standard AWS IAM roles and policies. More information is\navailable at [Controlling and managing access to an HTTP\nAPI](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html).\n\n## HTTP APIs\n\nAccess control for Http Apis is managed by restricting which routes can be invoked via.\n\nAuthorizers and scopes can either be applied to the api, or specifically for each route.\n\n### Default Authorization\n\nWhen using default authorization, all routes of the api will inherit the configuration.\n\nIn the example below, all routes will require the `manage:books` scope present in order to invoke the integration.\n\n```ts\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['manage:books'],\n});\n```\n\n### Route Authorization\n\nAuthorization can also configured for each Route. When a route authorization is configured, it takes precedence over default authorization.\n\nThe example below showcases default authorization, along with route authorization. It also shows how to remove authorization entirely for a route.\n\n- `GET /books` and `GET /books/{id}` use the default authorizer settings on the api\n- `POST /books` will require the [write:books] scope\n- `POST /login` removes the default authorizer (unauthenticated route)\n\n```ts\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});\n```\n\n### JWT Authorizers\n\nJWT authorizers allow the use of JSON Web Tokens (JWTs) as part of [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html) and [OAuth 2.0](https://oauth.net/2/) frameworks to allow and restrict clients from accessing HTTP APIs.\n\nWhen configured, API Gateway validates the JWT submitted by the client, and allows or denies access based on its content.\n\nThe location of the token is defined by the `identitySource` which defaults to the http `Authorization` header. However it also\n[supports a number of other options](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html#http-api-lambda-authorizer.identity-sources).\nIt then decodes the JWT and validates the signature and claims, against the options defined in the authorizer and route (scopes).\nFor more information check the [JWT Authorizer documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-jwt-authorizer.html).\n\nClients that fail authorization are presented with either 2 responses:\n\n- `401 - Unauthorized` - When the JWT validation fails\n- `403 - Forbidden` - When the JWT validation is successful but the required scopes are not met\n\n```ts\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n```\n\n#### User Pool Authorizer\n\nUser Pool Authorizer is a type of JWT Authorizer that uses a Cognito user pool and app client to control who can access your Api. After a successful authorization from the app client, the generated access token will be used as the JWT.\n\nClients accessing an API that uses a user pool authorizer must first sign in to a user pool and obtain an identity or access token.\nThey must then use this token in the specified `identitySource` for the API call. More information is available at [using Amazon Cognito user\npools as authorizer](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html).\n\n```ts\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n```\n\n### Lambda Authorizers\n\nLambda authorizers use a Lambda function to control access to your HTTP API. When a client calls your API, API Gateway invokes your Lambda function and uses the response to determine whether the client can access your API.\n\nLambda authorizers depending on their response, fall into either two types - Simple or IAM. You can learn about differences [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html#http-api-lambda-authorizer.payload-format-response).\n\n\n```ts\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n```\n\n### IAM Authorizers\n\nAPI Gateway supports IAM via the included `HttpIamAuthorizer` and grant syntax:\n\n```ts\nimport { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const principal: iam.AnyPrincipal;\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);\n```\n\n## WebSocket APIs\n\nYou can set an authorizer to your WebSocket API's `$connect` route to control access to your API.\n\n### Lambda Authorizer\n\nLambda authorizers use a Lambda function to control access to your WebSocket API. When a client connects to your API, API Gateway invokes your Lambda function and uses the response to determine whether the client can access your API.\n\n```ts\nimport { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-apigatewayv2-authorizers",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.APIGatewayv2.Authorizers",
      "packageId": "Amazon.CDK.AWS.APIGatewayv2.Authorizers",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "apigatewayv2-authorizers",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.apigatewayv2.authorizers"
    },
    "js": {
      "npm": "@aws-cdk/aws-apigatewayv2-authorizers"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-apigatewayv2-authorizers",
      "module": "aws_cdk.aws_apigatewayv2_authorizers"
    }
  },
  "types": {
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpIamAuthorizer": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const principal: iam.AnyPrincipal;\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);",
        "stability": "experimental",
        "summary": "Authorize HTTP API Routes with IAM."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpIamAuthorizer",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/http/iam.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bind this authorizer to a specified Http route."
          },
          "locationInModule": {
            "filename": "lib/http/iam.ts",
            "line": 12
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
          "parameters": [
            {
              "name": "_options",
              "type": {
                "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerConfig"
            }
          }
        }
      ],
      "name": "HttpIamAuthorizer",
      "symbolId": "lib/http/iam:HttpIamAuthorizer"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
        "stability": "experimental",
        "summary": "Authorize Http Api routes on whether the requester is registered as part of an AWS Cognito user pool."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Initialize a JWT authorizer to be bound with HTTP route."
        },
        "locationInModule": {
          "filename": "lib/http/jwt.ts",
          "line": 47
        },
        "parameters": [
          {
            "docs": {
              "summary": "The id of the underlying construct."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "The base domain of the identity provider that issues JWT."
            },
            "name": "jwtIssuer",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "Properties to configure the authorizer."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/http/jwt.ts",
        "line": 38
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bind this authorizer to a specified Http route."
          },
          "locationInModule": {
            "filename": "lib/http/jwt.ts",
            "line": 53
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerConfig"
            }
          }
        }
      ],
      "name": "HttpJwtAuthorizer",
      "symbolId": "lib/http/jwt:HttpJwtAuthorizer"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
        "stability": "experimental",
        "summary": "Properties to initialize HttpJwtAuthorizer."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/http/jwt.ts",
        "line": 12
      },
      "name": "HttpJwtAuthorizerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "A valid JWT must provide an aud that matches at least one entry in this list.",
            "stability": "experimental",
            "summary": "A list of the intended recipients of the JWT."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/jwt.ts",
            "line": 31
          },
          "name": "jwtAudience",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- same value as `id` passed in the constructor",
            "stability": "experimental",
            "summary": "The name of the authorizer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/jwt.ts",
            "line": 18
          },
          "name": "authorizerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['$request.header.Authorization']",
            "stability": "experimental",
            "summary": "The identity source for which authorization is requested."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/jwt.ts",
            "line": 25
          },
          "name": "identitySource",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/http/jwt:HttpJwtAuthorizerProps"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
        "stability": "experimental",
        "summary": "Authorize Http Api routes via a lambda function."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Initialize a lambda authorizer to be bound with HTTP route."
        },
        "locationInModule": {
          "filename": "lib/http/lambda.ts",
          "line": 81
        },
        "parameters": [
          {
            "docs": {
              "summary": "The id of the underlying construct."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@aws-cdk/aws-lambda.IFunction"
            }
          },
          {
            "docs": {
              "summary": "Properties to configure the authorizer."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/http/lambda.ts",
        "line": 71
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bind this authorizer to a specified Http route."
          },
          "locationInModule": {
            "filename": "lib/http/lambda.ts",
            "line": 87
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerConfig"
            }
          }
        }
      ],
      "name": "HttpLambdaAuthorizer",
      "symbolId": "lib/http/lambda:HttpLambdaAuthorizer"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
        "stability": "experimental",
        "summary": "Properties to initialize HttpTokenAuthorizer."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/http/lambda.ts",
        "line": 32
      },
      "name": "HttpLambdaAuthorizerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- same value as `id` passed in the constructor.",
            "stability": "experimental",
            "summary": "Friendly authorizer name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/lambda.ts",
            "line": 38
          },
          "name": "authorizerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['$request.header.Authorization']",
            "stability": "experimental",
            "summary": "The identity source for which authorization is requested."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/lambda.ts",
            "line": 45
          },
          "name": "identitySource",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[HttpLambdaResponseType.IAM]",
            "remarks": "If HttpLambdaResponseType.SIMPLE is included then\nresponse format 2.0 will be used.",
            "see": "https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html#http-api-lambda-authorizer.payload-format-response",
            "stability": "experimental",
            "summary": "The types of responses the lambda can return."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/lambda.ts",
            "line": 65
          },
          "name": "responseTypes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "remarks": "Max 1 hour.\nDisable caching by setting this to `Duration.seconds(0)`.",
            "stability": "experimental",
            "summary": "How long APIGateway should cache the results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/lambda.ts",
            "line": 53
          },
          "name": "resultsCacheTtl",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/http/lambda:HttpLambdaAuthorizerProps"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "docs": {
        "stability": "experimental",
        "summary": "Specifies the type responses the lambda returns."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/http/lambda.ts",
        "line": 21
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns simple boolean response."
          },
          "name": "SIMPLE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an IAM Policy."
          },
          "name": "IAM"
        }
      ],
      "name": "HttpLambdaResponseType",
      "symbolId": "lib/http/lambda:HttpLambdaResponseType"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizer": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import * as cognito from '@aws-cdk/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
        "stability": "experimental",
        "summary": "Authorize Http Api routes on whether the requester is registered as part of an AWS Cognito user pool."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizer",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Initialize a Cognito user pool authorizer to be bound with HTTP route."
        },
        "locationInModule": {
          "filename": "lib/http/user-pool.ts",
          "line": 48
        },
        "parameters": [
          {
            "docs": {
              "summary": "The id of the underlying construct."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "The user pool to use for authorization."
            },
            "name": "pool",
            "type": {
              "fqn": "@aws-cdk/aws-cognito.IUserPool"
            }
          },
          {
            "docs": {
              "summary": "Properties to configure the authorizer."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/http/user-pool.ts",
        "line": 39
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bind this authorizer to a specified Http route."
          },
          "locationInModule": {
            "filename": "lib/http/user-pool.ts",
            "line": 54
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteAuthorizerConfig"
            }
          }
        }
      ],
      "name": "HttpUserPoolAuthorizer",
      "symbolId": "lib/http/user-pool:HttpUserPoolAuthorizer"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizerProps": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties to initialize HttpUserPoolAuthorizer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const userPoolClient: cognito.UserPoolClient;\nconst httpUserPoolAuthorizerProps: apigatewayv2_authorizers.HttpUserPoolAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n  userPoolClients: [userPoolClient],\n  userPoolRegion: 'userPoolRegion',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/http/user-pool.ts",
        "line": 8
      },
      "name": "HttpUserPoolAuthorizerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- same value as `id` passed in the constructor",
            "stability": "experimental",
            "summary": "Friendly name of the authorizer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/user-pool.ts",
            "line": 25
          },
          "name": "authorizerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['$request.header.Authorization']",
            "stability": "experimental",
            "summary": "The identity source for which authorization is requested."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/user-pool.ts",
            "line": 32
          },
          "name": "identitySource",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new client will be created for the given user pool",
            "stability": "experimental",
            "summary": "The user pool clients that should be used to authorize requests with the user pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/user-pool.ts",
            "line": 13
          },
          "name": "userPoolClients",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cognito.IUserPoolClient"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- same region as the Route the authorizer is attached to.",
            "stability": "experimental",
            "summary": "The AWS region in which the user pool is present."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http/user-pool.ts",
            "line": 19
          },
          "name": "userPoolRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/http/user-pool:HttpUserPoolAuthorizerProps"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizer": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "import { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});",
        "stability": "experimental",
        "summary": "Authorize WebSocket Api routes via a lambda function."
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizer",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/websocket/lambda.ts",
          "line": 47
        },
        "parameters": [
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "handler",
            "type": {
              "fqn": "@aws-cdk/aws-lambda.IFunction"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-apigatewayv2.IWebSocketRouteAuthorizer"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/websocket/lambda.ts",
        "line": 43
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Bind this authorizer to a specified WebSocket route."
          },
          "locationInModule": {
            "filename": "lib/websocket/lambda.ts",
            "line": 53
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apigatewayv2.IWebSocketRouteAuthorizer",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketRouteAuthorizerBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketRouteAuthorizerConfig"
            }
          }
        }
      ],
      "name": "WebSocketLambdaAuthorizer",
      "symbolId": "lib/websocket/lambda:WebSocketLambdaAuthorizer"
    },
    "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizerProps": {
      "assembly": "@aws-cdk/aws-apigatewayv2-authorizers",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties to initialize WebSocketTokenAuthorizer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers from '@aws-cdk/aws-apigatewayv2-authorizers';\nconst webSocketLambdaAuthorizerProps: apigatewayv2_authorizers.WebSocketLambdaAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/websocket/lambda.ts",
        "line": 20
      },
      "name": "WebSocketLambdaAuthorizerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- same value as `id` passed in the constructor.",
            "stability": "experimental",
            "summary": "The name of the authorizer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/websocket/lambda.ts",
            "line": 26
          },
          "name": "authorizerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['route.request.header.Authorization']",
            "remarks": "Request parameter match `'route.request.querystring|header.[a-zA-z0-9._-]+'`.\nStaged variable match `'stageVariables.[a-zA-Z0-9._-]+'`.\nContext parameter match `'context.[a-zA-Z0-9._-]+'`.",
            "stability": "experimental",
            "summary": "The identity source for which authorization is requested."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/websocket/lambda.ts",
            "line": 37
          },
          "name": "identitySource",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/websocket/lambda:WebSocketLambdaAuthorizerProps"
    }
  },
  "version": "1.169.0",
  "fingerprint": "**********"
}