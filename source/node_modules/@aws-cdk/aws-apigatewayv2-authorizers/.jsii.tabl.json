{
  "version": "2",
  "toolVersion": "1.63.2",
  "snippets": {
    "1695d9edf111a68acf3621aa2d3502257688ce972a19ea520051db55886739a4": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpJwtAuthorizer\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"manage:books\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer,\n    DefaultAuthorizationScopes = new [] { \"manage:books\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpJwtAuthorizer;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"DefaultAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .defaultAuthorizationScopes(List.of(\"manage:books\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\n\n\nissuer := \"https://test.us.auth0.com\"\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpJwtAuthorizer(jsii.String(\"DefaultAuthorizer\"), issuer, &httpJwtAuthorizerProps{\n\tjwtAudience: []*string{\n\t\tjsii.String(\"3131231\"),\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"), &httpApiProps{\n\tdefaultAuthorizer: authorizer,\n\tdefaultAuthorizationScopes: []*string{\n\t\tjsii.String(\"manage:books\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['manage:books'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 51
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['manage:books'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "33caa095d1cc93ac0b8e346a6fdff81d08179dc433e364c58ae1e8668ed3d6e2"
    },
    "875027ab92035bc1dd44eec63c5ed51d14f784fccdbd6c18bf4715fc15224420": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"read:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{id}\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorization_scopes=[\"write:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/login\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorizer=apigwv2.HttpNoneAuthorizer()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer,\n    DefaultAuthorizationScopes = new [] { \"read:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{id}\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.POST },\n    AuthorizationScopes = new [] { \"write:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/login\",\n    Methods = new [] { HttpMethod.POST },\n    Authorizer = new HttpNoneAuthorizer()\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"DefaultAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .defaultAuthorizationScopes(List.of(\"read:books\"))\n        .build();\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{id}\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizationScopes(List.of(\"write:books\"))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/login\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizer(new HttpNoneAuthorizer())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nissuer := \"https://test.us.auth0.com\"\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpJwtAuthorizer(jsii.String(\"DefaultAuthorizer\"), issuer, &httpJwtAuthorizerProps{\n\tjwtAudience: []*string{\n\t\tjsii.String(\"3131231\"),\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"), &httpApiProps{\n\tdefaultAuthorizer: authorizer,\n\tdefaultAuthorizationScopes: []*string{\n\t\tjsii.String(\"read:books\"),\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIdIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books/{id}\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_POST,\n\t},\n\tauthorizationScopes: []*string{\n\t\tjsii.String(\"write:books\"),\n\t},\n})\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"LoginIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/login\"),\n\tmethods: []*httpMethod{\n\t\tapigwv2.*httpMethod_POST,\n\t},\n\tauthorizer: apigwv2.NewHttpNoneAuthorizer(),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 75
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2.HttpNoneAuthorizer",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 20,
        "75": 53,
        "104": 1,
        "192": 7,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 7,
        "225": 3,
        "226": 4,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "a2e513c959b4b90c0d6bab9559d5684011bb56088fdc1c93e9c0136e7bb9528a"
    },
    "8862c06493467985458a1ab99937e235696b392cde19f5de6d8d872e3fa83aff": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"BooksAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"BooksAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"BooksAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nissuer := \"https://test.us.auth0.com\"\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpJwtAuthorizer(jsii.String(\"BooksAuthorizer\"), issuer, &httpJwtAuthorizerProps{\n\tjwtAudience: []*string{\n\t\tjsii.String(\"3131231\"),\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 132
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a680c10c16120472c337456c060d2ace2ad87e42d834cd7a442096f18963561e"
    },
    "933bb449d5497e38b921b3e7d2de90ef3270c047687678543dd85f5a51242d44": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\nfrom aws_cdk.aws_apigatewayv2_authorizers import HttpUserPoolAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauthorizer = HttpUserPoolAuthorizer(\"BooksAuthorizer\", user_pool)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\nusing Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpUserPoolAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cognito \"github.com/aws-samples/dummy/awscdkawscognito\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nuserPool := cognito.NewUserPool(this, jsii.String(\"UserPool\"))\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpUserPoolAuthorizer(jsii.String(\"BooksAuthorizer\"), userPool)\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 158
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5c3ccd044dcd378082b288a6013749d4999f2732b907ad823c55256d73b33c2e"
    },
    "e3b14c6c56083d96e60e242dc0f5f176d6b6984ea81455c00723da9d516b4b79": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n// This function handles your auth logic\nvar authHandler function\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpLambdaAuthorizer(jsii.String(\"BooksAuthorizer\"), authHandler, &httpLambdaAuthorizerProps{\n\tresponseTypes: []httpLambdaResponseType{\n\t\t*awscdkawsapigatewayv2authorizers.HttpLambdaResponseType_SIMPLE,\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 183
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "35b36c026a4663439e35992e9de3858b29837096edbb3d444a217d860bc79b6f"
    },
    "732521835ef9b88d85d5fae6e6f54266f5d0152a3245f551652af397f0b9a59d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpIamAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# principal: iam.AnyPrincipal\n\n\nauthorizer = HttpIamAuthorizer()\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer\n)\n\nroutes = http_api.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{book}\"\n)\n\nroutes[0].grant_invoke(principal)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer\n});\n\nHttpRoute[] routes = httpApi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{book}\"\n});\n\nroutes[0].GrantInvoke(principal);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpIamAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .build();\n\nHttpRoute[] routes = httpApi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{book}\")\n        .build());\n\nroutes[0].grantInvoke(principal);",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar principal anyPrincipal\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpIamAuthorizer()\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"), &httpApiProps{\n\tdefaultAuthorizer: authorizer,\n})\n\nroutes := httpApi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books/{book}\"),\n})\n\nroutes[0].grantInvoke(principal)",
          "version": "1"
        },
        "$": {
          "source": "import { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const principal: iam.AnyPrincipal;\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 207
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpIamAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRoute#grantInvoke",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-iam.IGrantable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const principal: iam.AnyPrincipal;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "195": 1,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bfb779417b62f58a60ec0ee5e0aa15c41a19a3b4df21cbb522b04ea9d2f63b5d"
    },
    "e80f0a9f5aefce8788c3d35641a1d725062f4a052ab257dd359d28eb7b2c205b": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import WebSocketLambdaAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n# This function handles your WebSocket requests\n# handler: lambda.Function\n\n\nauthorizer = WebSocketLambdaAuthorizer(\"Authorizer\", auth_handler)\n\nintegration = WebSocketLambdaIntegration(\"Integration\", handler)\n\napigwv2.WebSocketApi(self, \"WebSocketApi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(\n        integration=integration,\n        authorizer=authorizer\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nnew WebSocketApi(this, \"WebSocketApi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions {\n        Integration = integration,\n        Authorizer = authorizer\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.WebSocketLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nWebSocketApi.Builder.create(this, \"WebSocketApi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder()\n                .integration(integration)\n                .authorizer(authorizer)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n// This function handles your auth logic\nvar authHandler function\n\n// This function handles your WebSocket requests\nvar handler function\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewWebSocketLambdaAuthorizer(jsii.String(\"Authorizer\"), authHandler)\n\nintegration := awscdkawsapigatewayv2integrations.NewWebSocketLambdaIntegration(jsii.String(\"Integration\"), handler)\n\napigwv2.NewWebSocketApi(this, jsii.String(\"WebSocketApi\"), &webSocketApiProps{\n\tconnectRouteOptions: &webSocketRouteOptions{\n\t\tintegration: integration,\n\t\tauthorizer: authorizer,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-authorizers"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c19dc9b7433549bbf4868fa583cd7234c820c0f7607e809281fe3831e98ea0e0"
    },
    "c49f4b3bb355bdbb061f3c933f35bb2459dc19501d0b9f1cf8956e5753bcd757": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpIamAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# principal: iam.AnyPrincipal\n\n\nauthorizer = HttpIamAuthorizer()\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer\n)\n\nroutes = http_api.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{book}\"\n)\n\nroutes[0].grant_invoke(principal)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer\n});\n\nHttpRoute[] routes = httpApi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{book}\"\n});\n\nroutes[0].GrantInvoke(principal);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpIamAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\nAnyPrincipal principal;\n\n\nHttpIamAuthorizer authorizer = new HttpIamAuthorizer();\n\nHttpApi httpApi = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .build();\n\nHttpRoute[] routes = httpApi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{book}\")\n        .build());\n\nroutes[0].grantInvoke(principal);",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar principal anyPrincipal\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpIamAuthorizer()\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"), &httpApiProps{\n\tdefaultAuthorizer: authorizer,\n})\n\nroutes := httpApi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books/{book}\"),\n})\n\nroutes[0].grantInvoke(principal)",
          "version": "1"
        },
        "$": {
          "source": "import { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const principal: iam.AnyPrincipal;\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpIamAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpIamAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRoute#grantInvoke",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-iam.IGrantable",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpIamAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const principal: iam.AnyPrincipal;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpIamAuthorizer();\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n});\n\nconst routes = httpApi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{book}',\n});\n\nroutes[0].grantInvoke(principal);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "195": 1,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bfb779417b62f58a60ec0ee5e0aa15c41a19a3b4df21cbb522b04ea9d2f63b5d"
    },
    "cbfec44c94c4673ecced1acdee3ade0869a540efa21bdd208fd42623280092fe": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"BooksAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"BooksAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"BooksAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nissuer := \"https://test.us.auth0.com\"\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpJwtAuthorizer(jsii.String(\"BooksAuthorizer\"), issuer, &httpJwtAuthorizerProps{\n\tjwtAudience: []*string{\n\t\tjsii.String(\"3131231\"),\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a680c10c16120472c337456c060d2ace2ad87e42d834cd7a442096f18963561e"
    },
    "e430e85ed5061710dab7457ca05a0457605540a394859ec0342ebb328ec7b47f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"BooksAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"BooksAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"BooksAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nissuer := \"https://test.us.auth0.com\"\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpJwtAuthorizer(jsii.String(\"BooksAuthorizer\"), issuer, &httpJwtAuthorizerProps{\n\tjwtAudience: []*string{\n\t\tjsii.String(\"3131231\"),\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('BooksAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a680c10c16120472c337456c060d2ace2ad87e42d834cd7a442096f18963561e"
    },
    "484c06ec431643267ca942d0d194cbde389f9d3d0576f9e2223e29ff9a6ba967": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n// This function handles your auth logic\nvar authHandler function\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpLambdaAuthorizer(jsii.String(\"BooksAuthorizer\"), authHandler, &httpLambdaAuthorizerProps{\n\tresponseTypes: []httpLambdaResponseType{\n\t\t*awscdkawsapigatewayv2authorizers.HttpLambdaResponseType_SIMPLE,\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "35b36c026a4663439e35992e9de3858b29837096edbb3d444a217d860bc79b6f"
    },
    "9292d9c69191e21b6fa8f3fbaf28175b92e85c24724da42a138d02758a93fb52": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n// This function handles your auth logic\nvar authHandler function\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpLambdaAuthorizer(jsii.String(\"BooksAuthorizer\"), authHandler, &httpLambdaAuthorizerProps{\n\tresponseTypes: []httpLambdaResponseType{\n\t\t*awscdkawsapigatewayv2authorizers.HttpLambdaResponseType_SIMPLE,\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "35b36c026a4663439e35992e9de3858b29837096edbb3d444a217d860bc79b6f"
    },
    "825b0e58bcc1cb9c8f0ad839b1da0d2d3b3d361c74bf958f841d4c190a483288": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\nfrom aws_cdk.aws_apigatewayv2_authorizers import HttpUserPoolAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauthorizer = HttpUserPoolAuthorizer(\"BooksAuthorizer\", user_pool)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\nusing Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpUserPoolAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nHttpUserPoolAuthorizer authorizer = new HttpUserPoolAuthorizer(\"BooksAuthorizer\", userPool);\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import cognito \"github.com/aws-samples/dummy/awscdkawscognito\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nuserPool := cognito.NewUserPool(this, jsii.String(\"UserPool\"))\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpUserPoolAuthorizer(jsii.String(\"BooksAuthorizer\"), userPool)\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport { HttpUserPoolAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst authorizer = new HttpUserPoolAuthorizer('BooksAuthorizer', userPool);\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5c3ccd044dcd378082b288a6013749d4999f2732b907ad823c55256d73b33c2e"
    },
    "32e36e837e63aff68224c67c901f388149ff65b51e6303b3d1835703bbbaa7c2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_authorizers as apigatewayv2_authorizers\nimport aws_cdk.aws_cognito as cognito\n\n# user_pool_client: cognito.UserPoolClient\n\nhttp_user_pool_authorizer_props = apigatewayv2_authorizers.HttpUserPoolAuthorizerProps(\n    authorizer_name=\"authorizerName\",\n    identity_source=[\"identitySource\"],\n    user_pool_clients=[user_pool_client],\n    user_pool_region=\"userPoolRegion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.Cognito;\n\nUserPoolClient userPoolClient;\n\nHttpUserPoolAuthorizerProps httpUserPoolAuthorizerProps = new HttpUserPoolAuthorizerProps {\n    AuthorizerName = \"authorizerName\",\n    IdentitySource = new [] { \"identitySource\" },\n    UserPoolClients = new [] { userPoolClient },\n    UserPoolRegion = \"userPoolRegion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.*;\nimport software.amazon.awscdk.services.cognito.*;\n\nUserPoolClient userPoolClient;\n\nHttpUserPoolAuthorizerProps httpUserPoolAuthorizerProps = HttpUserPoolAuthorizerProps.builder()\n        .authorizerName(\"authorizerName\")\n        .identitySource(List.of(\"identitySource\"))\n        .userPoolClients(List.of(userPoolClient))\n        .userPoolRegion(\"userPoolRegion\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2_authorizers \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport cognito \"github.com/aws-samples/dummy/awscdkawscognito\"\n\nvar userPoolClient userPoolClient\n\nhttpUserPoolAuthorizerProps := &httpUserPoolAuthorizerProps{\n\tauthorizerName: jsii.String(\"authorizerName\"),\n\tidentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n\tuserPoolClients: []iUserPoolClient{\n\t\tuserPoolClient,\n\t},\n\tuserPoolRegion: jsii.String(\"userPoolRegion\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const userPoolClient: cognito.UserPoolClient;\nconst httpUserPoolAuthorizerProps: apigatewayv2_authorizers.HttpUserPoolAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n  userPoolClients: [userPoolClient],\n  userPoolRegion: 'userPoolRegion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpUserPoolAuthorizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const userPoolClient: cognito.UserPoolClient;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpUserPoolAuthorizerProps: apigatewayv2_authorizers.HttpUserPoolAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n  userPoolClients: [userPoolClient],\n  userPoolRegion: 'userPoolRegion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "afbdb4d4b677b17f92ba539b1aedeabf246f683cf9a4bc98d07d2cfd7f175f2a"
    },
    "6f572ff88ec73bee0671d748ebb1c84a3a6126a87f9506182529049ffd18543e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import WebSocketLambdaAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n# This function handles your WebSocket requests\n# handler: lambda.Function\n\n\nauthorizer = WebSocketLambdaAuthorizer(\"Authorizer\", auth_handler)\n\nintegration = WebSocketLambdaIntegration(\"Integration\", handler)\n\napigwv2.WebSocketApi(self, \"WebSocketApi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(\n        integration=integration,\n        authorizer=authorizer\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nnew WebSocketApi(this, \"WebSocketApi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions {\n        Integration = integration,\n        Authorizer = authorizer\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.WebSocketLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n// This function handles your WebSocket requests\nFunction handler;\n\n\nWebSocketLambdaAuthorizer authorizer = new WebSocketLambdaAuthorizer(\"Authorizer\", authHandler);\n\nWebSocketLambdaIntegration integration = new WebSocketLambdaIntegration(\"Integration\", handler);\n\nWebSocketApi.Builder.create(this, \"WebSocketApi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder()\n                .integration(integration)\n                .authorizer(authorizer)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n// This function handles your auth logic\nvar authHandler function\n\n// This function handles your WebSocket requests\nvar handler function\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewWebSocketLambdaAuthorizer(jsii.String(\"Authorizer\"), authHandler)\n\nintegration := awscdkawsapigatewayv2integrations.NewWebSocketLambdaIntegration(jsii.String(\"Integration\"), handler)\n\napigwv2.NewWebSocketApi(this, jsii.String(\"WebSocketApi\"), &webSocketApiProps{\n\tconnectRouteOptions: &webSocketRouteOptions{\n\t\tintegration: integration,\n\t\tauthorizer: authorizer,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketRouteAuthorizer",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\n// This function handles your WebSocket requests\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new WebSocketLambdaAuthorizer('Authorizer', authHandler);\n\nconst integration = new WebSocketLambdaIntegration(\n  'Integration',\n  handler,\n);\n\nnew apigwv2.WebSocketApi(this, 'WebSocketApi', {\n  connectRouteOptions: {\n    integration,\n    authorizer,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c19dc9b7433549bbf4868fa583cd7234c820c0f7607e809281fe3831e98ea0e0"
    },
    "039ff477375306e678192c424c530ae423129d262dc2774a209ea6fd4f009b95": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_authorizers as apigatewayv2_authorizers\n\nweb_socket_lambda_authorizer_props = apigatewayv2_authorizers.WebSocketLambdaAuthorizerProps(\n    authorizer_name=\"authorizerName\",\n    identity_source=[\"identitySource\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2.Authorizers;\n\nWebSocketLambdaAuthorizerProps webSocketLambdaAuthorizerProps = new WebSocketLambdaAuthorizerProps {\n    AuthorizerName = \"authorizerName\",\n    IdentitySource = new [] { \"identitySource\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.*;\n\nWebSocketLambdaAuthorizerProps webSocketLambdaAuthorizerProps = WebSocketLambdaAuthorizerProps.builder()\n        .authorizerName(\"authorizerName\")\n        .identitySource(List.of(\"identitySource\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2_authorizers \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\n\nwebSocketLambdaAuthorizerProps := &webSocketLambdaAuthorizerProps{\n\tauthorizerName: jsii.String(\"authorizerName\"),\n\tidentitySource: []*string{\n\t\tjsii.String(\"identitySource\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers from '@aws-cdk/aws-apigatewayv2-authorizers';\nconst webSocketLambdaAuthorizerProps: apigatewayv2_authorizers.WebSocketLambdaAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.WebSocketLambdaAuthorizerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_authorizers from '@aws-cdk/aws-apigatewayv2-authorizers';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketLambdaAuthorizerProps: apigatewayv2_authorizers.WebSocketLambdaAuthorizerProps = {\n  authorizerName: 'authorizerName',\n  identitySource: ['identitySource'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1b23adbbad456db3e8db5c848eedc6f807c3e6bfbfa2f70caf1b29a902c93ff5"
    }
  }
}