{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-ec2": "1.169.0",
    "@aws-cdk/aws-iam": "1.169.0",
    "@aws-cdk/aws-kms": "1.169.0",
    "@aws-cdk/core": "1.169.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::Neptune",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.63.2 (build a8a8833)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "aws-neptune"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-neptune",
  "readme": {
    "markdown": "# Amazon Neptune Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n> All classes with the `Cfn` prefix in this module ([CFN Resources]) are always stable and safe to use.\n>\n> [CFN Resources]: https://docs.aws.amazon.com/cdk/latest/guide/constructs.html#constructs_lib\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nAmazon Neptune is a fast, reliable, fully managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Neptune is a purpose-built, high-performance graph database engine. This engine is optimized for storing billions of relationships and querying the graph with milliseconds latency. Neptune supports the popular graph query languages Apache TinkerPop Gremlin and W3C’s SPARQL, enabling you to build queries that efficiently navigate highly connected datasets.\n\nThe `@aws-cdk/aws-neptune` package contains primitives for setting up Neptune database clusters and instances.\n\n```ts nofixture\nimport * as neptune from '@aws-cdk/aws-neptune';\n```\n\n## Starting a Neptune Database\n\nTo set up a Neptune database, define a `DatabaseCluster`. You must always launch a database in a VPC.\n\n```ts\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n});\n```\n\nBy default only writer instance is provisioned with this construct.\n\n## Connecting\n\nTo control who can access the cluster, use the `.connections` attribute. Neptune databases have a default port, so\nyou don't need to specify the port:\n\n```ts fixture=with-cluster\ncluster.connections.allowDefaultPortFromAnyIpv4('Open to the world');\n```\n\nThe endpoints to access your database cluster will be available as the `.clusterEndpoint` and `.clusterReadEndpoint`\nattributes:\n\n```ts fixture=with-cluster\nconst writeAddress = cluster.clusterEndpoint.socketAddress;   // \"HOSTNAME:PORT\"\n```\n\n## IAM Authentication\n\nYou can also authenticate to a database cluster using AWS Identity and Access Management (IAM) database authentication;\nSee <https://docs.aws.amazon.com/neptune/latest/userguide/iam-auth.html> for more information and a list of supported\nversions and limitations.\n\nThe following example shows enabling IAM authentication for a database cluster and granting connection access to an IAM role.\n\n```ts\nconst cluster = new neptune.DatabaseCluster(this, 'Cluster', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ncluster.grantConnect(role); // Grant the role connection access to the DB.\n```\n\n## Customizing parameters\n\nNeptune allows configuring database behavior by supplying custom parameter groups.  For more details, refer to the\nfollowing link: <https://docs.aws.amazon.com/neptune/latest/userguide/parameters.html>\n\n```ts\nconst clusterParams = new neptune.ClusterParameterGroup(this, 'ClusterParams', {\n  description: 'Cluster parameter group',\n  parameters: {\n    neptune_enable_audit_log: '1'\n  },\n});\n\nconst dbParams = new neptune.ParameterGroup(this, 'DbParams', {\n  description: 'Db parameter group',\n  parameters: {\n    neptune_query_timeout: '120000',\n  },\n});\n\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  clusterParameterGroup: clusterParams,\n  parameterGroup: dbParams,\n});\n```\n\n## Adding replicas\n\n`DatabaseCluster` allows launching replicas along with the writer instance. This can be specified using the `instanceCount`\nattribute.\n\n```ts\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  instances: 2,\n});\n```\n\nAdditionally it is also possible to add replicas using `DatabaseInstance` for an existing cluster.\n\n```ts fixture=with-cluster\nconst replica1 = new neptune.DatabaseInstance(this, 'Instance', {\n  cluster,\n  instanceType: neptune.InstanceType.R5_LARGE,\n});\n```\n\n## Automatic minor version upgrades\n\nBy setting `autoMinorVersionUpgrade` to true, Neptune will automatically update\nthe engine of the entire cluster to the latest minor version after a stabilization\nwindow of 2 to 3 weeks.\n\n```ts\nnew neptune.DatabaseCluster(this, 'Cluster', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  autoMinorVersionUpgrade: true,\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-neptune",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Neptune",
      "packageId": "Amazon.CDK.AWS.Neptune"
    },
    "java": {
      "maven": {
        "artifactId": "neptune",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.neptune"
    },
    "js": {
      "npm": "@aws-cdk/aws-neptune"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-neptune",
      "module": "aws_cdk.aws_neptune"
    }
  },
  "types": {
    "@aws-cdk/aws-neptune.CfnDBCluster": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Neptune::DBCluster",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Neptune::DBCluster` resource creates an Amazon Neptune DB cluster. Neptune is a fully managed graph database.\n\n> Currently, you can create this resource only in AWS Regions in which Amazon Neptune is supported.\n\nIf no `DeletionPolicy` is set for `AWS::Neptune::DBCluster` resources, the default deletion behavior is that the entire volume will be deleted without a snapshot. To retain a backup of the volume, the `DeletionPolicy` should be set to `Snapshot` . For more information about how AWS CloudFormation deletes resources, see [DeletionPolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html) .\n\nYou can use `AWS::Neptune::DBCluster.DeletionProtection` to help guard against unintended deletion of your DB cluster.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Neptune::DBCluster`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst cfnDBCluster = new neptune.CfnDBCluster(this, 'MyCfnDBCluster', /* all optional props */ {\n  associatedRoles: [{\n    roleArn: 'roleArn',\n\n    // the properties below are optional\n    featureName: 'featureName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  backupRetentionPeriod: 123,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  engineVersion: 'engineVersion',\n  iamAuthEnabled: false,\n  kmsKeyId: 'kmsKeyId',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  restoreToTime: 'restoreToTime',\n  restoreType: 'restoreType',\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n});"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBCluster",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Neptune::DBCluster`."
        },
        "locationInModule": {
          "filename": "lib/neptune.generated.ts",
          "line": 570
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-neptune.CfnDBClusterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 330
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 612
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 644
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDBCluster",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 334
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ClusterResourceId"
            },
            "remarks": "For example: `cluster-ABCD1234EFGH5678IJKL90MNOP` . The cluster ID uniquely identifies the cluster and is used in things like IAM authentication policies.",
            "stability": "external",
            "summary": "The resource id for the DB cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 359
          },
          "name": "attrClusterResourceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Endpoint"
            },
            "remarks": "For example: `mystack-mydbcluster-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com`",
            "stability": "external",
            "summary": "The connection endpoint for the DB cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 365
          },
          "name": "attrEndpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Port"
            },
            "remarks": "For example: `8182` .",
            "stability": "external",
            "summary": "The port number on which the DB cluster accepts connections."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 371
          },
          "name": "attrPort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ReadEndpoint"
            },
            "remarks": "For example: `mystack-mydbcluster-ro-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com`",
            "stability": "external",
            "summary": "The reader endpoint for the DB cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 377
          },
          "name": "attrReadEndpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 617
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-tags"
            },
            "stability": "external",
            "summary": "The tags assigned to this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 543
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-associatedroles"
            },
            "remarks": "IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon services on your behalf.",
            "stability": "external",
            "summary": "Provides a list of the Amazon Identity and Access Management (IAM) roles that are associated with the DB cluster."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 384
          },
          "name": "associatedRoles",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-neptune.CfnDBCluster.DBClusterRoleProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-availabilityzones"
            },
            "stability": "external",
            "summary": "Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 391
          },
          "name": "availabilityZones",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-backupretentionperiod"
            },
            "remarks": "An update may require some interruption. See [ModifyDBInstance](https://docs.aws.amazon.com/neptune/latest/userguide/api-instances.html#ModifyDBInstance) in the Amazon Neptune User Guide for more information.",
            "stability": "external",
            "summary": "Specifies the number of days for which automatic DB snapshots are retained."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 400
          },
          "name": "backupRetentionPeriod",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-dbclusteridentifier"
            },
            "remarks": "This identifier is the unique key that identifies a DB cluster.",
            "stability": "external",
            "summary": "Contains a user-supplied DB cluster identifier."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 407
          },
          "name": "dbClusterIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-dbclusterparametergroupname"
            },
            "remarks": "An update may require some interruption. See [ModifyDBInstance](https://docs.aws.amazon.com/neptune/latest/userguide/api-instances.html#ModifyDBInstance) in the Amazon Neptune User Guide for more information.",
            "stability": "external",
            "summary": "Provides the name of the DB cluster parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 416
          },
          "name": "dbClusterParameterGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-dbsubnetgroupname"
            },
            "stability": "external",
            "summary": "Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 423
          },
          "name": "dbSubnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-deletionprotection"
            },
            "remarks": "The database can't be deleted when deletion protection is enabled.",
            "stability": "external",
            "summary": "Indicates whether or not the DB cluster has deletion protection enabled."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 430
          },
          "name": "deletionProtection",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-enablecloudwatchlogsexports"
            },
            "stability": "external",
            "summary": "Specifies a list of log types that are enabled for export to CloudWatch Logs."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 437
          },
          "name": "enableCloudwatchLogsExports",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-engineversion"
            },
            "stability": "external",
            "summary": "Indicates the database engine version."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 444
          },
          "name": "engineVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-iamauthenabled"
            },
            "stability": "external",
            "summary": "True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 451
          },
          "name": "iamAuthEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-kmskeyid"
            },
            "stability": "external",
            "summary": "If `StorageEncrypted` is true, the Amazon KMS key identifier for the encrypted DB cluster."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 458
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-port"
            },
            "stability": "external",
            "summary": "Specifies the port that the database engine is listening on."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 465
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-preferredbackupwindow"
            },
            "remarks": "An update may require some interruption.",
            "stability": "external",
            "summary": "Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the `BackupRetentionPeriod` ."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 474
          },
          "name": "preferredBackupWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-preferredmaintenancewindow"
            },
            "stability": "external",
            "summary": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 481
          },
          "name": "preferredMaintenanceWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-restoretotime"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 492
          },
          "name": "restoreToTime",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-restoretype"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 503
          },
          "name": "restoreType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-snapshotidentifier"
            },
            "remarks": "After you restore a DB cluster using a `SnapshotIdentifier` , you must specify the same `SnapshotIdentifier` for any future updates to the DB cluster. When you specify this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed.\n\nHowever, if you don't specify the `SnapshotIdentifier` , an empty DB cluster is created, and the original DB cluster is deleted. If you specify a property that is different from the previous snapshot restore property, the DB cluster is restored from the snapshot specified by the `SnapshotIdentifier` , and the original DB cluster is deleted.",
            "stability": "external",
            "summary": "Specifies the identifier for a DB cluster snapshot. Must match the identifier of an existing snapshot."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 514
          },
          "name": "snapshotIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-sourcedbclusteridentifier"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 525
          },
          "name": "sourceDbClusterIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-storageencrypted"
            },
            "remarks": "If you specify the `DBClusterIdentifier` , `DBSnapshotIdentifier` , or `SourceDBInstanceIdentifier` property, don't specify this property. The value is inherited from the cluster, snapshot, or source DB instance. If you specify the `KmsKeyId` property, you must enable encryption.\n\nIf you specify the `KmsKeyId` , you must enable encryption by setting `StorageEncrypted` to true.",
            "stability": "external",
            "summary": "Indicates whether the DB cluster is encrypted."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 536
          },
          "name": "storageEncrypted",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-uselatestrestorabletime"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 554
          },
          "name": "useLatestRestorableTime",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-vpcsecuritygroupids"
            },
            "stability": "external",
            "summary": "Provides a list of VPC security groups that the DB cluster belongs to."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 561
          },
          "name": "vpcSecurityGroupIds",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBCluster"
    },
    "@aws-cdk/aws-neptune.CfnDBCluster.DBClusterRoleProperty": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-neptune-dbcluster-dbclusterrole.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Describes an Amazon Identity and Access Management (IAM) role that is associated with a DB cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst dBClusterRoleProperty: neptune.CfnDBCluster.DBClusterRoleProperty = {\n  roleArn: 'roleArn',\n\n  // the properties below are optional\n  featureName: 'featureName',\n};"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBCluster.DBClusterRoleProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 658
      },
      "name": "DBClusterRoleProperty",
      "namespace": "CfnDBCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-neptune-dbcluster-dbclusterrole.html#cfn-neptune-dbcluster-dbclusterrole-rolearn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 670
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-neptune-dbcluster-dbclusterrole.html#cfn-neptune-dbcluster-dbclusterrole-featurename"
            },
            "remarks": "For the list of supported feature names, see [DescribeDBEngineVersions](https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions) .",
            "stability": "external",
            "summary": "The name of the feature associated with the Amazon Identity and Access Management (IAM) role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 664
          },
          "name": "featureName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBCluster.DBClusterRoleProperty"
    },
    "@aws-cdk/aws-neptune.CfnDBClusterParameterGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Neptune::DBClusterParameterGroup",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Neptune::DBClusterParameterGroup` resource creates a new Amazon Neptune DB cluster parameter group.\n\n> Applying a parameter group to a DB cluster might require instances to reboot, resulting in a database outage while the instances reboot.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Neptune::DBClusterParameterGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\n\ndeclare const parameters: any;\nconst cfnDBClusterParameterGroup = new neptune.CfnDBClusterParameterGroup(this, 'MyCfnDBClusterParameterGroup', {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBClusterParameterGroup",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Neptune::DBClusterParameterGroup`."
        },
        "locationInModule": {
          "filename": "lib/neptune.generated.ts",
          "line": 919
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.CfnDBClusterParameterGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 848
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 938
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 953
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDBClusterParameterGroup",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 852
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 943
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-tags"
            },
            "stability": "external",
            "summary": "The tags that you want to attach to this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 910
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-description"
            },
            "stability": "external",
            "summary": "Provides the customer-specified description for this DB cluster parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 878
          },
          "name": "description",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-family"
            },
            "stability": "external",
            "summary": "Must be `neptune1` ."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 885
          },
          "name": "family",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-parameters"
            },
            "remarks": "The parameters are expressed as a JSON object consisting of key-value pairs.\n\nIf you update the parameters, some interruption may occur depending on which parameters you update.",
            "stability": "external",
            "summary": "The parameters to set for this DB cluster parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 896
          },
          "name": "parameters",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-name"
            },
            "stability": "external",
            "summary": "Provides the name of the DB cluster parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 903
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBClusterParameterGroup"
    },
    "@aws-cdk/aws-neptune.CfnDBClusterParameterGroupProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDBClusterParameterGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\n\ndeclare const parameters: any;\nconst cfnDBClusterParameterGroupProps: neptune.CfnDBClusterParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBClusterParameterGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 734
      },
      "name": "CfnDBClusterParameterGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-description"
            },
            "stability": "external",
            "summary": "Provides the customer-specified description for this DB cluster parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 741
          },
          "name": "description",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-family"
            },
            "stability": "external",
            "summary": "Must be `neptune1` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 748
          },
          "name": "family",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-parameters"
            },
            "remarks": "The parameters are expressed as a JSON object consisting of key-value pairs.\n\nIf you update the parameters, some interruption may occur depending on which parameters you update.",
            "stability": "external",
            "summary": "The parameters to set for this DB cluster parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 759
          },
          "name": "parameters",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-name"
            },
            "stability": "external",
            "summary": "Provides the name of the DB cluster parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 766
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html#cfn-neptune-dbclusterparametergroup-tags"
            },
            "stability": "external",
            "summary": "The tags that you want to attach to this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 773
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBClusterParameterGroupProps"
    },
    "@aws-cdk/aws-neptune.CfnDBClusterProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDBCluster`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst cfnDBClusterProps: neptune.CfnDBClusterProps = {\n  associatedRoles: [{\n    roleArn: 'roleArn',\n\n    // the properties below are optional\n    featureName: 'featureName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  backupRetentionPeriod: 123,\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbClusterParameterGroupName: 'dbClusterParameterGroupName',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  deletionProtection: false,\n  enableCloudwatchLogsExports: ['enableCloudwatchLogsExports'],\n  engineVersion: 'engineVersion',\n  iamAuthEnabled: false,\n  kmsKeyId: 'kmsKeyId',\n  port: 123,\n  preferredBackupWindow: 'preferredBackupWindow',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  restoreToTime: 'restoreToTime',\n  restoreType: 'restoreType',\n  snapshotIdentifier: 'snapshotIdentifier',\n  sourceDbClusterIdentifier: 'sourceDbClusterIdentifier',\n  storageEncrypted: false,\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  useLatestRestorableTime: false,\n  vpcSecurityGroupIds: ['vpcSecurityGroupIds'],\n};"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBClusterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 19
      },
      "name": "CfnDBClusterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-associatedroles"
            },
            "remarks": "IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon services on your behalf.",
            "stability": "external",
            "summary": "Provides a list of the Amazon Identity and Access Management (IAM) roles that are associated with the DB cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 26
          },
          "name": "associatedRoles",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-neptune.CfnDBCluster.DBClusterRoleProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-availabilityzones"
            },
            "stability": "external",
            "summary": "Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 33
          },
          "name": "availabilityZones",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-backupretentionperiod"
            },
            "remarks": "An update may require some interruption. See [ModifyDBInstance](https://docs.aws.amazon.com/neptune/latest/userguide/api-instances.html#ModifyDBInstance) in the Amazon Neptune User Guide for more information.",
            "stability": "external",
            "summary": "Specifies the number of days for which automatic DB snapshots are retained."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 42
          },
          "name": "backupRetentionPeriod",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-dbclusteridentifier"
            },
            "remarks": "This identifier is the unique key that identifies a DB cluster.",
            "stability": "external",
            "summary": "Contains a user-supplied DB cluster identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 49
          },
          "name": "dbClusterIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-dbclusterparametergroupname"
            },
            "remarks": "An update may require some interruption. See [ModifyDBInstance](https://docs.aws.amazon.com/neptune/latest/userguide/api-instances.html#ModifyDBInstance) in the Amazon Neptune User Guide for more information.",
            "stability": "external",
            "summary": "Provides the name of the DB cluster parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 58
          },
          "name": "dbClusterParameterGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-dbsubnetgroupname"
            },
            "stability": "external",
            "summary": "Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 65
          },
          "name": "dbSubnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-deletionprotection"
            },
            "remarks": "The database can't be deleted when deletion protection is enabled.",
            "stability": "external",
            "summary": "Indicates whether or not the DB cluster has deletion protection enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 72
          },
          "name": "deletionProtection",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-enablecloudwatchlogsexports"
            },
            "stability": "external",
            "summary": "Specifies a list of log types that are enabled for export to CloudWatch Logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 79
          },
          "name": "enableCloudwatchLogsExports",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-engineversion"
            },
            "stability": "external",
            "summary": "Indicates the database engine version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 86
          },
          "name": "engineVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-iamauthenabled"
            },
            "stability": "external",
            "summary": "True if mapping of Amazon Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 93
          },
          "name": "iamAuthEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-kmskeyid"
            },
            "stability": "external",
            "summary": "If `StorageEncrypted` is true, the Amazon KMS key identifier for the encrypted DB cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 100
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-port"
            },
            "stability": "external",
            "summary": "Specifies the port that the database engine is listening on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 107
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-preferredbackupwindow"
            },
            "remarks": "An update may require some interruption.",
            "stability": "external",
            "summary": "Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the `BackupRetentionPeriod` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 116
          },
          "name": "preferredBackupWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-preferredmaintenancewindow"
            },
            "stability": "external",
            "summary": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 123
          },
          "name": "preferredMaintenanceWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-restoretotime"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 134
          },
          "name": "restoreToTime",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-restoretype"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 145
          },
          "name": "restoreType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-snapshotidentifier"
            },
            "remarks": "After you restore a DB cluster using a `SnapshotIdentifier` , you must specify the same `SnapshotIdentifier` for any future updates to the DB cluster. When you specify this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed.\n\nHowever, if you don't specify the `SnapshotIdentifier` , an empty DB cluster is created, and the original DB cluster is deleted. If you specify a property that is different from the previous snapshot restore property, the DB cluster is restored from the snapshot specified by the `SnapshotIdentifier` , and the original DB cluster is deleted.",
            "stability": "external",
            "summary": "Specifies the identifier for a DB cluster snapshot. Must match the identifier of an existing snapshot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 156
          },
          "name": "snapshotIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-sourcedbclusteridentifier"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 167
          },
          "name": "sourceDbClusterIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-storageencrypted"
            },
            "remarks": "If you specify the `DBClusterIdentifier` , `DBSnapshotIdentifier` , or `SourceDBInstanceIdentifier` property, don't specify this property. The value is inherited from the cluster, snapshot, or source DB instance. If you specify the `KmsKeyId` property, you must enable encryption.\n\nIf you specify the `KmsKeyId` , you must enable encryption by setting `StorageEncrypted` to true.",
            "stability": "external",
            "summary": "Indicates whether the DB cluster is encrypted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 178
          },
          "name": "storageEncrypted",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-tags"
            },
            "stability": "external",
            "summary": "The tags assigned to this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 185
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-uselatestrestorabletime"
            },
            "remarks": "If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.\n\nIf a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.",
            "stability": "external",
            "summary": "Creates a new DB cluster from a DB snapshot or DB cluster snapshot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 196
          },
          "name": "useLatestRestorableTime",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html#cfn-neptune-dbcluster-vpcsecuritygroupids"
            },
            "stability": "external",
            "summary": "Provides a list of VPC security groups that the DB cluster belongs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 203
          },
          "name": "vpcSecurityGroupIds",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBClusterProps"
    },
    "@aws-cdk/aws-neptune.CfnDBInstance": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Neptune::DBInstance",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Neptune::DBInstance` type creates an Amazon Neptune DB instance.\n\n*Updating DB Instances*\n\nYou can set a deletion policy for your DB instance to control how AWS CloudFormation handles the instance when the stack is deleted. For Neptune DB instances, you can choose to *retain* the instance, to *delete* the instance, or to *create a snapshot* of the instance. The default AWS CloudFormation behavior depends on the `DBClusterIdentifier` property:\n\n- For `AWS::Neptune::DBInstance` resources that don't specify the `DBClusterIdentifier` property, AWS CloudFormation saves a snapshot of the DB instance.\n- For `AWS::Neptune::DBInstance` resources that do specify the `DBClusterIdentifier` property, AWS CloudFormation deletes the DB instance.\n\n*Deleting DB Instances*\n\n> If a DB instance is deleted or replaced during an update, AWS CloudFormation deletes all automated snapshots. However, it retains manual DB snapshots. During an update that requires replacement, you can apply a stack policy to prevent DB instances from being replaced.\n\nWhen properties labeled *Update requires: Replacement* are updated, AWS CloudFormation first creates a replacement DB instance, changes references from other dependent resources to point to the replacement DB instance, and finally deletes the old DB instance.\n\n> We highly recommend that you take a snapshot of the database before updating the stack. If you don't, you lose the data when AWS CloudFormation replaces your DB instance. To preserve your data, perform the following procedure:\n>\n> - Deactivate any applications that are using the DB instance so that there's no activity on the DB instance.\n> - Create a snapshot of the DB instance.\n> - If you want to restore your instance using a DB snapshot, modify the updated template with your DB instance changes and add the `DBSnapshotIdentifier` property with the ID of the DB snapshot that you want to use.\n> - Update the stack.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Neptune::DBInstance`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst cfnDBInstance = new neptune.CfnDBInstance(this, 'MyCfnDBInstance', {\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  allowMajorVersionUpgrade: false,\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  dbParameterGroupName: 'dbParameterGroupName',\n  dbSnapshotIdentifier: 'dbSnapshotIdentifier',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBInstance",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Neptune::DBInstance`."
        },
        "locationInModule": {
          "filename": "lib/neptune.generated.ts",
          "line": 1289
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.CfnDBInstanceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 1160
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1319
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1340
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDBInstance",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1164
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Endpoint"
            },
            "remarks": "For example: `mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com` .",
            "stability": "external",
            "summary": "The connection endpoint for the database."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1189
          },
          "name": "attrEndpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Port"
            },
            "remarks": "For example: `8182` .",
            "stability": "external",
            "summary": "The port number on which the database accepts connections."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1195
          },
          "name": "attrPort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1324
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-tags"
            },
            "stability": "external",
            "summary": "An arbitrary set of tags (key-value pairs) for this DB instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1280
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbinstanceclass"
            },
            "remarks": "If you update this property, some interruptions may occur.",
            "stability": "external",
            "summary": "Contains the name of the compute and memory capacity class of the DB instance."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1204
          },
          "name": "dbInstanceClass",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-allowmajorversionupgrade"
            },
            "remarks": "Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.",
            "stability": "external",
            "summary": "Indicates that major version upgrades are allowed."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1211
          },
          "name": "allowMajorVersionUpgrade",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-autominorversionupgrade"
            },
            "remarks": "When updating this property, some interruptions may occur.",
            "stability": "external",
            "summary": "Indicates that minor version patches are applied automatically."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1220
          },
          "name": "autoMinorVersionUpgrade",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-availabilityzone"
            },
            "stability": "external",
            "summary": "Specifies the name of the Availability Zone the DB instance is located in."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1227
          },
          "name": "availabilityZone",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbclusteridentifier"
            },
            "stability": "external",
            "summary": "If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1234
          },
          "name": "dbClusterIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbinstanceidentifier"
            },
            "remarks": "This identifier is the unique key that identifies a DB instance.",
            "stability": "external",
            "summary": "Contains a user-supplied database identifier."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1241
          },
          "name": "dbInstanceIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbparametergroupname"
            },
            "remarks": "If any of the data members of the referenced parameter group are changed during an update, the DB instance might need to be restarted, which causes some interruption. If the parameter group contains static parameters, whether they were changed or not, an update triggers a reboot.",
            "stability": "external",
            "summary": "The name of an existing DB parameter group or a reference to an AWS::Neptune::DBParameterGroup resource created in the template."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1248
          },
          "name": "dbParameterGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbsnapshotidentifier"
            },
            "remarks": "`AWS::Neptune::DBInstance` does not support restoring from snapshots.\n\n`AWS::Neptune::DBCluster` does support restoring from snapshots.",
            "stability": "external",
            "summary": "This parameter is not supported."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1259
          },
          "name": "dbSnapshotIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbsubnetgroupname"
            },
            "remarks": "If you update this value, the new subnet group must be a subnet group in a new virtual private cloud (VPC).",
            "stability": "external",
            "summary": "A DB subnet group to associate with the DB instance."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1266
          },
          "name": "dbSubnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-preferredmaintenancewindow"
            },
            "stability": "external",
            "summary": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1273
          },
          "name": "preferredMaintenanceWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBInstance"
    },
    "@aws-cdk/aws-neptune.CfnDBInstanceProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDBInstance`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst cfnDBInstanceProps: neptune.CfnDBInstanceProps = {\n  dbInstanceClass: 'dbInstanceClass',\n\n  // the properties below are optional\n  allowMajorVersionUpgrade: false,\n  autoMinorVersionUpgrade: false,\n  availabilityZone: 'availabilityZone',\n  dbClusterIdentifier: 'dbClusterIdentifier',\n  dbInstanceIdentifier: 'dbInstanceIdentifier',\n  dbParameterGroupName: 'dbParameterGroupName',\n  dbSnapshotIdentifier: 'dbSnapshotIdentifier',\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  preferredMaintenanceWindow: 'preferredMaintenanceWindow',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBInstanceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 966
      },
      "name": "CfnDBInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbinstanceclass"
            },
            "remarks": "If you update this property, some interruptions may occur.",
            "stability": "external",
            "summary": "Contains the name of the compute and memory capacity class of the DB instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 975
          },
          "name": "dbInstanceClass",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-allowmajorversionupgrade"
            },
            "remarks": "Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.",
            "stability": "external",
            "summary": "Indicates that major version upgrades are allowed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 982
          },
          "name": "allowMajorVersionUpgrade",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-autominorversionupgrade"
            },
            "remarks": "When updating this property, some interruptions may occur.",
            "stability": "external",
            "summary": "Indicates that minor version patches are applied automatically."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 991
          },
          "name": "autoMinorVersionUpgrade",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-availabilityzone"
            },
            "stability": "external",
            "summary": "Specifies the name of the Availability Zone the DB instance is located in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 998
          },
          "name": "availabilityZone",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbclusteridentifier"
            },
            "stability": "external",
            "summary": "If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1005
          },
          "name": "dbClusterIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbinstanceidentifier"
            },
            "remarks": "This identifier is the unique key that identifies a DB instance.",
            "stability": "external",
            "summary": "Contains a user-supplied database identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1012
          },
          "name": "dbInstanceIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbparametergroupname"
            },
            "remarks": "If any of the data members of the referenced parameter group are changed during an update, the DB instance might need to be restarted, which causes some interruption. If the parameter group contains static parameters, whether they were changed or not, an update triggers a reboot.",
            "stability": "external",
            "summary": "The name of an existing DB parameter group or a reference to an AWS::Neptune::DBParameterGroup resource created in the template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1019
          },
          "name": "dbParameterGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbsnapshotidentifier"
            },
            "remarks": "`AWS::Neptune::DBInstance` does not support restoring from snapshots.\n\n`AWS::Neptune::DBCluster` does support restoring from snapshots.",
            "stability": "external",
            "summary": "This parameter is not supported."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1030
          },
          "name": "dbSnapshotIdentifier",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-dbsubnetgroupname"
            },
            "remarks": "If you update this value, the new subnet group must be a subnet group in a new virtual private cloud (VPC).",
            "stability": "external",
            "summary": "A DB subnet group to associate with the DB instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1037
          },
          "name": "dbSubnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-preferredmaintenancewindow"
            },
            "stability": "external",
            "summary": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1044
          },
          "name": "preferredMaintenanceWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html#cfn-neptune-dbinstance-tags"
            },
            "stability": "external",
            "summary": "An arbitrary set of tags (key-value pairs) for this DB instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1051
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBInstanceProps"
    },
    "@aws-cdk/aws-neptune.CfnDBParameterGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Neptune::DBParameterGroup",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "`AWS::Neptune::DBParameterGroup` creates a new DB parameter group. This type can be declared in a template and referenced in the `DBParameterGroupName` parameter of `AWS::Neptune::DBInstance` .\n\n> Applying a parameter group to a DB instance might require the instance to reboot, resulting in a database outage for the duration of the reboot.\n\nA DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using *ModifyDBParameterGroup* . Once you've created a DB parameter group, you need to associate it with your DB instance using *ModifyDBInstance* . When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.\n\n> After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the `character_set_database` parameter. You can use the *Parameter Groups* option of the Amazon Neptune console or the *DescribeDBParameters* command to verify that your DB parameter group has been created or modified.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Neptune::DBParameterGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\n\ndeclare const parameters: any;\nconst cfnDBParameterGroup = new neptune.CfnDBParameterGroup(this, 'MyCfnDBParameterGroup', {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBParameterGroup",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Neptune::DBParameterGroup`."
        },
        "locationInModule": {
          "filename": "lib/neptune.generated.ts",
          "line": 1542
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.CfnDBParameterGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 1471
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1561
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1576
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDBParameterGroup",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1475
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1566
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-tags"
            },
            "stability": "external",
            "summary": "The tags that you want to attach to this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1533
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-description"
            },
            "stability": "external",
            "summary": "Provides the customer-specified description for this DB parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1501
          },
          "name": "description",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-family"
            },
            "stability": "external",
            "summary": "Must be `neptune1` ."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1508
          },
          "name": "family",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-parameters"
            },
            "remarks": "The parameters are expressed as a JSON object consisting of key-value pairs.\n\nChanges to dynamic parameters are applied immediately. During an update, if you have static parameters (whether they were changed or not), it triggers AWS CloudFormation to reboot the associated DB instance without failover.",
            "stability": "external",
            "summary": "The parameters to set for this DB parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1519
          },
          "name": "parameters",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-name"
            },
            "stability": "external",
            "summary": "Provides the name of the DB parameter group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1526
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBParameterGroup"
    },
    "@aws-cdk/aws-neptune.CfnDBParameterGroupProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDBParameterGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\n\ndeclare const parameters: any;\nconst cfnDBParameterGroupProps: neptune.CfnDBParameterGroupProps = {\n  description: 'description',\n  family: 'family',\n  parameters: parameters,\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBParameterGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 1353
      },
      "name": "CfnDBParameterGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-description"
            },
            "stability": "external",
            "summary": "Provides the customer-specified description for this DB parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1360
          },
          "name": "description",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-family"
            },
            "stability": "external",
            "summary": "Must be `neptune1` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1367
          },
          "name": "family",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-parameters"
            },
            "remarks": "The parameters are expressed as a JSON object consisting of key-value pairs.\n\nChanges to dynamic parameters are applied immediately. During an update, if you have static parameters (whether they were changed or not), it triggers AWS CloudFormation to reboot the associated DB instance without failover.",
            "stability": "external",
            "summary": "The parameters to set for this DB parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1378
          },
          "name": "parameters",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-name"
            },
            "stability": "external",
            "summary": "Provides the name of the DB parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1385
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html#cfn-neptune-dbparametergroup-tags"
            },
            "stability": "external",
            "summary": "The tags that you want to attach to this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1392
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBParameterGroupProps"
    },
    "@aws-cdk/aws-neptune.CfnDBSubnetGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::Neptune::DBSubnetGroup",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::Neptune::DBSubnetGroup` type creates an Amazon Neptune DB subnet group. Subnet groups must contain at least two subnets in two different Availability Zones in the same AWS Region.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::Neptune::DBSubnetGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst cfnDBSubnetGroup = new neptune.CfnDBSubnetGroup(this, 'MyCfnDBSubnetGroup', {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBSubnetGroup",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::Neptune::DBSubnetGroup`."
        },
        "locationInModule": {
          "filename": "lib/neptune.generated.ts",
          "line": 1746
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.CfnDBSubnetGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 1686
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1763
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1777
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnDBSubnetGroup",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1690
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1768
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-tags"
            },
            "stability": "external",
            "summary": "The tags that you want to attach to the DB subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1737
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-dbsubnetgroupdescription"
            },
            "stability": "external",
            "summary": "Provides the description of the DB subnet group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1716
          },
          "name": "dbSubnetGroupDescription",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-subnetids"
            },
            "stability": "external",
            "summary": "The Amazon EC2 subnet IDs for the DB subnet group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1723
          },
          "name": "subnetIds",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-dbsubnetgroupname"
            },
            "stability": "external",
            "summary": "The name of the DB subnet group."
          },
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1730
          },
          "name": "dbSubnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBSubnetGroup"
    },
    "@aws-cdk/aws-neptune.CfnDBSubnetGroupProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnDBSubnetGroup`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst cfnDBSubnetGroupProps: neptune.CfnDBSubnetGroupProps = {\n  dbSubnetGroupDescription: 'dbSubnetGroupDescription',\n  subnetIds: ['subnetIds'],\n\n  // the properties below are optional\n  dbSubnetGroupName: 'dbSubnetGroupName',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-neptune.CfnDBSubnetGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/neptune.generated.ts",
        "line": 1589
      },
      "name": "CfnDBSubnetGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-dbsubnetgroupdescription"
            },
            "stability": "external",
            "summary": "Provides the description of the DB subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1596
          },
          "name": "dbSubnetGroupDescription",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-subnetids"
            },
            "stability": "external",
            "summary": "The Amazon EC2 subnet IDs for the DB subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1603
          },
          "name": "subnetIds",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-dbsubnetgroupname"
            },
            "stability": "external",
            "summary": "The name of the DB subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1610
          },
          "name": "dbSubnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html#cfn-neptune-dbsubnetgroup-tags"
            },
            "stability": "external",
            "summary": "The tags that you want to attach to the DB subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/neptune.generated.ts",
            "line": 1617
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/neptune.generated:CfnDBSubnetGroupProps"
    },
    "@aws-cdk/aws-neptune.ClusterParameterGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "infused",
          "resource": "AWS::Neptune::DBClusterParameterGroup"
        },
        "example": "const clusterParams = new neptune.ClusterParameterGroup(this, 'ClusterParams', {\n  description: 'Cluster parameter group',\n  parameters: {\n    neptune_enable_audit_log: '1'\n  },\n});\n\nconst dbParams = new neptune.ParameterGroup(this, 'DbParams', {\n  description: 'Db parameter group',\n  parameters: {\n    neptune_query_timeout: '120000',\n  },\n});\n\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  clusterParameterGroup: clusterParams,\n  parameterGroup: dbParams,\n});",
        "stability": "experimental",
        "summary": "A cluster parameter group."
      },
      "fqn": "@aws-cdk/aws-neptune.ClusterParameterGroup",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/parameter-group.ts",
          "line": 78
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.ClusterParameterGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-neptune.IClusterParameterGroup"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/parameter-group.ts",
        "line": 62
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Imports a parameter group."
          },
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 66
          },
          "name": "fromClusterParameterGroupName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "clusterParameterGroupName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-neptune.IClusterParameterGroup"
            }
          },
          "static": true
        }
      ],
      "name": "ClusterParameterGroup",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 76
          },
          "name": "clusterParameterGroupName",
          "overrides": "@aws-cdk/aws-neptune.IClusterParameterGroup",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/parameter-group:ClusterParameterGroup"
    },
    "@aws-cdk/aws-neptune.ClusterParameterGroupProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "const clusterParams = new neptune.ClusterParameterGroup(this, 'ClusterParams', {\n  description: 'Cluster parameter group',\n  parameters: {\n    neptune_enable_audit_log: '1'\n  },\n});\n\nconst dbParams = new neptune.ParameterGroup(this, 'DbParams', {\n  description: 'Db parameter group',\n  parameters: {\n    neptune_query_timeout: '120000',\n  },\n});\n\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  clusterParameterGroup: clusterParams,\n  parameterGroup: dbParams,\n});",
        "stability": "experimental",
        "summary": "Marker class for cluster parameter group."
      },
      "fqn": "@aws-cdk/aws-neptune.ClusterParameterGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/parameter-group.ts",
        "line": 25
      },
      "name": "ClusterParameterGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The parameters in this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 19
          },
          "name": "parameters",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "A CDK generated name for the parameter group",
            "stability": "experimental",
            "summary": "The name of the parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 31
          },
          "name": "clusterParameterGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "a CDK generated description",
            "stability": "experimental",
            "summary": "Description for this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 14
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/parameter-group:ClusterParameterGroupProps"
    },
    "@aws-cdk/aws-neptune.DatabaseCluster": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/aws-neptune.DatabaseClusterBase",
      "docs": {
        "custom": {
          "exampleMetadata": "infused",
          "resource": "AWS::Neptune::DBCluster"
        },
        "example": "const cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  instances: 2,\n});",
        "stability": "experimental",
        "summary": "Create a clustered database with a given number of instances."
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseCluster",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/cluster.ts",
          "line": 434
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.DatabaseClusterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-neptune.IDatabaseCluster"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 387
      },
      "name": "DatabaseCluster",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The default number of instances in the Neptune cluster if none are specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 393
          },
          "name": "DEFAULT_NUM_INSTANCES",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The endpoint to use for read/write operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 396
          },
          "name": "clusterEndpoint",
          "overrides": "@aws-cdk/aws-neptune.DatabaseClusterBase",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Identifier of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 395
          },
          "name": "clusterIdentifier",
          "overrides": "@aws-cdk/aws-neptune.DatabaseClusterBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Endpoint to use for load-balanced read-only operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 397
          },
          "name": "clusterReadEndpoint",
          "overrides": "@aws-cdk/aws-neptune.DatabaseClusterBase",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "ClusterResourceId"
            },
            "remarks": "for example: cluster-ABCD1234EFGH5678IJKL90MNOP. The cluster ID uniquely\nidentifies the cluster and is used in things like IAM authentication policies.",
            "stability": "experimental",
            "summary": "The resource id for the cluster;"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 405
          },
          "name": "clusterResourceIdentifier",
          "overrides": "@aws-cdk/aws-neptune.DatabaseClusterBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The connections object to implement IConnectable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 398
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-neptune.DatabaseClusterBase",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Endpoints which address each individual instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 430
          },
          "name": "instanceEndpoints",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-neptune.Endpoint"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Identifiers of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 425
          },
          "name": "instanceIdentifiers",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Subnet group used by the DB."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 420
          },
          "name": "subnetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.ISubnetGroup"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The VPC where the DB subnet group is created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 410
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The subnets used by the DB subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 415
          },
          "name": "vpcSubnets",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 432
          },
          "name": "enableIamAuthentication",
          "optional": true,
          "overrides": "@aws-cdk/aws-neptune.DatabaseClusterBase",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cluster:DatabaseCluster"
    },
    "@aws-cdk/aws-neptune.DatabaseClusterAttributes": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties that describe an existing cluster instance.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as neptune from '@aws-cdk/aws-neptune';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseClusterAttributes: neptune.DatabaseClusterAttributes = {\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  clusterIdentifier: 'clusterIdentifier',\n  clusterResourceIdentifier: 'clusterResourceIdentifier',\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  securityGroup: securityGroup,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseClusterAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 275
      },
      "name": "DatabaseClusterAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Cluster endpoint address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 299
          },
          "name": "clusterEndpointAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Identifier for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 289
          },
          "name": "clusterIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resource Identifier for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 294
          },
          "name": "clusterResourceIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The database port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 279
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Reader endpoint address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 304
          },
          "name": "readerEndpointAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The security group of the database cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 284
          },
          "name": "securityGroup",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
          }
        }
      ],
      "symbolId": "lib/cluster:DatabaseClusterAttributes"
    },
    "@aws-cdk/aws-neptune.DatabaseClusterBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "A new or imported database cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as neptune from '@aws-cdk/aws-neptune';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst databaseClusterBase = neptune.DatabaseClusterBase.fromDatabaseClusterAttributes(this, 'MyDatabaseClusterBase', {\n  clusterEndpointAddress: 'clusterEndpointAddress',\n  clusterIdentifier: 'clusterIdentifier',\n  clusterResourceIdentifier: 'clusterResourceIdentifier',\n  port: 123,\n  readerEndpointAddress: 'readerEndpointAddress',\n  securityGroup: securityGroup,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseClusterBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/core.ResourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-neptune.IDatabaseCluster"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 310
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an existing DatabaseCluster from properties."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 315
          },
          "name": "fromDatabaseClusterAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-neptune.DatabaseClusterAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-neptune.IDatabaseCluster"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Grant the given identity connection access to the database."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 359
          },
          "name": "grantConnect",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseCluster",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        }
      ],
      "name": "DatabaseClusterBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The endpoint to use for read/write operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 345
          },
          "name": "clusterEndpoint",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseCluster",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Identifier of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 335
          },
          "name": "clusterIdentifier",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseCluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Endpoint to use for load-balanced read-only operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 350
          },
          "name": "clusterReadEndpoint",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseCluster",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resource identifier of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 340
          },
          "name": "clusterResourceIdentifier",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseCluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The connections object to implement IConnectable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 355
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 357
          },
          "name": "enableIamAuthentication",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cluster:DatabaseClusterBase"
    },
    "@aws-cdk/aws-neptune.DatabaseClusterProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "const cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  instances: 2,\n});",
        "stability": "experimental",
        "summary": "Properties for a new database cluster."
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseClusterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 68
      },
      "name": "DatabaseClusterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "What type of instance to start for the replicas."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 150
          },
          "name": "instanceType",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be at least 2 subnets in two different AZs.",
            "stability": "experimental",
            "summary": "What subnets to run the Neptune instances in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 204
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No role is attached to the cluster.",
            "stability": "experimental",
            "summary": "A list of AWS Identity and Access Management (IAM) role that can be used by the cluster to access other AWS services."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 157
          },
          "name": "associatedRoles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.IRole"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "If set to true, Neptune will automatically update the engine of the entire cluster to the latest minor version after a stabilization window of 2 to 3 weeks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 236
          },
          "name": "autoMinorVersionUpgrade",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- cdk.Duration.days(1)",
            "stability": "experimental",
            "summary": "How many days to retain the backup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 88
          },
          "name": "backupRetention",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No parameter group.",
            "stability": "experimental",
            "summary": "Additional parameters to pass to the database engine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 183
          },
          "name": "clusterParameterGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.IClusterParameterGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A name is automatically generated.",
            "stability": "experimental",
            "summary": "An optional identifier for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 128
          },
          "name": "dbClusterName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true if ``removalPolicy`` is RETAIN, false otherwise",
            "stability": "experimental",
            "summary": "Indicates whether the DB cluster should have deletion protection enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 164
          },
          "name": "deletionProtection",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The default engine version.",
            "stability": "experimental",
            "summary": "What version of the database to start."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 74
          },
          "name": "engineVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `false`",
            "stability": "experimental",
            "summary": "Map AWS Identity and Access Management (IAM) accounts to database accounts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 135
          },
          "name": "iamAuthentication",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `dbClusterName` is used with the word \"Instance\" appended. If `dbClusterName` is not provided, the\nidentifier is automatically generated.",
            "remarks": "Every replica is named by appending the replica number to this string, 1-based.",
            "stability": "experimental",
            "summary": "Base identifier for instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 145
          },
          "name": "instanceIdentifierBase",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "Number of Neptune compute instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 121
          },
          "name": "instances",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default master key.",
            "stability": "experimental",
            "summary": "The KMS key for storage encryption."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 107
          },
          "name": "kmsKey",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-kms.IKey"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "no parameter group",
            "stability": "experimental",
            "summary": "The DB parameter group to associate with the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 190
          },
          "name": "parameterGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.IParameterGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The default engine port",
            "stability": "experimental",
            "summary": "The port the Neptune cluster will listen on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 81
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a 30-minute window selected at random from an 8-hour block of\ntime for each AWS Region. To see the time blocks available, see",
            "remarks": "Must be at least 30 minutes long.\n\nExample: '01:00-02:00'",
            "stability": "experimental",
            "summary": "A daily time range in 24-hours UTC format in which backups preferably execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 100
          },
          "name": "preferredBackupWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 30-minute window selected at random from an 8-hour block of time for\neach AWS Region, occurring on a random day of the week.",
            "remarks": "Must be at least 30 minutes long.\n\nExample: 'tue:04:17-tue:04:47'",
            "stability": "experimental",
            "summary": "A weekly time range in which maintenance should preferably execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 176
          },
          "name": "preferredMaintenanceWindow",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Retain cluster.",
            "remarks": "This\nremoval policy also applies to the implicit security group created for the\ncluster if one is not supplied as a parameter.",
            "stability": "experimental",
            "summary": "The removal policy to apply when the cluster and its instances are removed or replaced during a stack update, or when the stack is deleted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 228
          },
          "name": "removalPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.RemovalPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "a new security group is created.",
            "stability": "experimental",
            "summary": "Security group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 218
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether to enable storage encryption."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 114
          },
          "name": "storageEncrypted",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new subnet group will be created.",
            "stability": "experimental",
            "summary": "Existing subnet group for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 197
          },
          "name": "subnetGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.ISubnetGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "private subnets",
            "stability": "experimental",
            "summary": "Where to place the instances within the VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 211
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/cluster:DatabaseClusterProps"
    },
    "@aws-cdk/aws-neptune.DatabaseInstance": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "fixture=with-cluster infused",
          "resource": "AWS::Neptune::DBInstance"
        },
        "example": "const replica1 = new neptune.DatabaseInstance(this, 'Instance', {\n  cluster,\n  instanceType: neptune.InstanceType.R5_LARGE,\n});",
        "stability": "experimental",
        "summary": "A database instance."
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseInstance",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/instance.ts",
          "line": 283
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.DatabaseInstanceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-neptune.IDatabaseInstance"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 240
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an existing database instance."
          },
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 245
          },
          "name": "fromDatabaseInstanceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-neptune.DatabaseInstanceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-neptune.IDatabaseInstance"
            }
          },
          "static": true
        }
      ],
      "name": "DatabaseInstance",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The instance's database cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 261
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.IDatabaseCluster"
          }
        },
        {
          "docs": {
            "custom": {
              "inheritdoc": "true"
            },
            "stability": "experimental",
            "summary": "The instance endpoint address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 276
          },
          "name": "dbInstanceEndpointAddress",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseInstance",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "inheritdoc": "true"
            },
            "stability": "experimental",
            "summary": "The instance endpoint port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 281
          },
          "name": "dbInstanceEndpointPort",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseInstance",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "inheritdoc": "true"
            },
            "stability": "experimental",
            "summary": "The instance endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 271
          },
          "name": "instanceEndpoint",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseInstance",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "docs": {
            "custom": {
              "inheritdoc": "true"
            },
            "stability": "experimental",
            "summary": "The instance identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 266
          },
          "name": "instanceIdentifier",
          "overrides": "@aws-cdk/aws-neptune.IDatabaseInstance",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/instance:DatabaseInstance"
    },
    "@aws-cdk/aws-neptune.DatabaseInstanceAttributes": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties that describe an existing instance.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst databaseInstanceAttributes: neptune.DatabaseInstanceAttributes = {\n  instanceEndpointAddress: 'instanceEndpointAddress',\n  instanceIdentifier: 'instanceIdentifier',\n  port: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseInstanceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 173
      },
      "name": "DatabaseInstanceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The endpoint address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 182
          },
          "name": "instanceEndpointAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The instance identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 177
          },
          "name": "instanceIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The database port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 187
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/instance:DatabaseInstanceAttributes"
    },
    "@aws-cdk/aws-neptune.DatabaseInstanceProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "fixture=with-cluster infused"
        },
        "example": "const replica1 = new neptune.DatabaseInstance(this, 'Instance', {\n  cluster,\n  instanceType: neptune.InstanceType.R5_LARGE,\n});",
        "stability": "experimental",
        "summary": "Construction properties for a DatabaseInstanceNew."
      },
      "fqn": "@aws-cdk/aws-neptune.DatabaseInstanceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 193
      },
      "name": "DatabaseInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Neptune database cluster the instance should launch into."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 197
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.IDatabaseCluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "What type of instance to start for the replicas."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 202
          },
          "name": "instanceType",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no preference",
            "stability": "experimental",
            "summary": "The name of the Availability Zone where the DB instance will be located."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 209
          },
          "name": "availabilityZone",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a CloudFormation generated name",
            "remarks": "If you specify a name, AWS CloudFormation\nconverts it to lowercase.",
            "stability": "experimental",
            "summary": "A name for the DB instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 217
          },
          "name": "dbInstanceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "no parameter group",
            "stability": "experimental",
            "summary": "The DB parameter group to associate with the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 224
          },
          "name": "parameterGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.IParameterGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RemovalPolicy.Retain",
            "stability": "experimental",
            "summary": "The CloudFormation policy to apply when the instance is removed from the stack or replaced during an update."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 232
          },
          "name": "removalPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.RemovalPolicy"
          }
        }
      ],
      "symbolId": "lib/instance:DatabaseInstanceProps"
    },
    "@aws-cdk/aws-neptune.Endpoint": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "remarks": "Consists of a combination of hostname and port.",
        "stability": "experimental",
        "summary": "Connection endpoint of a neptune cluster or instance.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst endpoint = new neptune.Endpoint('address', 123);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-neptune.Endpoint",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/endpoint.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "address",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "port",
            "type": {
              "primitive": "number"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/endpoint.ts",
        "line": 8
      },
      "name": "Endpoint",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The hostname of the endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/endpoint.ts",
            "line": 12
          },
          "name": "hostname",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The port of the endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/endpoint.ts",
            "line": 17
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The combination of \"HOSTNAME:PORT\" for this endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/endpoint.ts",
            "line": 22
          },
          "name": "socketAddress",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/endpoint:Endpoint"
    },
    "@aws-cdk/aws-neptune.EngineVersion": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "stability": "experimental",
        "summary": "Possible Instances Types to use in Neptune cluster used for defining {@link DatabaseClusterProps.engineVersion}.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as neptune from '@aws-cdk/aws-neptune';\nconst engineVersion = neptune.EngineVersion.V1_0_1_0;",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-neptune.EngineVersion",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Constructor for specifying a custom engine version."
        },
        "locationInModule": {
          "filename": "lib/cluster.ts",
          "line": 62
        },
        "parameters": [
          {
            "docs": {
              "summary": "the engine version of Neptune."
            },
            "name": "version",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 16
      },
      "name": "EngineVersion",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.1.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 20
          },
          "name": "V1_0_1_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.1.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 24
          },
          "name": "V1_0_1_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.1.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 28
          },
          "name": "V1_0_1_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.2.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 32
          },
          "name": "V1_0_2_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.2.2."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 36
          },
          "name": "V1_0_2_2",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.3.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 40
          },
          "name": "V1_0_3_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.4.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 44
          },
          "name": "V1_0_4_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.4.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 48
          },
          "name": "V1_0_4_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.0.5.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 52
          },
          "name": "V1_0_5_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Neptune engine version 1.1.0.0."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 56
          },
          "name": "V1_1_0_0",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.EngineVersion"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the engine version of Neptune."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 62
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cluster:EngineVersion"
    },
    "@aws-cdk/aws-neptune.IClusterParameterGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "stability": "experimental",
        "summary": "A parameter group."
      },
      "fqn": "@aws-cdk/aws-neptune.IClusterParameterGroup",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/parameter-group.ts",
        "line": 49
      },
      "name": "IClusterParameterGroup",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 53
          },
          "name": "clusterParameterGroupName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/parameter-group:IClusterParameterGroup"
    },
    "@aws-cdk/aws-neptune.IDatabaseCluster": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "stability": "experimental",
        "summary": "Create a clustered database with a given number of instances."
      },
      "fqn": "@aws-cdk/aws-neptune.IDatabaseCluster",
      "interfaces": [
        "@aws-cdk/core.IResource",
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 242
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Grant the given identity connection access to the database."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 269
          },
          "name": "grantConnect",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        }
      ],
      "name": "IDatabaseCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "Endpoint,Port"
            },
            "stability": "experimental",
            "summary": "The endpoint to use for read/write operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 258
          },
          "name": "clusterEndpoint",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Identifier of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 246
          },
          "name": "clusterIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "ReadEndpoint"
            },
            "stability": "experimental",
            "summary": "Endpoint to use for load-balanced read-only operations."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 264
          },
          "name": "clusterReadEndpoint",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "ClusterResourceId"
            },
            "stability": "experimental",
            "summary": "Resource identifier of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 252
          },
          "name": "clusterResourceIdentifier",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cluster:IDatabaseCluster"
    },
    "@aws-cdk/aws-neptune.IDatabaseInstance": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "stability": "experimental",
        "summary": "A database instance."
      },
      "fqn": "@aws-cdk/aws-neptune.IDatabaseInstance",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 144
      },
      "name": "IDatabaseInstance",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "Endpoint"
            },
            "stability": "experimental",
            "summary": "The instance endpoint address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 160
          },
          "name": "dbInstanceEndpointAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "Port"
            },
            "stability": "experimental",
            "summary": "The instance endpoint port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 167
          },
          "name": "dbInstanceEndpointPort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The instance endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 153
          },
          "name": "instanceEndpoint",
          "type": {
            "fqn": "@aws-cdk/aws-neptune.Endpoint"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The instance identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 148
          },
          "name": "instanceIdentifier",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/instance:IDatabaseInstance"
    },
    "@aws-cdk/aws-neptune.IParameterGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "stability": "experimental",
        "summary": "A parameter group."
      },
      "fqn": "@aws-cdk/aws-neptune.IParameterGroup",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/parameter-group.ts",
        "line": 95
      },
      "name": "IParameterGroup",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 99
          },
          "name": "parameterGroupName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/parameter-group:IParameterGroup"
    },
    "@aws-cdk/aws-neptune.ISubnetGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for a subnet group."
      },
      "fqn": "@aws-cdk/aws-neptune.ISubnetGroup",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/subnet-group.ts",
        "line": 9
      },
      "name": "ISubnetGroup",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 14
          },
          "name": "subnetGroupName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/subnet-group:ISubnetGroup"
    },
    "@aws-cdk/aws-neptune.InstanceType": {
      "assembly": "@aws-cdk/aws-neptune",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "const cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  instances: 2,\n});",
        "stability": "experimental",
        "summary": "Possible Instances Types to use in Neptune cluster used for defining {@link DatabaseInstanceProps.instanceType}."
      },
      "fqn": "@aws-cdk/aws-neptune.InstanceType",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Build an InstanceType from given string or token, such as CfnParameter."
          },
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 123
          },
          "name": "of",
          "parameters": [
            {
              "name": "instanceType",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-neptune.InstanceType"
            }
          },
          "static": true
        }
      ],
      "name": "InstanceType",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r4.2xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 103
          },
          "name": "R4_2XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r4.4xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 108
          },
          "name": "R4_4XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r4.8xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 113
          },
          "name": "R4_8XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r4.large."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 93
          },
          "name": "R4_LARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r4.xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 98
          },
          "name": "R4_XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.12xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 83
          },
          "name": "R5_12XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.24xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 88
          },
          "name": "R5_24XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.2xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 68
          },
          "name": "R5_2XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.4xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 73
          },
          "name": "R5_4XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.8xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 78
          },
          "name": "R5_8XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.large."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 58
          },
          "name": "R5_LARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r5.xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 63
          },
          "name": "R5_XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.12xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 43
          },
          "name": "R6G_12XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.16xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 48
          },
          "name": "R6G_16XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.2xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 28
          },
          "name": "R6G_2XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.4xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 33
          },
          "name": "R6G_4XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.8xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 38
          },
          "name": "R6G_8XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.large."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 18
          },
          "name": "R6G_LARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.r6g.xlarge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 23
          },
          "name": "R6G_XLARGE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.t3.medium."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 118
          },
          "name": "T3_MEDIUM",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "db.t4g.medium."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 53
          },
          "name": "T4G_MEDIUM",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-neptune.InstanceType"
          }
        }
      ],
      "symbolId": "lib/instance:InstanceType"
    },
    "@aws-cdk/aws-neptune.ParameterGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "infused",
          "resource": "AWS::Neptune::DBParameterGroup"
        },
        "example": "const clusterParams = new neptune.ClusterParameterGroup(this, 'ClusterParams', {\n  description: 'Cluster parameter group',\n  parameters: {\n    neptune_enable_audit_log: '1'\n  },\n});\n\nconst dbParams = new neptune.ParameterGroup(this, 'DbParams', {\n  description: 'Db parameter group',\n  parameters: {\n    neptune_query_timeout: '120000',\n  },\n});\n\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  clusterParameterGroup: clusterParams,\n  parameterGroup: dbParams,\n});",
        "stability": "experimental",
        "summary": "DB parameter group."
      },
      "fqn": "@aws-cdk/aws-neptune.ParameterGroup",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/parameter-group.ts",
          "line": 123
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.ParameterGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-neptune.IParameterGroup"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/parameter-group.ts",
        "line": 107
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Imports a parameter group."
          },
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 111
          },
          "name": "fromParameterGroupName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "parameterGroupName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-neptune.IParameterGroup"
            }
          },
          "static": true
        }
      ],
      "name": "ParameterGroup",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 121
          },
          "name": "parameterGroupName",
          "overrides": "@aws-cdk/aws-neptune.IParameterGroup",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/parameter-group:ParameterGroup"
    },
    "@aws-cdk/aws-neptune.ParameterGroupProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "const clusterParams = new neptune.ClusterParameterGroup(this, 'ClusterParams', {\n  description: 'Cluster parameter group',\n  parameters: {\n    neptune_enable_audit_log: '1'\n  },\n});\n\nconst dbParams = new neptune.ParameterGroup(this, 'DbParams', {\n  description: 'Db parameter group',\n  parameters: {\n    neptune_query_timeout: '120000',\n  },\n});\n\nconst cluster = new neptune.DatabaseCluster(this, 'Database', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  clusterParameterGroup: clusterParams,\n  parameterGroup: dbParams,\n});",
        "stability": "experimental",
        "summary": "Marker class for cluster parameter group."
      },
      "fqn": "@aws-cdk/aws-neptune.ParameterGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/parameter-group.ts",
        "line": 37
      },
      "name": "ParameterGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The parameters in this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 19
          },
          "name": "parameters",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "a CDK generated description",
            "stability": "experimental",
            "summary": "Description for this parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 14
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "A CDK generated name for the parameter group",
            "stability": "experimental",
            "summary": "The name of the parameter group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/parameter-group.ts",
            "line": 43
          },
          "name": "parameterGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/parameter-group:ParameterGroupProps"
    },
    "@aws-cdk/aws-neptune.SubnetGroup": {
      "assembly": "@aws-cdk/aws-neptune",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Neptune::DBSubnetGroup",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "experimental",
        "summary": "Class for creating a RDS DB subnet group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as neptune from '@aws-cdk/aws-neptune';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst subnetGroup = new neptune.SubnetGroup(this, 'MySubnetGroup', {\n  vpc: vpc,\n\n  // the properties below are optional\n  description: 'description',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  subnetGroupName: 'subnetGroupName',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-neptune.SubnetGroup",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/subnet-group.ts",
          "line": 74
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-neptune.SubnetGroupProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-neptune.ISubnetGroup"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/subnet-group.ts",
        "line": 61
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Imports an existing subnet group by name."
          },
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 66
          },
          "name": "fromSubnetGroupName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "subnetGroupName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-neptune.ISubnetGroup"
            }
          },
          "static": true
        }
      ],
      "name": "SubnetGroup",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 72
          },
          "name": "subnetGroupName",
          "overrides": "@aws-cdk/aws-neptune.ISubnetGroup",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/subnet-group:SubnetGroup"
    },
    "@aws-cdk/aws-neptune.SubnetGroupProps": {
      "assembly": "@aws-cdk/aws-neptune",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for creating a SubnetGroup.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as neptune from '@aws-cdk/aws-neptune';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst subnetGroupProps: neptune.SubnetGroupProps = {\n  vpc: vpc,\n\n  // the properties below are optional\n  description: 'description',\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n  subnetGroupName: 'subnetGroupName',\n  vpcSubnets: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-neptune.SubnetGroupProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/subnet-group.ts",
        "line": 20
      },
      "name": "SubnetGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The VPC to place the subnet group in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 31
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a name is generated",
            "stability": "experimental",
            "summary": "Description of the subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 26
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RemovalPolicy.DESTROY",
            "stability": "experimental",
            "summary": "The removal policy to apply when the subnet group are removed from the stack or replaced during an update."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 53
          },
          "name": "removalPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.RemovalPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a name is generated",
            "stability": "experimental",
            "summary": "The name of the subnet group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 38
          },
          "name": "subnetGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- private subnets",
            "stability": "experimental",
            "summary": "Which subnets within the VPC to associate with this group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/subnet-group.ts",
            "line": 45
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/subnet-group:SubnetGroupProps"
    }
  },
  "version": "1.169.0",
  "fingerprint": "**********"
}