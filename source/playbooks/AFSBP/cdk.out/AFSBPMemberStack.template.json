{
 "Description": "(SO0111C) AWS Security Hub Automated Response & Remediation AFSBP 1.0.0 Compliance Pack - Member Account, v1.50.mybuild",
 "AWSTemplateFormatVersion": "2010-09-09",
 "Parameters": {
  "SecHubAdminAccount": {
   "Type": "String",
   "AllowedPattern": "\\d{12}",
   "Description": "Admin account number"
  },
  "EnableAutoScaling1": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control AutoScaling.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableCloudTrail1": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control CloudTrail.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableCloudTrail2": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control CloudTrail.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableCloudTrail4": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control CloudTrail.4 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableCloudTrail5": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control CloudTrail.5 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableCodeBuild2": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control CodeBuild.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableConfig1": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Config.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableEC21": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control EC2.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableEC22": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control EC2.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableEC26": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control EC2.6 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableEC27": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control EC2.7 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableIAM3": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control IAM.3 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableIAM7": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control IAM.7 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableIAM8": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control IAM.8 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableLambda1": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Lambda.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS1": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS2": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS4": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.4 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS5": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.5 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS6": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.6 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS7": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.7 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS8": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.8 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS13": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.13 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRDS16": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control RDS.16 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRedshift1": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Redshift.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRedshift3": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Redshift.3 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRedshift4": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Redshift.4 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableRedshift6": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control Redshift.6 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableS31": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control S3.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableS32": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control S3.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableS34": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control S3.4 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableS35": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control S3.5 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "EnableS36": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for AFSBP version 1.0.0 Control S3.6 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  }
 },
 "Conditions": {
  "EnableAutoScaling1Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableAutoScaling1"
    },
    "Available"
   ]
  },
  "EnableCloudTrail1Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableCloudTrail1"
    },
    "Available"
   ]
  },
  "EnableCloudTrail2Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableCloudTrail2"
    },
    "Available"
   ]
  },
  "EnableCloudTrail4Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableCloudTrail4"
    },
    "Available"
   ]
  },
  "EnableCloudTrail5Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableCloudTrail5"
    },
    "Available"
   ]
  },
  "EnableCodeBuild2Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableCodeBuild2"
    },
    "Available"
   ]
  },
  "EnableConfig1Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableConfig1"
    },
    "Available"
   ]
  },
  "EnableEC21Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableEC21"
    },
    "Available"
   ]
  },
  "EnableEC22Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableEC22"
    },
    "Available"
   ]
  },
  "EnableEC26Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableEC26"
    },
    "Available"
   ]
  },
  "EnableEC27Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableEC27"
    },
    "Available"
   ]
  },
  "EnableIAM3Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableIAM3"
    },
    "Available"
   ]
  },
  "EnableIAM7Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableIAM7"
    },
    "Available"
   ]
  },
  "EnableIAM8Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableIAM8"
    },
    "Available"
   ]
  },
  "EnableLambda1Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableLambda1"
    },
    "Available"
   ]
  },
  "EnableRDS1Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS1"
    },
    "Available"
   ]
  },
  "EnableRDS2Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS2"
    },
    "Available"
   ]
  },
  "EnableRDS4Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS4"
    },
    "Available"
   ]
  },
  "EnableRDS5Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS5"
    },
    "Available"
   ]
  },
  "EnableRDS6Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS6"
    },
    "Available"
   ]
  },
  "EnableRDS7Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS7"
    },
    "Available"
   ]
  },
  "EnableRDS8Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS8"
    },
    "Available"
   ]
  },
  "EnableRDS13Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS13"
    },
    "Available"
   ]
  },
  "EnableRDS16Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRDS16"
    },
    "Available"
   ]
  },
  "EnableRedshift1Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRedshift1"
    },
    "Available"
   ]
  },
  "EnableRedshift3Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRedshift3"
    },
    "Available"
   ]
  },
  "EnableRedshift4Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRedshift4"
    },
    "Available"
   ]
  },
  "EnableRedshift6Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRedshift6"
    },
    "Available"
   ]
  },
  "EnableS31Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableS31"
    },
    "Available"
   ]
  },
  "EnableS32Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableS32"
    },
    "Available"
   ]
  },
  "EnableS34Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableS34"
    },
    "Available"
   ]
  },
  "EnableS35Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableS35"
    },
    "Available"
   ]
  },
  "EnableS36Condition": {
   "Fn::Equals": [
    {
     "Ref": "EnableS36"
    },
    "Available"
   ]
  }
 },
 "Resources": {
  "AFSBPAutoScaling1": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_AutoScaling.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_AutoScaling.1\n\n  ## What does this document do?\n  This document enables ELB healthcheck on a given AutoScaling Group using the [UpdateAutoScalingGroup] API.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * HealthCheckGracePeriod: (Optional) Health check grace period when ELB health check is Enabled\n  Default: 30 seconds\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP AutoScaling.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-autoscaling-1)\n\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the AutoScaling.1 finding\n  HealthCheckGracePeriod:\n    type: Integer\n    default: 30\n    description: ELB Health Check Grace Period\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: AutoScalingGroupName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):autoscaling:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:autoScalingGroup:(?i:[0-9a-f]{11}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}):autoScalingGroupName/(.*)$'\n        expected_control_id:\n        - 'AutoScaling.1'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableAutoScalingGroupELBHealthCheck\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: 'SO0111-EnableAutoScalingGroupELBHealthCheck'\n      RuntimeParameters:\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableAutoScalingGroupELBHealthCheck'\n        AutoScalingGroupName: '{{ParseInput.AutoScalingGroupName}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'ASG health check type updated to ELB'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_AutoScaling.1'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP AutoScaling.1/Default"
   },
   "Condition": "EnableAutoScaling1Condition"
  },
  "AFSBPCloudTrail1": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_CloudTrail.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_CloudTrail.1\n  ## What does this document do?\n  Creates a multi-region trail with KMS encryption and enables CloudTrail\n  Note: this remediation will create a NEW trail.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Documentation Links\n  * [AFSBP CloudTrail.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-1)\n\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the CloudTrail.1 finding\n  KMSKeyArn:\n    type: String\n    default: >-\n      {{ssm:/Solutions/SO0111/CMK_REMEDIATION_ARN}}\n    description: The ARN of the KMS key created by SHARR for this remediation\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(?:(?:alias/[A-Za-z0-9/-_])|(?:key/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})))$'\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        region: '{{global:REGION}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'CloudTrail.1'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-CreateCloudTrailMultiRegionTrail\n      RuntimeParameters:\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-CreateCloudTrailMultiRegionTrail'\n        AWSPartition: '{{global:AWS_PARTITION}}'\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Multi-region, encrypted AWS CloudTrail successfully created'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_CloudTrail.1'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP CloudTrail.1/Default"
   },
   "Condition": "EnableCloudTrail1Condition"
  },
  "AFSBPCloudTrail2": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_CloudTrail.2",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_CloudTrail.2\n  ## What does this document do?\n  This document enables SSE KMS encryption for log files using the SHARR remediation KMS CMK\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n  ## Output Parameters\n  * Remediation.Output - Output from the remediation\n\n  ## Documentation Links\n  * [AFSBP CloudTrail.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-2)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the CloudTrail.2 finding\n  KMSKeyArn:\n    type: String\n    default: >-\n      {{ssm:/Solutions/SO0111/CMK_REMEDIATION_ARN}}\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(?:(?:alias/[A-Za-z0-9/-_])|(?:key/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})))$'\n\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: TrailArn\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: TrailRegion\n        Selector: $.Payload.resource_region\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'CloudTrail.2'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-EnableCloudTrailEncryption\n      RuntimeParameters:\n        TrailRegion: '{{ParseInput.TrailRegion}}'\n        TrailArn: '{{ParseInput.TrailArn}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableCloudTrailEncryption'\n        KMSKeyArn: '{{KMSKeyArn}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n        - Id: '{{ParseInput.FindingId}}'\n          ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: Encryption enabled on CloudTrail\n        UpdatedBy: SHARR-AFSBP_1.0.0_CloudTrail.2\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP CloudTrail.2/Default"
   },
   "Condition": "EnableCloudTrail2Condition"
  },
  "AFSBPCloudTrail4": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_CloudTrail.4",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_CloudTrail.4\n\n  ## What does this document do?\n  This document enables CloudTrail log file validation.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 CloudTrail.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-4)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the CloudTrail.4 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableCloudTrailLogFileValidation\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: TrailName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):cloudtrail:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:trail/([A-Za-z0-9._-]{3,128})$'\n        expected_control_id:\n        - 'CloudTrail.4'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableCloudTrailLogFileValidation\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        TrailName: '{{ParseInput.TrailName}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Enabled CloudTrail log file validation.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_CloudTrail.2.4'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP CloudTrail.4/Default"
   },
   "Condition": "EnableCloudTrail4Condition"
  },
  "AFSBPCloudTrail5": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_CloudTrail.5",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_CloudTrail.5\n\n  ## What does this document do?\n  This document configures CloudTrail to log to CloudWatch Logs.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - Remediation results\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 CloudTrail.5](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-5)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the CloudTrail.5 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableCloudTrailToCloudWatchLogging\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: TrailName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):cloudtrail:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:trail/([A-Za-z0-9._-]{3,128})$'\n        expected_control_id:\n        - 'CloudTrail.5'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableCloudTrailToCloudWatchLogging\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        TrailName: '{{ ParseInput.TrailName }}'\n        CloudWatchLogsRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-CloudTrailToCloudWatchLogs'\n        LogGroupName: 'CloudTrail/{{ParseInput.TrailName}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Configured CloudTrail logging to CloudWatch Logs Group CloudTrail/{{ParseInput.TrailName}}'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_CloudTrail.5'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP CloudTrail.5/Default"
   },
   "Condition": "EnableCloudTrail5Condition"
  },
  "AFSBPCodeBuild2": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_CodeBuild.2",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_CodeBuild.2\n\n  ## What does this document do?\n  This document removes CodeBuild project environment variables containing clear text credentials and replaces them with Amazon EC2 Systems Manager Parameters.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 CodeBuild.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-codebuild-2)\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the CodeBuild.2 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: ProjectName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):codebuild:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:project/([A-Za-z0-9][A-Za-z0-9\\-_]{1,254})$'\n        expected_control_id: [ 'CodeBuild.2' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-ReplaceCodeBuildClearTextCredentials\n      RuntimeParameters:\n        ProjectName: '{{ ParseInput.ProjectName }}'\n        AutomationAssumeRole: 'arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/SO0111-ReplaceCodeBuildClearTextCredentials'\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ ParseInput.FindingId }}'\n        ProductArn: '{{ ParseInput.ProductArn }}'\n      Note:\n        Text: 'Replaced clear text credentials with SSM parameters.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_CodeBuild.2'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP CodeBuild.2/Default"
   },
   "Condition": "EnableCodeBuild2Condition"
  },
  "AFSBPConfig1": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_Config.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_Config.1\n  ## What does this document do?\n  Enables AWS Config:\n  * Turns on recording for all resources.\n  * Creates an encrypted bucket for Config logging.\n  * Creates a logging bucket for access logs for the config bucket\n  * Creates an SNS topic for Config notifications\n  * Creates a service-linked role\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Documentation Links\n  * [AFSBP Config.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-config-1)\n\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the Config.1 finding\n  KMSKeyArn:\n    type: String\n    default: >-\n      {{ssm:/Solutions/SO0111/CMK_REMEDIATION_ARN}}\n    description: The ARN of the KMS key created by SHARR for remediations\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(?:(?:alias/[A-Za-z0-9/-_])|(?:key/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})))$'\n\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'Config.1'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableAWSConfig\n      RuntimeParameters:\n        SNSTopicName: 'SO0111-SHARR-AWSConfigNotification'\n        KMSKeyArn: '{{KMSKeyArn}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableAWSConfig'\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'AWS Config enabled'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_Config.1'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP Config.1/Default"
   },
   "Condition": "EnableConfig1Condition"
  },
  "AFSBPEC21": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_EC2.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_EC2.1\n  ## What does this document do?\n  This document changes all public EC2 snapshots to private\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Documentation Links\n  * [AFSBP EC2.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-1)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the EC2.1 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\n\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: AccountId\n        Selector: $.Payload.account_id\n        Type: String\n      - Name: TestMode\n        Selector: $.Payload.testmode\n        Type: Boolean\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        resource_index: 2\n        expected_control_id:\n        - 'EC2.1'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n    isEnd: false\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-MakeEBSSnapshotsPrivate\n      RuntimeParameters:\n        AccountId: '{{ParseInput.AccountId}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-MakeEBSSnapshotsPrivate'\n        TestMode: '{{ParseInput.TestMode}}'\n    isEnd: false\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'EBS Snapshot modified to private'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_EC2.1'\n      Workflow:\n        Status: 'RESOLVED'\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP EC2.1/Default"
   },
   "Condition": "EnableEC21Condition"
  },
  "AFSBPEC22": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_EC2.2",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_EC2.2\n\n  ## What does this document do?\n  This document deletes ingress and egress rules from default security\n  group using the AWS SSM Runbook AWSConfigRemediation-RemoveVPCDefaultSecurityGroupRules\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - Output from AWSConfigRemediation-RemoveVPCDefaultSecurityGroupRules SSM doc\n\n  ## Documentation Links\n  * [AFSBP EC2.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-2)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the EC2.2 finding\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-RemoveVPCDefaultSecurityGroupRules\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: GroupId\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):ec2:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:security-group/(sg-[0-9a-f]*)$'\n        expected_control_id:\n        - 'EC2.2'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-RemoveVPCDefaultSecurityGroupRules\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        GroupId: '{{ParseInput.GroupId}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n        - Id: '{{ParseInput.FindingId}}'\n          ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: Removed rules on default security group\n        UpdatedBy: SHARR-AFSBP_1.0.0_EC2.2\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP EC2.2/Default"
   },
   "Condition": "EnableEC22Condition"
  },
  "AFSBPEC26": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_EC2.6",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_EC2.6\n\n  ## What does this document do?\n  Enables VPC Flow Logs for a VPC\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - Remediation results\n\n  ## Documentation Links\n  * [AFSBP EC2.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-6)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the EC2.6 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableVPCFlowLogs\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: VPC\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):ec2:.*:\\d{12}:vpc/(vpc-[0-9a-f]{8,17})$'\n        expected_control_id:\n        - 'EC2.6'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableVPCFlowLogs\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        VPC: '{{ParseInput.VPC}}'\n        RemediationRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-EnableVPCFlowLogs-remediationRole'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Enabled VPC Flow Logs for {{ParseInput.VPC}}'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_EC2.6'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP EC2.6/Default"
   },
   "Condition": "EnableEC26Condition"
  },
  "AFSBPEC27": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_EC2.7",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_EC2.7\n  ## What does this document do?\n  This document enables `EBS Encryption by default` for an AWS account in the current region by calling another SSM document\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP EC2.7](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-7)\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the EC2.7 finding\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableEbsEncryptionByDefault\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\noutputs:\n  - ExecRemediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'EC2.7'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n\n  -\n    name: ExecRemediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableEbsEncryptionByDefault\n      RuntimeParameters:\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Enabled EBS encryption by default'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_EC2.7'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP EC2.7/Default"
   },
   "Condition": "EnableEC27Condition"
  },
  "AFSBPIAM3": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_IAM.3",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_IAM.3\n\n  ## What does this document do?\n  This document disables active keys that have not been rotated for more than 90 days. Note that this remediation is **DISRUPTIVE**.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 IAM.3](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-iam-3)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the IAM.3 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  MaxCredentialUsageAge:\n    type: String\n    description: (Required) Maximum number of days a key can be unrotated. The default value is 90 days.\n    allowedPattern: ^[1-9][0-9]{0,3}|10000$\n    default: \"90\"\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-RevokeUnrotatedKeys\"\n    allowedPattern: '^[\\w+=,.@-]+'\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: IAMUser\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: IAMResourceId\n        Selector: $.Payload.details.AwsIamUser.UserId\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):iam::\\d{12}:user(?:(?:\\u002F)|(?:\\u002F[\\u0021-\\u007F]{1,510}\\u002F))([\\w+=,.@-]{1,64})$'\n        expected_control_id:\n        - 'IAM.3'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-RevokeUnrotatedKeys\n      RuntimeParameters:\n        IAMResourceId: '{{ ParseInput.IAMResourceId }}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n        MaxCredentialUsageAge: '{{MaxCredentialUsageAge}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Deactivated unrotated keys for {{ ParseInput.IAMUser }}.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_IAM.3'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP IAM.3/Default"
   },
   "Condition": "EnableIAM3Condition"
  },
  "AFSBPIAM7": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_IAM.7",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_IAM.7\n\n  ## What does this document do?\n  This document establishes a default password policy.\n\n  ## Security Standards and Controls\n  * AFSBP IAM.7\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP IAM.7](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-iam-7)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the IAM.7 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id: [ 'IAM.7' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-SetIAMPasswordPolicy\n      RuntimeParameters:\n        AllowUsersToChangePassword: True\n        HardExpiry: True\n        MaxPasswordAge: 90\n        MinimumPasswordLength: 14\n        RequireSymbols: True\n        RequireNumbers: True\n        RequireUppercaseCharacters: True\n        RequireLowercaseCharacters: True\n        PasswordReusePrevention: 24\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-SetIAMPasswordPolicy'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Established a baseline password policy using the AWSConfigRemediation-SetIAMPasswordPolicy runbook.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_IAM.7'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP IAM.7/Default"
   },
   "Condition": "EnableIAM7Condition"
  },
  "AFSBPIAM8": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_IAM.8",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_IAM.8\n\n  ## What does this document do?\n  This document ensures that credentials unused for 90 days or greater are disabled.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - Output of remediation runbook\n\n  SEE AWSConfigRemediation-RevokeUnusedIAMUserCredentials\n\n  ## Documentation Links\n  * [AFSBP IAM.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-iam-8)\n\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the IAM.8 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: IAMResourceId\n        Selector: $.Payload.details.AwsIamUser.UserId\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'IAM.8'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-RevokeUnusedIAMUserCredentials\n      RuntimeParameters:\n        IAMResourceId: '{{ ParseInput.IAMResourceId }}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-RevokeUnusedIAMUserCredentials'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Deactivated unused keys and expired logins using the AWSConfigRemediation-RevokeUnusedIAMUserCredentials runbook.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_IAM.8'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP IAM.8/Default"
   },
   "Condition": "EnableIAM8Condition"
  },
  "AFSBPLambda1": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_Lambda.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_Lambda.1\n\n  ## What does this document do?\n  This document removes the public resource policy. A public resource policy\n  contains a principal \"*\" or AWS: \"*\", which allows public access to the\n  function. The remediation is to remove the SID of the public policy.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Documentation Links\n  * [AFSBP Lambda.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-lambda-1)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the Lambda.1 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-RemoveLambdaPublicAccess\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: FunctionName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-us-gov|aws-cn):lambda:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:function:([a-zA-Z0-9\\-_]{1,64})$'\n        expected_control_id:\n        - 'Lambda.1'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-RemoveLambdaPublicAccess\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        FunctionName: '{{ ParseInput.FunctionName }}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Lamdba {{ParseInput.FunctionName}} policy updated to remove public access'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_Lambda.1'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP Lambda.1/Default"
   },
   "Condition": "EnableLambda1Condition"
  },
  "AFSBPRDS1": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.1\n  ## What does this document do?\n  This document changes public RDS snapshot to private\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Documentation Links\n  * [AFSBP RDS.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-1)\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the RDS.1 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-MakeRDSSnapshotPrivate\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: DBSnapshotId\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: DBSnapshotType\n        Selector: $.Payload.matches[0]\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: Type\n        Selector: $.Payload.type\n        Type: String\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):rds:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(cluster-snapshot|snapshot):([a-zA-Z](?:[0-9a-zA-Z]+[-]{1})*[0-9a-zA-Z]{1,})$'\n        resource_index: 2\n        expected_control_id:\n        - 'RDS.1'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    nextStep: Remediation\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-MakeRDSSnapshotPrivate\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        DBSnapshotId: '{{ParseInput.DBSnapshotId}}'\n        DBSnapshotType: '{{ParseInput.DBSnapshotType}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n    nextStep: UpdateFinding\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n        - Id: '{{ParseInput.FindingId}}'\n          ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: RDS DB Snapshot modified to private\n        UpdatedBy: SHARR-AFSBP_1.0.0_RDS.1\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.1/Default"
   },
   "Condition": "EnableRDS1Condition"
  },
  "AFSBPRDS2": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.2",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.2\n  ## What does this document do?\n  This document disables public access to RDS instances by calling another SSM document\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Documentation Links\n  * [AFSBP RDS.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-2)\nschemaVersion: '0.3'\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the RDS.2 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-DisablePublicAccessToRDSInstance'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):rds:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:db:((?!.*--.*)(?!.*-$)[a-z][a-z0-9-]{0,62})$'\n      expected_control_id:\n      - 'RDS.2'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'DbiResourceId'\n    Selector: '$.Payload.resource.Details.AwsRdsDbInstance.DbiResourceId'\n    Type: 'String'\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-DisablePublicAccessToRDSInstance'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      DbiResourceId: '{{ParseInput.DbiResourceId}}'\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Disabled public access to RDS instance'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.2'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.2/Default"
   },
   "Condition": "EnableRDS2Condition"
  },
  "AFSBPRDS4": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.4",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.4\n\n  ## What does this document do?\n  This document encrypts an unencrypted RDS snapshot by calling another SSM document\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n  * KMSKeyId: (Optional) ID, ARN or Alias for the AWS KMS Customer-Managed Key (CMK) to use to encrypt the snapshot.\n\n  ## Documentation Links\n  * [AFSBP RDS.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-4)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the RDS.4 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-EncryptRDSSnapshot'\n    allowedPattern: '^[\\w+=,.@/-]+'\n  KMSKeyId:\n    type: 'String'\n    default: 'alias/aws/rds'\n    description: '(Optional) ID, ARN or Alias for the AWS KMS Customer-Managed Key (CMK) to use to encrypt the snapshot.'\n    allowedPattern: '^(?:arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:)?(?:(?:alias/[A-Za-z0-9/_-]+)|(?:key/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})))$'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  outputs:\n  - Name: 'SourceDBSnapshotIdentifier'\n    Selector: '$.Payload.matches[1]'\n    Type: 'String'\n  - Name: 'SourceDBSnapshotIdentifierNoPrefix'\n    Selector: '$.Payload.matches[2]'\n    Type: 'String'\n  - Name: 'DBSnapshotType'\n    Selector: '$.Payload.matches[0]'\n    Type: 'String'\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):rds:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:((?:cluster-)?snapshot|dbclustersnapshot):((?:rds:)?((?!.*--.*)(?!.*-$)[a-zA-Z][a-zA-Z0-9-]{0,254}))$'\n      resource_index: 2\n      expected_control_id:\n      - 'RDS.4'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-EncryptRDSSnapshot'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      SourceDBSnapshotIdentifier: '{{ParseInput.SourceDBSnapshotIdentifier}}'\n      TargetDBSnapshotIdentifier: '{{ParseInput.SourceDBSnapshotIdentifierNoPrefix}}-encrypted'\n      DBSnapshotType: '{{ParseInput.DBSnapshotType}}'\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n      KmsKeyId: '{{KMSKeyId}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Encrypted RDS snapshot'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.4'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.4/Default"
   },
   "Condition": "EnableRDS4Condition"
  },
  "AFSBPRDS5": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.5",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.RDS.5\n\n  ## What does this document do?\n  This document configures an RDS DB instance for multiple Availability Zones by calling another SSM document.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n\n  ## Documentation Links\n  * [AFSBP RDS.5](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-5)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the RDS.5 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-EnableMultiAZOnRDSInstance'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: ''\n      expected_control_id:\n      - 'RDS.5'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'DbInstanceResourceId'\n    Selector: '$.Payload.details.AwsRdsDbInstance.DbiResourceId'\n    Type: 'String'\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-EnableMultiAZOnRDSInstance'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      DbiResourceId: '{{ParseInput.DbInstanceResourceId}}'\n      ApplyImmediately: true\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Configured RDS cluster for multiple Availability Zones'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.5'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.5/Default"
   },
   "Condition": "EnableRDS5Condition"
  },
  "AFSBPRDS6": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.6",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.6\n\n  ## What does this document do?\n  This document enables `Enhanced Monitoring` on a given Amazon RDS instance by calling another SSM document.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * VerifyRemediation.Output - The standard HTTP response from the ModifyDBInstance API.\n  ## Documentation Links\n\n  * [AFSBP RDS.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-6)\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the RDS.6 finding\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableEnhancedMonitoringOnRDSInstance\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: ResourceId\n        Selector: $.Payload.details.AwsRdsDbInstance.DbiResourceId\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'RDS.6'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n    isEnd: false\n  -\n    name: GetMonitoringRoleArn\n    action: aws:executeAwsApi\n    description: |\n      ## GetRole API to get EnhancedMonitoring IAM role ARN\n    timeoutSeconds: 600\n    isEnd: false\n    inputs:\n      Service: iam\n      Api: GetRole\n      RoleName: 'SO0111-RDSMonitoring-remediationRole'\n    outputs:\n    - Name: Arn\n      Selector: $.Role.Arn\n      Type: String\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableEnhancedMonitoringOnRDSInstance\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        ResourceId: '{{ ParseInput.ResourceId }}'\n        MonitoringRoleArn: '{{GetMonitoringRoleArn.Arn}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Enhanced Monitoring enabled on RDS DB cluster'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.6'\n      Workflow:\n        Status: 'RESOLVED'\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.6/Default"
   },
   "Condition": "EnableRDS6Condition"
  },
  "AFSBPRDS7": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.7",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.7\n\n  ## What does this document do?\n  This document enables `Deletion Protection` on a given Amazon RDS cluster by calling another SSM document.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - The standard HTTP response from the ModifyDBCluster API.\n\n  ## Documentation Links\n  * [AFSBP RDS.7](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-7)\n\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the RDS.7 finding\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableRDSClusterDeletionProtection\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: ResourceId\n        Selector: $.Payload.details.AwsRdsDbCluster.DbClusterResourceId\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'RDS.7'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-EnableRDSClusterDeletionProtection\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        ClusterId: '{{ ParseInput.ResourceId }}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Deletion protection enabled on RDS DB cluster'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.7'\n      Workflow:\n        Status: 'RESOLVED'\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.7/Default"
   },
   "Condition": "EnableRDS7Condition"
  },
  "AFSBPRDS8": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.8",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.RDS.8\n\n  ## What does this document do?\n  This document enables `Deletion Protection` on a given Amazon RDS cluster by calling another SSM document.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n\n  ## Documentation Links\n  * [AFSBP RDS.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-8)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the RDS.8 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-EnableRDSInstanceDeletionProtection'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: ''\n      expected_control_id:\n      - 'RDS.8'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'DbInstanceResourceId'\n    Selector: '$.Payload.details.AwsRdsDbInstance.DbiResourceId'\n    Type: 'String'\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-EnableRDSInstanceDeletionProtection'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      DbInstanceResourceId: '{{ParseInput.DbInstanceResourceId}}'\n      ApplyImmediately: true\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Enabled deletion protection on RDS instance'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.8'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.8/Default"
   },
   "Condition": "EnableRDS8Condition"
  },
  "AFSBPRDS13": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.13",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.13\n\n  ## What does this document do?\n  This document enables `Auto minor version upgrade` on a given Amazon RDS instance by calling another SSM document.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - The standard HTTP response from the ModifyDBInstance API.\n\n  ## Documentation Links\n  * [AFSBP RDS.13](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-13)\n\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the RDS.13 finding\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableMinorVersionUpgradeOnRDSDBInstance\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: 'DbiResourceId'\n        Selector: '$.Payload.resource.Details.AwsRdsDbInstance.DbiResourceId'\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'RDS.13'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-EnableMinorVersionUpgradeOnRDSDBInstance\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        DbiResourceId: '{{ ParseInput.DbiResourceId }}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Minor Version enabled on the RDS Instance.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.13'\n      Workflow:\n        Status: 'RESOLVED'\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.13/Default"
   },
   "Condition": "EnableRDS13Condition"
  },
  "AFSBPRDS16": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_RDS.16",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_RDS.16\n\n  ## What does this document do?\n  This document enables `Copy tags to snapshots` on a given Amazon RDS cluster by calling another SSM document.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output - The standard HTTP response from the ModifyDBCluster API.\n\n  ## Documentation Links\n  * [AFSBP RDS.16](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-rds-16)\n\nschemaVersion: \"0.3\"\nassumeRole: \"{{ AutomationAssumeRole }}\"\nparameters:\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the RDS.16 finding\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-EnableCopyTagsToSnapshotOnRDSCluster\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\noutputs:\n  - Remediation.Output\n  - ParseInput.AffectedObject\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: DbClusterResourceId\n        Selector: $.Payload.details.AwsRdsDbCluster.DbClusterResourceId\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: RemediationRegion\n        Selector: $.Payload.resource_region\n        Type: String\n      - Name: RemediationAccount\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id:\n        - 'RDS.16'\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-EnableCopyTagsToSnapshotOnRDSCluster\n      TargetLocations:\n        - Accounts: [ '{{ParseInput.RemediationAccount}}' ]\n          Regions: [ '{{ParseInput.RemediationRegion}}' ]\n          ExecutionRoleName: '{{RemediationRoleName}}'\n      RuntimeParameters:\n        DbClusterResourceId: '{{ ParseInput.DbClusterResourceId }}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n        ApplyImmediately: true\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Copy Tags to Snapshots enabled on RDS DB cluster'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_RDS.16'\n      Workflow:\n        Status: 'RESOLVED'\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP RDS.16/Default"
   },
   "Condition": "EnableRDS16Condition"
  },
  "AFSBPRedshift1": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_Redshift.1",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.0_Redshift.1\n\n  ## What does this document do?\n  This document disables public access to a Redshift cluster by calling another SSM document\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n\n  ## Documentation Links\n  * [AFSBP Redshift.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-redshift-1)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the Redshift.1 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-DisablePublicAccessToRedshiftCluster'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):redshift:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:cluster:(?!.*--)([a-z][a-z0-9-]{0,62})(?<!-)$'\n      expected_control_id:\n      - 'Redshift.1'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'ClusterIdentifier'\n    Selector: '$.Payload.resource_id'\n    Type: 'String'\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-DisablePublicAccessToRedshiftCluster'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      ClusterIdentifier: '{{ParseInput.ClusterIdentifier}}'\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Disabled public access to Redshift cluster'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_Redshift.1'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP Redshift.1/Default"
   },
   "Condition": "EnableRedshift1Condition"
  },
  "AFSBPRedshift3": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_Redshift.3",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.0_Redshift.3\n\n  ## What does this document do?\n  This document enables automatic snapshots on a Redshift cluster by calling another SSM document\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n\n  ## Documentation Links\n  * [AFSBP Redshift.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-redshift-3)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the Redshift.3 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-EnableAutomaticSnapshotsOnRedshiftCluster'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):redshift:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:cluster:(?!.*--)([a-z][a-z0-9-]{0,62})(?<!-)$'\n      expected_control_id:\n      - 'Redshift.3'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'ClusterIdentifier'\n    Selector: '$.Payload.resource_id'\n    Type: 'String'\n  - Name: RetentionPeriodSerialized\n    Selector: $.Payload.aws_config_rule.InputParameters\n    Type: String\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: 'ExtractConfigRuleParameters'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      SerializedJson: '{{ParseInput.RetentionPeriodSerialized}}'\n    Runtime: 'python3.8'\n    Handler: 'event_handler'\n    Script: |-\n      #!/usr/bin/python\n      # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      # SPDX-License-Identifier: Apache-2.0\n      import json\n      \n      def event_handler(event, context):\n          try:\n              return json.loads(event['SerializedJson'])\n          except Exception as e:\n              print(e)\n              exit('Failed to deserialize data')\n      \n  outputs:\n  - Name: 'MinRetentionPeriod'\n    Selector: '$.Payload.MinRetentionPeriod'\n    Type: 'String'\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-EnableAutomaticSnapshotsOnRedshiftCluster'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      ClusterIdentifier: '{{ParseInput.ClusterIdentifier}}'\n      MinRetentionPeriod: '{{ExtractConfigRuleParameters.MinRetentionPeriod}}'\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Enabled automatic snapshots on Redshift cluster'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_Redshift.3'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP Redshift.3/Default"
   },
   "Condition": "EnableRedshift3Condition"
  },
  "AFSBPRedshift4": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_Redshift.4",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.0_Redshift.4\n\n  ## What does this document do?\n  This document disables public access to a Redshift cluster by calling another SSM document\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n\n  ## Documentation Links\n  * [AFSBP Redshift.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-redshift-1)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the Redshift.4 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-EnableRedshiftClusterAuditLogging'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):redshift:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:cluster:(?!.*--)([a-z][a-z0-9-]{0,62})(?<!-)$'\n      expected_control_id:\n      - 'Redshift.4'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'ClusterIdentifier'\n    Selector: '$.Payload.resource_id'\n    Type: 'String'\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: CheckIfSSMParameterWithS3BucketNameIsAvailable\n  action: 'aws:executeScript'\n  inputs:\n    Runtime: python3.8\n    Handler: check_for_s3_bucket_name\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n\n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n\n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n\n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n\n      def get_solution_id():\n          return 'SO0111'\n\n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n\n      def check_for_s3_bucket_name(event, context):\n        try:\n            ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n            )\n            s3_bucket_name_for_audit_logging = ssm.get_parameter(\n                Name=f'/Solutions/{get_solution_id()}/afsbp/1.0.0/REDSHIFT.4/S3BucketNameForAuditLogging'\n            )['Parameter'].get('Value', 'unknown')\n        except Exception as e:\n            return {\n              \"s3_bucket_name_for_redshift_audit_logging\": \"NOT_AVAILABLE\"\n            }\n        return {\n            \"s3_bucket_name_for_redshift_audit_logging\": s3_bucket_name_for_audit_logging\n        }\n  outputs:\n    - Name: BucketName\n      Selector: $.Payload.s3_bucket_name_for_redshift_audit_logging\n      Type: String\n- name: 'ValidateIfS3BucketNameIsConfigured'\n  action: aws:branch\n  inputs:\n    Choices:\n    - NextStep: UpdateFindingThatS3BucketNameIsNotConfigured\n      Variable: '{{CheckIfSSMParameterWithS3BucketNameIsAvailable.BucketName}}'\n      StringEquals: 'NOT_AVAILABLE'\n    Default:\n      Remediation\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-EnableRedshiftClusterAuditLogging'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      ClusterIdentifier: '{{ParseInput.ClusterIdentifier}}'\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n      BucketName: '{{CheckIfSSMParameterWithS3BucketNameIsAvailable.BucketName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Enabled Audit logging for the Redshift cluster.'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_Redshift.4'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n- name: 'UpdateFindingThatS3BucketNameIsNotConfigured'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Remediation failed the s3 bucket name is not available, review the cloudformation template and select the option Yes for create redshift.4 s3 bucket cloudformation parameter.'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_Redshift.4'\n    Workflow:\n      Status: 'NOTIFIED'\n  description: 'Abort remediation as s3 bucket name is unavailable.'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP Redshift.4/Default"
   },
   "Condition": "EnableRedshift4Condition"
  },
  "AFSBPRedshift6": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_Redshift.6",
    "Content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n---\nschemaVersion: '0.3'\ndescription: |\n  ### Document Name - SHARR-AFSBP_1.0.0_Redshift.6\n\n  ## What does this document do?\n  This document enables automatic version upgrade on a Redshift cluster by calling another SSM document\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.\n  * RemediationRoleName: (Optional) The name of the role that allows Automation to remediate the finding on your behalf.\n\n  ## Documentation Links\n  * [AFSBP Redshift.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-redshift-6)\nassumeRole: '{{AutomationAssumeRole}}'\noutputs:\n- 'Remediation.Output'\n- 'ParseInput.AffectedObject'\nparameters:\n  Finding:\n    type: 'StringMap'\n    description: 'The input from the Orchestrator Step function for the Redshift.6 finding'\n  AutomationAssumeRole:\n    type: 'String'\n    description: '(Required) The ARN of the role that allows Automation to perform the actions on your behalf.'\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: 'String'\n    default: 'SO0111-EnableAutomaticVersionUpgradeOnRedshiftCluster'\n    allowedPattern: '^[\\w+=,.@/-]+'\nmainSteps:\n- name: 'ParseInput'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      Finding: '{{Finding}}'\n      parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):redshift:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:cluster:(?!.*--)([a-z][a-z0-9-]{0,62})(?<!-)$'\n      expected_control_id:\n      - 'Redshift.6'\n    Runtime: 'python3.8'\n    Handler: 'parse_event'\n    Script: |-\n      #!/usr/bin/python\n      ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      ## SPDX-License-Identifier: Apache-2.0\n      \n      import re\n      import json\n      import boto3\n      from botocore.config import Config\n      \n      def connect_to_config(boto_config):\n          return boto3.client('config', config=boto_config)\n      \n      def connect_to_ssm(boto_config):\n          return boto3.client('ssm', config=boto_config)\n      \n      def get_solution_id():\n          return 'SO0111'\n      \n      def get_solution_version():\n          ssm = connect_to_ssm(\n              Config(\n                  retries = {\n                      'mode': 'standard'\n                  },\n                  user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n              )\n          )\n          solution_version = 'unknown'\n          try:\n              ssm_parm_value = ssm.get_parameter(\n                  Name=f'/Solutions/{get_solution_id()}/member-version'\n              )['Parameter'].get('Value', 'unknown')\n              solution_version = ssm_parm_value\n          except Exception as e:\n              print(e)\n              print(f'ERROR getting solution version')\n          return solution_version\n      \n      def get_shortname(long_name):\n          short_name = {\n              'aws-foundational-security-best-practices': 'AFSBP',\n              'cis-aws-foundations-benchmark': 'CIS',\n              'pci-dss': 'PCI'\n          }\n          return short_name.get(long_name, None)\n      \n      def get_config_rule(rule_name):\n          boto_config = Config(\n              retries = {\n                  'mode': 'standard'\n              },\n              user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n          )\n          config_rule = None\n          try:\n              configsvc = connect_to_config(boto_config)\n              config_rule = configsvc.describe_config_rules(\n                  ConfigRuleNames=[ rule_name ]\n              ).get('ConfigRules', [])[0]\n          except Exception as e:\n              print(e)\n              exit(f'ERROR getting config rule {rule_name}')\n          return config_rule\n      \n      class FindingEvent:\n          \"\"\"\n          Finding object returns the parse fields from an input finding json object\n          \"\"\"\n          def _get_resource_id(self, parse_id_pattern, resource_index):\n              identifier_raw = self.finding_json['Resources'][0]['Id']\n              self.resource_id = identifier_raw\n              self.resource_id_matches = []\n      \n              if parse_id_pattern:\n                  identifier_match = re.match(\n                      parse_id_pattern,\n                      identifier_raw\n                  )\n      \n                  if identifier_match:\n                      for group in range(1, len(identifier_match.groups())+1):\n                          self.resource_id_matches.append(identifier_match.group(group))\n                      self.resource_id = identifier_match.group(resource_index)\n                  else:\n                      exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                  return\n      \n          def _get_standard_info(self):\n              match_finding_id = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                  self.finding_json['Id']\n              )\n              if match_finding_id:\n                  self.standard_id = get_shortname(match_finding_id.group(1))\n                  self.standard_version = match_finding_id.group(2)\n                  self.control_id = match_finding_id.group(3)      \n              else:\n                  self.valid_finding = False\n                  self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n      \n          def _get_aws_config_rule(self):\n              # config_rule_id refers to the AWS Config Rule that produced the finding\n              if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                  self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                  self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n              return\n          \n          def _get_region_from_resource_id(self):\n              check_for_region = re.match(\n                  r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                  self.finding_json['Resources'][0]['Id']\n              )\n              if check_for_region:\n                  self.resource_region = check_for_region.group(1)\n      \n          def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n              self.valid_finding = True\n              self.resource_region = None\n              self.control_id = None\n              self.aws_config_rule_id = None\n              self.aws_config_rule = {}\n      \n              \"\"\"Populate fields\"\"\"\n              # v1.5\n              self.finding_json = finding_json\n              self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n              self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n      \n              # V1.4\n              self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n              if not re.match(r'^\\d{12}$', self.account_id):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n              self.finding_id = self.finding_json.get('Id', None)              # deprecate\n              self.product_arn = self.finding_json.get('ProductArn', None)\n              if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n              self.details = self.finding_json['Resources'][0].get('Details', {})\n              # Test mode is used with fabricated finding data to tell the \n              # remediation runbook to run in test more (where supported)\n              # Currently not widely-used and perhaps should be deprecated.\n              self.testmode = bool('testmode' in self.finding_json)\n              self.resource = self.finding_json['Resources'][0]\n              self._get_region_from_resource_id()\n              self._get_aws_config_rule()\n              self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n      \n              # Validate control_id   \n              if not self.control_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n              elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n      \n              if not self.resource_id:\n                  if self.valid_finding:\n                      self.valid_finding = False\n                      self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n      \n              if not self.valid_finding:\n                  # Error message and return error data\n                  msg = f'ERROR: {self.invalid_finding_reason}'\n                  exit(msg)\n      \n          def __str__(self):\n              return json.dumps(self.__dict__)\n      \n      '''\n      MAIN\n      '''\n      def parse_event(event, context):\n          finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n        \n          if not finding_event.valid_finding:\n              exit('ERROR: Finding is not valid')\n      \n          return {\n              \"account_id\": finding_event.account_id,\n              \"resource_id\": finding_event.resource_id, \n              \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n              \"control_id\": finding_event.control_id,\n              \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n              \"object\": finding_event.affected_object,\n              \"matches\": finding_event.resource_id_matches,\n              \"details\": finding_event.details,               # Deprecate v1.5.0+\n              \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n              \"resource\": finding_event.resource,\n              \"resource_region\": finding_event.resource_region,\n              \"finding\": finding_event.finding_json,\n              \"aws_config_rule\": finding_event.aws_config_rule\n          }\n  outputs:\n  - Name: 'ClusterIdentifier'\n    Selector: '$.Payload.resource_id'\n    Type: 'String'\n  - Name: AllowVersionUpgradeSerialized\n    Selector: $.Payload.aws_config_rule.InputParameters\n    Type: String\n  - Name: 'AffectedObject'\n    Selector: '$.Payload.object'\n    Type: 'StringMap'\n  - Name: 'FindingId'\n    Selector: '$.Payload.finding.Id'\n    Type: 'String'\n  - Name: 'ProductArn'\n    Selector: '$.Payload.finding.ProductArn'\n    Type: 'String'\n  - Name: 'RemediationRegion'\n    Selector: '$.Payload.resource_region'\n    Type: 'String'\n  - Name: 'RemediationAccount'\n    Selector: '$.Payload.account_id'\n    Type: 'String'\n- name: 'ExtractConfigRuleParameters'\n  action: 'aws:executeScript'\n  inputs:\n    InputPayload:\n      SerializedJson: '{{ParseInput.AllowVersionUpgradeSerialized}}'\n    Runtime: 'python3.8'\n    Handler: 'event_handler'\n    Script: |-\n      #!/usr/bin/python\n      # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      # SPDX-License-Identifier: Apache-2.0\n      import json\n      \n      def event_handler(event, context):\n          try:\n              return json.loads(event['SerializedJson'])\n          except Exception as e:\n              print(e)\n              exit('Failed to deserialize data')\n      \n  outputs:\n  - Name: 'AllowVersionUpgrade'\n    Selector: '$.Payload.allowVersionUpgrade'\n    Type: 'String'\n- name: 'Remediation'\n  action: 'aws:executeAutomation'\n  inputs:\n    DocumentName: 'SHARR-EnableAutomaticVersionUpgradeOnRedshiftCluster'\n    TargetLocations:\n      - Accounts:\n        - '{{ParseInput.RemediationAccount}}'\n        Regions:\n        - '{{ParseInput.RemediationRegion}}'\n        ExecutionRoleName: '{{RemediationRoleName}}'\n    RuntimeParameters:\n      ClusterIdentifier: '{{ParseInput.ClusterIdentifier}}'\n      AllowVersionUpgrade: '{{ExtractConfigRuleParameters.AllowVersionUpgrade}}'\n      AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n- name: 'UpdateFinding'\n  action: 'aws:executeAwsApi'\n  inputs:\n    Service: 'securityhub'\n    Api: 'BatchUpdateFindings'\n    FindingIdentifiers:\n    - Id: '{{ParseInput.FindingId}}'\n      ProductArn: '{{ParseInput.ProductArn}}'\n    Note:\n      Text: 'Enabled automatic version upgrade on Redshift cluster'\n      UpdatedBy: 'SHARR-AFSBP_1.0.0_Redshift.6'\n    Workflow:\n      Status: 'RESOLVED'\n  description: 'Update finding'\n  isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP Redshift.6/Default"
   },
   "Condition": "EnableRedshift6Condition"
  },
  "AFSBPS31": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_S3.1",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_S3.1\n\n  ## What does this document do?\n  This document blocks public access to all buckets by default at the account level.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 S3.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-1)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the S3.1 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: AccountId\n        Selector: $.Payload.account_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: ''\n        expected_control_id: [ 'S3.1' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-ConfigureS3PublicAccessBlock\n      RuntimeParameters:\n        AccountId: '{{ParseInput.AccountId}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-ConfigureS3PublicAccessBlock'\n        RestrictPublicBuckets: true\n        BlockPublicAcls: true\n        IgnorePublicAcls: true\n        BlockPublicPolicy: true\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Configured the account to block public S3 access.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_S3.1'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP S3.1/Default"
   },
   "Condition": "EnableS31Condition"
  },
  "AFSBPS32": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_S3.2",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_S3.2\n\n  ## What does this document do?\n  This document blocks all public access to an S3 bucket.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 S3.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-2)\n  * [AFSBP v1.0.0 S3.3](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-3)\n  * [AFSBP v1.0.0 S3.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-8)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the S3.2 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: BucketName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$'\n        expected_control_id: [ 'S3.2', 'S3.3', 'S3.8' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-ConfigureS3BucketPublicAccessBlock\n      RuntimeParameters:\n        BucketName: '{{ParseInput.BucketName}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-ConfigureS3BucketPublicAccessBlock'\n        RestrictPublicBuckets: true\n        BlockPublicAcls: true\n        IgnorePublicAcls: true\n        BlockPublicPolicy: true\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Disabled public access to S3 bucket.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_S3.2'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP S3.2/Default"
   },
   "Condition": "EnableS32Condition"
  },
  "AFSBPS34": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_S3.4",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_S3.4\n\n  ## What does this document do?\n  This document enables AES-256 as the default encryption for an S3 bucket.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 S3.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-4)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the S3.4 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n      type: String\n      default: \"SO0111-EnableDefaultEncryptionS3\"\n      allowedPattern: '^[\\w+=,.@-]+'\n  KmsKeyAlias:\n      type: String\n      description: (Required) KMS Customer-Managed Key (CMK) alias or the default value which is created in the SSM parameter at solution deployment (default-s3-encryption) is used to identify that the s3 bucket encryption value should be set to AES-256.\n      default: >-\n        {{ssm:/Solutions/SO0111/afsbp/1.0.0/S3.4/KmsKeyAlias}}\n      allowedPattern: '^$|^[a-zA-Z0-9/_-]{1,256}$'\n\nmainSteps:\n  - name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: AccountId\n        Selector: $.Payload.account_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: BucketName\n        Selector: $.Payload.resource_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$'\n        expected_control_id: [ 'S3.4' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  - name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-EnableDefaultEncryptionS3\n      RuntimeParameters:\n        AccountId: '{{ParseInput.AccountId}}'\n        BucketName: '{{ParseInput.BucketName}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n        KmsKeyAlias: '{{KmsKeyAlias}}'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Enabled default encryption for {{ParseInput.BucketName}}'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_S3.4'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP S3.4/Default"
   },
   "Condition": "EnableS34Condition"
  },
  "AFSBPS35": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_S3.5",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_S3.5\n\n  ## What does this document do?\n  This document adds a bucket policy to restrict internet access to https only.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 S3.5](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-5)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the S3.5 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: BucketName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: FindingId\n        Selector: $.Payload.finding_id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.product_arn\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: AccountId\n        Selector: $.Payload.account_id\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$'\n        expected_control_id: [ 'S3.5' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n    isEnd: false\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    isEnd: false\n    inputs:\n      DocumentName: SHARR-SetSSLBucketPolicy\n      RuntimeParameters:\n        BucketName: '{{ParseInput.BucketName}}'\n        AccountId: '{{ParseInput.AccountId}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-SetSSLBucketPolicy'\n\n  - name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Added SSL-only access policy to S3 bucket.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_S3.5'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP S3.5/Default"
   },
   "Condition": "EnableS35Condition"
  },
  "AFSBPS36": {
   "Type": "Custom::UpdatableRunbook",
   "Properties": {
    "ServiceToken": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":lambda:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":function:SO0111-SHARR-updatableRunbookProvider"
      ]
     ]
    },
    "Name": "SHARR-AFSBP_1.0.0_S3.6",
    "Content": "description: |\n  ### Document Name - SHARR-AFSBP_1.0.0_S3.6\n\n  ## What does this document do?\n  This document restricts cross-account access to a bucket in the local account.\n\n  ## Input Parameters\n  * Finding: (Required) Security Hub finding details JSON\n  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n  ## Output Parameters\n  * Remediation.Output\n\n  ## Documentation Links\n  * [AFSBP v1.0.0 S3.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-6)\n\nschemaVersion: '0.3'\nassumeRole: '{{ AutomationAssumeRole }}'\noutputs:\n  - ParseInput.AffectedObject\n  - Remediation.Output\nparameters:\n  Finding:\n    type: StringMap\n    description: The input from the Orchestrator Step function for the S3.6 finding\n  AutomationAssumeRole:\n    type: String\n    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n    allowedPattern: '^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role/[\\w+=,.@-]+$'\n  RemediationRoleName:\n    type: String\n    default: \"SO0111-S3BlockDenylist\"\n    allowedPattern: '^[\\w+=,.@-]+'\n\nmainSteps:\n  -\n    name: ParseInput\n    action: 'aws:executeScript'\n    outputs:\n      - Name: BucketName\n        Selector: $.Payload.resource_id\n        Type: String\n      - Name: AffectedObject\n        Selector: $.Payload.object\n        Type: StringMap\n      - Name: FindingId\n        Selector: $.Payload.finding.Id\n        Type: String\n      - Name: ProductArn\n        Selector: $.Payload.finding.ProductArn\n        Type: String\n      - Name: ConfigRuleName\n        Selector: $.Payload.aws_config_rule.ConfigRuleName\n        Type: String\n      - Name: DenyListSerialized\n        Selector: $.Payload.aws_config_rule.InputParameters\n        Type: String\n    inputs:\n      InputPayload:\n        Finding: '{{Finding}}'\n        parse_id_pattern: '^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$'\n        expected_control_id: [ 'S3.6' ]\n      Runtime: python3.8\n      Handler: parse_event\n      Script: |-\n        #!/usr/bin/python\n        ## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        ## SPDX-License-Identifier: Apache-2.0\n        \n        import re\n        import json\n        import boto3\n        from botocore.config import Config\n        \n        def connect_to_config(boto_config):\n            return boto3.client('config', config=boto_config)\n        \n        def connect_to_ssm(boto_config):\n            return boto3.client('ssm', config=boto_config)\n        \n        def get_solution_id():\n            return 'SO0111'\n        \n        def get_solution_version():\n            ssm = connect_to_ssm(\n                Config(\n                    retries = {\n                        'mode': 'standard'\n                    },\n                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n                )\n            )\n            solution_version = 'unknown'\n            try:\n                ssm_parm_value = ssm.get_parameter(\n                    Name=f'/Solutions/{get_solution_id()}/member-version'\n                )['Parameter'].get('Value', 'unknown')\n                solution_version = ssm_parm_value\n            except Exception as e:\n                print(e)\n                print(f'ERROR getting solution version')\n            return solution_version\n        \n        def get_shortname(long_name):\n            short_name = {\n                'aws-foundational-security-best-practices': 'AFSBP',\n                'cis-aws-foundations-benchmark': 'CIS',\n                'pci-dss': 'PCI'\n            }\n            return short_name.get(long_name, None)\n        \n        def get_config_rule(rule_name):\n            boto_config = Config(\n                retries = {\n                    'mode': 'standard'\n                },\n                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n            )\n            config_rule = None\n            try:\n                configsvc = connect_to_config(boto_config)\n                config_rule = configsvc.describe_config_rules(\n                    ConfigRuleNames=[ rule_name ]\n                ).get('ConfigRules', [])[0]\n            except Exception as e:\n                print(e)\n                exit(f'ERROR getting config rule {rule_name}')\n            return config_rule\n        \n        class FindingEvent:\n            \"\"\"\n            Finding object returns the parse fields from an input finding json object\n            \"\"\"\n            def _get_resource_id(self, parse_id_pattern, resource_index):\n                identifier_raw = self.finding_json['Resources'][0]['Id']\n                self.resource_id = identifier_raw\n                self.resource_id_matches = []\n        \n                if parse_id_pattern:\n                    identifier_match = re.match(\n                        parse_id_pattern,\n                        identifier_raw\n                    )\n        \n                    if identifier_match:\n                        for group in range(1, len(identifier_match.groups())+1):\n                            self.resource_id_matches.append(identifier_match.group(group))\n                        self.resource_id = identifier_match.group(resource_index)\n                    else:\n                        exit(f'ERROR: Invalid resource Id {identifier_raw}')   \n                    return\n        \n            def _get_standard_info(self):\n                match_finding_id = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n                    self.finding_json['Id']\n                )\n                if match_finding_id:\n                    self.standard_id = get_shortname(match_finding_id.group(1))\n                    self.standard_version = match_finding_id.group(2)\n                    self.control_id = match_finding_id.group(3)      \n                else:\n                    self.valid_finding = False\n                    self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n        \n            def _get_aws_config_rule(self):\n                # config_rule_id refers to the AWS Config Rule that produced the finding\n                if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n                return\n            \n            def _get_region_from_resource_id(self):\n                check_for_region = re.match(\n                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:((?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)):.*:.*$',\n                    self.finding_json['Resources'][0]['Id']\n                )\n                if check_for_region:\n                    self.resource_region = check_for_region.group(1)\n        \n            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n                self.valid_finding = True\n                self.resource_region = None\n                self.control_id = None\n                self.aws_config_rule_id = None\n                self.aws_config_rule = {}\n        \n                \"\"\"Populate fields\"\"\"\n                # v1.5\n                self.finding_json = finding_json\n                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n        \n                # V1.4\n                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n                if not re.match(r'^\\d{12}$', self.account_id):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n                self.finding_id = self.finding_json.get('Id', None)              # deprecate\n                self.product_arn = self.finding_json.get('ProductArn', None)\n                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d)::product/aws/securityhub$', self.product_arn):\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n                self.details = self.finding_json['Resources'][0].get('Details', {})\n                # Test mode is used with fabricated finding data to tell the \n                # remediation runbook to run in test more (where supported)\n                # Currently not widely-used and perhaps should be deprecated.\n                self.testmode = bool('testmode' in self.finding_json)\n                self.resource = self.finding_json['Resources'][0]\n                self._get_region_from_resource_id()\n                self._get_aws_config_rule()\n                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n        \n                # Validate control_id   \n                if not self.control_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n                elif self.control_id not in expected_control_id:  # ControlId is the expected value\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n        \n                if not self.resource_id:\n                    if self.valid_finding:\n                        self.valid_finding = False\n                        self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n        \n                if not self.valid_finding:\n                    # Error message and return error data\n                    msg = f'ERROR: {self.invalid_finding_reason}'\n                    exit(msg)\n        \n            def __str__(self):\n                return json.dumps(self.__dict__)\n        \n        '''\n        MAIN\n        '''\n        def parse_event(event, context):\n            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n          \n            if not finding_event.valid_finding:\n                exit('ERROR: Finding is not valid')\n        \n            return {\n                \"account_id\": finding_event.account_id,\n                \"resource_id\": finding_event.resource_id, \n                \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n                \"control_id\": finding_event.control_id,\n                \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n                \"object\": finding_event.affected_object,\n                \"matches\": finding_event.resource_id_matches,\n                \"details\": finding_event.details,               # Deprecate v1.5.0+\n                \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n                \"resource\": finding_event.resource,\n                \"resource_region\": finding_event.resource_region,\n                \"finding\": finding_event.finding_json,\n                \"aws_config_rule\": finding_event.aws_config_rule\n            }\n\n  -\n    name: ExtractSensitiveApis\n    action: 'aws:executeScript'\n    inputs:\n      InputPayload:\n        SerializedList: '{{ ParseInput.DenyListSerialized }}'\n      Runtime: python3.8\n      Handler: runbook_handler\n      Script: |-\n        #!/usr/bin/python\n        # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        # SPDX-License-Identifier: Apache-2.0\n        import json\n        \n        def runbook_handler(event, context):\n            try:\n                deserialized = json.loads(event['SerializedList'])\n                if 'blacklistedActionPattern' in deserialized:\n                    return deserialized['blacklistedActionPattern'] # Returns comma-delimited list in a string\n                else:\n                    exit('Missing blacklistedActionPattern in AWS Config data')\n            except Exception as e:\n                print(e)\n                exit('Failed getting comma-delimited string list of sensitive API calls input data')\n        \n    outputs:\n      - Name: ListOfApis\n        Selector: $.Payload\n        Type: String\n\n  -\n    name: Remediation\n    action: 'aws:executeAutomation'\n    inputs:\n      DocumentName: SHARR-S3BlockDenylist\n      RuntimeParameters:\n        BucketName: '{{ParseInput.BucketName}}'\n        AutomationAssumeRole: 'arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/{{RemediationRoleName}}'\n        DenyList: '{{ExtractSensitiveApis.ListOfApis}}'\n\n  -\n    name: UpdateFinding\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: securityhub\n      Api: BatchUpdateFindings\n      FindingIdentifiers:\n      - Id: '{{ParseInput.FindingId}}'\n        ProductArn: '{{ParseInput.ProductArn}}'\n      Note:\n        Text: 'Added explicit deny for sensitive bucket access from another account.'\n        UpdatedBy: 'SHARR-AFSBP_1.0.0_S3.6'\n      Workflow:\n        Status: RESOLVED\n    description: Update finding\n    isEnd: true\n\n",
    "DocumentFormat": "YAML",
    "VersionName": "v1.50.mybuild",
    "DocumentType": "Automation"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AFSBPMemberStack/AFSBP S3.6/Default"
   },
   "Condition": "EnableS36Condition"
  }
 }
}