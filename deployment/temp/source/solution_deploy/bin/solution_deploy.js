#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const solution_deploy_stack_1 = require("../lib/solution_deploy-stack");
const orchestrator_log_stack_1 = require("../lib/orchestrator-log-stack");
const remediation_runbook_stack_1 = require("../lib/remediation_runbook-stack");
const sharr_member_stack_1 = require("../lib/sharr_member-stack");
const lambda = require("@aws-cdk/aws-lambda");
const cdk_nag = require("cdk-nag");
const cdk = require("@aws-cdk/core");
const SOLUTION_ID = process.env['SOLUTION_ID'] || 'unknown';
const SOLUTION_NAME = process.env['SOLUTION_NAME'] || 'unknown';
const SOLUTION_VERSION = process.env['DIST_VERSION'] || '%%VERSION%%';
const SOLUTION_TMN = process.env['SOLUTION_TRADEMARKEDNAME'] || 'unknown';
const SOLUTION_BUCKET = process.env['DIST_OUTPUT_BUCKET'] || 'unknown';
const LAMBDA_RUNTIME_PYTHON = lambda.Runtime.PYTHON_3_8;
const app = new cdk.App();
cdk.Aspects.of(app).add(new cdk_nag.AwsSolutionsChecks({ verbose: true }));
let LOG_GROUP = `${SOLUTION_ID}-SHARR-Orchestrator`;
LOG_GROUP = LOG_GROUP.replace(/^DEV-/, ''); // prefix on every resource name
const solStack = new solution_deploy_stack_1.SolutionDeployStack(app, 'SolutionDeployStack', {
    description: '(' + SOLUTION_ID + ') ' + SOLUTION_NAME + ' Administrator Stack, ' + SOLUTION_VERSION,
    solutionId: SOLUTION_ID,
    solutionVersion: SOLUTION_VERSION,
    solutionDistBucket: SOLUTION_BUCKET,
    solutionTMN: SOLUTION_TMN,
    solutionName: SOLUTION_NAME,
    runtimePython: LAMBDA_RUNTIME_PYTHON,
    orchLogGroup: LOG_GROUP
});
solStack.templateOptions.templateFormatVersion = '2010-09-09';
const memberStack = new sharr_member_stack_1.MemberStack(app, 'MemberStack', {
    description: '(' + SOLUTION_ID + 'M) ' + SOLUTION_NAME + ' Member Account Stack, ' + SOLUTION_VERSION,
    solutionId: SOLUTION_ID,
    solutionTMN: SOLUTION_TMN,
    solutionDistBucket: SOLUTION_BUCKET,
    solutionVersion: SOLUTION_VERSION,
    runtimePython: LAMBDA_RUNTIME_PYTHON
});
memberStack.templateOptions.templateFormatVersion = '2010-09-09';
const roleStack = new remediation_runbook_stack_1.MemberRoleStack(app, 'MemberRoleStack', {
    description: '(' + SOLUTION_ID + 'R) ' + SOLUTION_NAME + ' Remediation Roles, ' + SOLUTION_VERSION,
    solutionId: SOLUTION_ID,
    solutionVersion: SOLUTION_VERSION,
    solutionDistBucket: SOLUTION_BUCKET,
});
roleStack.templateOptions.templateFormatVersion = '2010-09-09';
cdk_nag.NagSuppressions.addStackSuppressions(roleStack, [
    { id: 'AwsSolutions-IAM5', reason: 'Resource and action wildcards are needed to remediate findings on arbitrary resources' }
]);
const runbookStack = new remediation_runbook_stack_1.RemediationRunbookStack(app, 'RunbookStack', {
    description: '(' + SOLUTION_ID + 'R) ' + SOLUTION_NAME + ' Remediation Runbooks, ' + SOLUTION_VERSION,
    solutionId: SOLUTION_ID,
    solutionVersion: SOLUTION_VERSION,
    solutionDistBucket: SOLUTION_BUCKET,
    roleStack: roleStack
});
runbookStack.templateOptions.templateFormatVersion = '2010-09-09';
const orchLogStack = new orchestrator_log_stack_1.OrchLogStack(app, 'OrchestratorLogStack', {
    description: `(${SOLUTION_ID}L) ${SOLUTION_NAME} Orchestrator Log, ${SOLUTION_VERSION}`,
    logGroupName: LOG_GROUP,
    solutionId: SOLUTION_ID
});
orchLogStack.templateOptions.templateFormatVersion = '2010-09-09';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sdXRpb25fZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic29sdXRpb25fZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFFQUFxRTtBQUNyRSxzQ0FBc0M7QUFDdEMsd0VBQW1FO0FBQ25FLDBFQUE2RDtBQUM3RCxnRkFBNEY7QUFDNUYsa0VBQXdEO0FBQ3hELDhDQUE4QztBQUM5QyxtQ0FBbUM7QUFDbkMscUNBQXFDO0FBRXJDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUyxDQUFDO0FBQzVELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksU0FBUyxDQUFDO0FBQ2hFLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxhQUFhLENBQUM7QUFDdEUsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLFNBQVMsQ0FBQztBQUMxRSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksU0FBUyxDQUFDO0FBQ3ZFLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFeEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLGtCQUFrQixDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztBQUV6RSxJQUFJLFNBQVMsR0FBRyxHQUFHLFdBQVcscUJBQXFCLENBQUM7QUFDcEQsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDO0FBRTVFLE1BQU0sUUFBUSxHQUFHLElBQUksMkNBQW1CLENBQUMsR0FBRyxFQUFFLHFCQUFxQixFQUFFO0lBQ25FLFdBQVcsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLElBQUksR0FBRyxhQUFhLEdBQUcsd0JBQXdCLEdBQUcsZ0JBQWdCO0lBQ25HLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLGVBQWUsRUFBRSxnQkFBZ0I7SUFDakMsa0JBQWtCLEVBQUUsZUFBZTtJQUNuQyxXQUFXLEVBQUUsWUFBWTtJQUN6QixZQUFZLEVBQUUsYUFBYTtJQUMzQixhQUFhLEVBQUUscUJBQXFCO0lBQ3BDLFlBQVksRUFBRSxTQUFTO0NBQ3hCLENBQUMsQ0FBQztBQUNILFFBQVEsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDO0FBRTlELE1BQU0sV0FBVyxHQUFHLElBQUksZ0NBQVcsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFO0lBQ3RELFdBQVcsRUFBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLEtBQUssR0FBRyxhQUFhLEdBQUcseUJBQXlCLEdBQUcsZ0JBQWdCO0lBQ3JHLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLFdBQVcsRUFBRSxZQUFZO0lBQ3pCLGtCQUFrQixFQUFFLGVBQWU7SUFDbkMsZUFBZSxFQUFFLGdCQUFnQjtJQUNqQyxhQUFhLEVBQUUscUJBQXFCO0NBQ3JDLENBQUMsQ0FBQztBQUNILFdBQVcsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDO0FBRWpFLE1BQU0sU0FBUyxHQUFHLElBQUksMkNBQWUsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUU7SUFDNUQsV0FBVyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsS0FBSyxHQUFHLGFBQWEsR0FBRyxzQkFBc0IsR0FBRyxnQkFBZ0I7SUFDbEcsVUFBVSxFQUFFLFdBQVc7SUFDdkIsZUFBZSxFQUFFLGdCQUFnQjtJQUNqQyxrQkFBa0IsRUFBRSxlQUFlO0NBQ3BDLENBQUMsQ0FBQztBQUNILFNBQVMsQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDO0FBQy9ELE9BQU8sQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFO0lBQ3RELEVBQUMsRUFBRSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSx1RkFBdUYsRUFBQztDQUMzSCxDQUFDLENBQUM7QUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLG1EQUF1QixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUU7SUFDcEUsV0FBVyxFQUFFLEdBQUcsR0FBRyxXQUFXLEdBQUcsS0FBSyxHQUFHLGFBQWEsR0FBRyx5QkFBeUIsR0FBRyxnQkFBZ0I7SUFDckcsVUFBVSxFQUFFLFdBQVc7SUFDdkIsZUFBZSxFQUFFLGdCQUFnQjtJQUNqQyxrQkFBa0IsRUFBRSxlQUFlO0lBQ25DLFNBQVMsRUFBRSxTQUFTO0NBQ3JCLENBQUMsQ0FBQztBQUNILFlBQVksQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDO0FBRWxFLE1BQU0sWUFBWSxHQUFHLElBQUkscUNBQVksQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUU7SUFDakUsV0FBVyxFQUFFLElBQUksV0FBVyxNQUFNLGFBQWEsc0JBQXNCLGdCQUFnQixFQUFFO0lBQ3ZGLFlBQVksRUFBRSxTQUFTO0lBQ3ZCLFVBQVUsRUFBRSxXQUFXO0NBQ3hCLENBQUMsQ0FBQztBQUNILFlBQVksQ0FBQyxlQUFlLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuaW1wb3J0IHsgU29sdXRpb25EZXBsb3lTdGFjayB9IGZyb20gJy4uL2xpYi9zb2x1dGlvbl9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgT3JjaExvZ1N0YWNrIH0gZnJvbSAnLi4vbGliL29yY2hlc3RyYXRvci1sb2ctc3RhY2snO1xuaW1wb3J0IHsgUmVtZWRpYXRpb25SdW5ib29rU3RhY2ssIE1lbWJlclJvbGVTdGFjayB9IGZyb20gJy4uL2xpYi9yZW1lZGlhdGlvbl9ydW5ib29rLXN0YWNrJztcbmltcG9ydCB7IE1lbWJlclN0YWNrIH0gZnJvbSAnLi4vbGliL3NoYXJyX21lbWJlci1zdGFjayc7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBjZGtfbmFnIGZyb20gJ2Nkay1uYWcnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuXG5jb25zdCBTT0xVVElPTl9JRCA9IHByb2Nlc3MuZW52WydTT0xVVElPTl9JRCddIHx8ICd1bmtub3duJztcbmNvbnN0IFNPTFVUSU9OX05BTUUgPSBwcm9jZXNzLmVudlsnU09MVVRJT05fTkFNRSddIHx8ICd1bmtub3duJztcbmNvbnN0IFNPTFVUSU9OX1ZFUlNJT04gPSBwcm9jZXNzLmVudlsnRElTVF9WRVJTSU9OJ10gfHwgJyUlVkVSU0lPTiUlJztcbmNvbnN0IFNPTFVUSU9OX1RNTiA9IHByb2Nlc3MuZW52WydTT0xVVElPTl9UUkFERU1BUktFRE5BTUUnXSB8fCAndW5rbm93bic7XG5jb25zdCBTT0xVVElPTl9CVUNLRVQgPSBwcm9jZXNzLmVudlsnRElTVF9PVVRQVVRfQlVDS0VUJ10gfHwgJ3Vua25vd24nO1xuY29uc3QgTEFNQkRBX1JVTlRJTUVfUFlUSE9OID0gbGFtYmRhLlJ1bnRpbWUuUFlUSE9OXzNfODtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNkay5Bc3BlY3RzLm9mKGFwcCkuYWRkKG5ldyBjZGtfbmFnLkF3c1NvbHV0aW9uc0NoZWNrcyh7dmVyYm9zZTogdHJ1ZX0pKTtcblxubGV0IExPR19HUk9VUCA9IGAke1NPTFVUSU9OX0lEfS1TSEFSUi1PcmNoZXN0cmF0b3JgO1xuTE9HX0dST1VQID0gTE9HX0dST1VQLnJlcGxhY2UoL15ERVYtLywgJycpOyAvLyBwcmVmaXggb24gZXZlcnkgcmVzb3VyY2UgbmFtZVxuXG5jb25zdCBzb2xTdGFjayA9IG5ldyBTb2x1dGlvbkRlcGxveVN0YWNrKGFwcCwgJ1NvbHV0aW9uRGVwbG95U3RhY2snLCB7XG4gIGRlc2NyaXB0aW9uOiAnKCcgKyBTT0xVVElPTl9JRCArICcpICcgKyBTT0xVVElPTl9OQU1FICsgJyBBZG1pbmlzdHJhdG9yIFN0YWNrLCAnICsgU09MVVRJT05fVkVSU0lPTixcbiAgc29sdXRpb25JZDogU09MVVRJT05fSUQsXG4gIHNvbHV0aW9uVmVyc2lvbjogU09MVVRJT05fVkVSU0lPTixcbiAgc29sdXRpb25EaXN0QnVja2V0OiBTT0xVVElPTl9CVUNLRVQsXG4gIHNvbHV0aW9uVE1OOiBTT0xVVElPTl9UTU4sXG4gIHNvbHV0aW9uTmFtZTogU09MVVRJT05fTkFNRSxcbiAgcnVudGltZVB5dGhvbjogTEFNQkRBX1JVTlRJTUVfUFlUSE9OLFxuICBvcmNoTG9nR3JvdXA6IExPR19HUk9VUFxufSk7XG5zb2xTdGFjay50ZW1wbGF0ZU9wdGlvbnMudGVtcGxhdGVGb3JtYXRWZXJzaW9uID0gJzIwMTAtMDktMDknO1xuXG5jb25zdCBtZW1iZXJTdGFjayA9IG5ldyBNZW1iZXJTdGFjayhhcHAsICdNZW1iZXJTdGFjaycsIHtcbiAgZGVzY3JpcHRpb246ICcoJyArIFNPTFVUSU9OX0lEICsgJ00pICcgKyBTT0xVVElPTl9OQU1FICsgJyBNZW1iZXIgQWNjb3VudCBTdGFjaywgJyArIFNPTFVUSU9OX1ZFUlNJT04sXG4gIHNvbHV0aW9uSWQ6IFNPTFVUSU9OX0lELFxuICBzb2x1dGlvblRNTjogU09MVVRJT05fVE1OLFxuICBzb2x1dGlvbkRpc3RCdWNrZXQ6IFNPTFVUSU9OX0JVQ0tFVCxcbiAgc29sdXRpb25WZXJzaW9uOiBTT0xVVElPTl9WRVJTSU9OLFxuICBydW50aW1lUHl0aG9uOiBMQU1CREFfUlVOVElNRV9QWVRIT05cbn0pO1xubWVtYmVyU3RhY2sudGVtcGxhdGVPcHRpb25zLnRlbXBsYXRlRm9ybWF0VmVyc2lvbiA9ICcyMDEwLTA5LTA5JztcblxuY29uc3Qgcm9sZVN0YWNrID0gbmV3IE1lbWJlclJvbGVTdGFjayhhcHAsICdNZW1iZXJSb2xlU3RhY2snLCB7XG4gIGRlc2NyaXB0aW9uOiAnKCcgKyBTT0xVVElPTl9JRCArICdSKSAnICsgU09MVVRJT05fTkFNRSArICcgUmVtZWRpYXRpb24gUm9sZXMsICcgKyBTT0xVVElPTl9WRVJTSU9OLFxuICBzb2x1dGlvbklkOiBTT0xVVElPTl9JRCxcbiAgc29sdXRpb25WZXJzaW9uOiBTT0xVVElPTl9WRVJTSU9OLFxuICBzb2x1dGlvbkRpc3RCdWNrZXQ6IFNPTFVUSU9OX0JVQ0tFVCxcbn0pO1xucm9sZVN0YWNrLnRlbXBsYXRlT3B0aW9ucy50ZW1wbGF0ZUZvcm1hdFZlcnNpb24gPSAnMjAxMC0wOS0wOSc7XG5jZGtfbmFnLk5hZ1N1cHByZXNzaW9ucy5hZGRTdGFja1N1cHByZXNzaW9ucyhyb2xlU3RhY2ssIFtcbiAge2lkOiAnQXdzU29sdXRpb25zLUlBTTUnLCByZWFzb246ICdSZXNvdXJjZSBhbmQgYWN0aW9uIHdpbGRjYXJkcyBhcmUgbmVlZGVkIHRvIHJlbWVkaWF0ZSBmaW5kaW5ncyBvbiBhcmJpdHJhcnkgcmVzb3VyY2VzJ31cbl0pO1xuXG5jb25zdCBydW5ib29rU3RhY2sgPSBuZXcgUmVtZWRpYXRpb25SdW5ib29rU3RhY2soYXBwLCAnUnVuYm9va1N0YWNrJywge1xuICBkZXNjcmlwdGlvbjogJygnICsgU09MVVRJT05fSUQgKyAnUikgJyArIFNPTFVUSU9OX05BTUUgKyAnIFJlbWVkaWF0aW9uIFJ1bmJvb2tzLCAnICsgU09MVVRJT05fVkVSU0lPTixcbiAgc29sdXRpb25JZDogU09MVVRJT05fSUQsXG4gIHNvbHV0aW9uVmVyc2lvbjogU09MVVRJT05fVkVSU0lPTixcbiAgc29sdXRpb25EaXN0QnVja2V0OiBTT0xVVElPTl9CVUNLRVQsXG4gIHJvbGVTdGFjazogcm9sZVN0YWNrXG59KTtcbnJ1bmJvb2tTdGFjay50ZW1wbGF0ZU9wdGlvbnMudGVtcGxhdGVGb3JtYXRWZXJzaW9uID0gJzIwMTAtMDktMDknO1xuXG5jb25zdCBvcmNoTG9nU3RhY2sgPSBuZXcgT3JjaExvZ1N0YWNrKGFwcCwgJ09yY2hlc3RyYXRvckxvZ1N0YWNrJywge1xuICBkZXNjcmlwdGlvbjogYCgke1NPTFVUSU9OX0lEfUwpICR7U09MVVRJT05fTkFNRX0gT3JjaGVzdHJhdG9yIExvZywgJHtTT0xVVElPTl9WRVJTSU9OfWAsXG4gIGxvZ0dyb3VwTmFtZTogTE9HX0dST1VQLFxuICBzb2x1dGlvbklkOiBTT0xVVElPTl9JRFxufSk7XG5vcmNoTG9nU3RhY2sudGVtcGxhdGVPcHRpb25zLnRlbXBsYXRlRm9ybWF0VmVyc2lvbiA9ICcyMDEwLTA5LTA5JztcbiJdfQ==